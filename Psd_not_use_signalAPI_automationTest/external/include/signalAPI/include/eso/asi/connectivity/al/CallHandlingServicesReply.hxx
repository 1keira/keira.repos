/*
    Copyright 2020 e.solutions GmbH
    All rights reserved
    GENERATED FROM esofw_core_sdk code generator using template InterfaceReply_hxx.tmpl
*/
#ifndef ASI_CONNECTIVITY_AL_CALLHANDLINGSERVICESREPLY_HXX
#define ASI_CONNECTIVITY_AL_CALLHANDLINGSERVICESREPLY_HXX

#include <comm/commtypes.hxx>
#include <comm/commidltypes.hxx>
#include <comm/CallEvent.hxx>
#include <asi/connectivity/al/StructCallStatus.hxx>
#include <asi/connectivity/al/Definitions.hxx>

namespace asi
{
namespace connectivity
{
namespace al
{

    /**
    \brief  Declaration of the reply interface, which must be implemented by any user of this interface
    **/
    class CallHandlingServicesReply {

    public:
    // List of reply methods
            /**
            sendDtmfResponse Method ID: 19
            **/
        virtual void sendDtmfResponse(
            const asi::connectivity::al::ResultType result
        ) = 0;
            /**
            acceptCallResponse Method ID: 3
            **/
        virtual void acceptCallResponse(
            const asi::connectivity::al::ResultType result
        ) = 0;
            /**
            acceptAndHoldCallResponse Method ID: 1
            **/
        virtual void acceptAndHoldCallResponse(
            const asi::connectivity::al::ResultType result
        ) = 0;
            /**
            switchCallsResponse Method ID: 23
            **/
        virtual void switchCallsResponse(
            const asi::connectivity::al::ResultType result
        ) = 0;
            /**
            dialNumberResponse Method ID: 7
            **/
        virtual void dialNumberResponse(
            const asi::connectivity::al::ResultType result
        ) = 0;
            /**
            hangupCallResponse Method ID: 11
            **/
        virtual void hangupCallResponse(
            const asi::connectivity::al::ResultType result
        ) = 0;
            /**
            joinCallsResponse Method ID: 15
            **/
        virtual void joinCallsResponse(
            const asi::connectivity::al::ResultType result
        ) = 0;
            /**
            splitCallResponse Method ID: 21
            **/
        virtual void splitCallResponse(
            const asi::connectivity::al::ResultType result
        ) = 0;
            /**
            holdActiveCallsResponse Method ID: 13
            **/
        virtual void holdActiveCallsResponse(
            const asi::connectivity::al::ResultType result
        ) = 0;
            /**
            resumeHeldCallsResponse Method ID: 17
            **/
        virtual void resumeHeldCallsResponse(
            const asi::connectivity::al::ResultType result
        ) = 0;
            /**
            updCallStatus Method ID: 24
            **/
        virtual void updCallStatus(
            const asi::connectivity::al::DeviceType device,
            const CIPtr< CIPtrArray< asi::connectivity::al::CallStatus > >& states
        ) = 0;
            /**
            executeUSSDResponse Method ID: 9
            **/
        virtual void executeUSSDResponse(
            const asi::connectivity::al::ResultType result
        ) = 0;
            /**
            *
         * USSD reply.
         * @param ussdResult if the NAD accepted the USSD this result codes states to actual network
         * result (network timeout, already answered, session started, ...)
         * @param response holds the network message if generated by the network
         
            ussdReply Method ID: 26
            **/
        virtual void ussdReply(
            const asi::connectivity::al::UssdResultCode ussdResult,
            const CIPtr< CIString >& response
        ) = 0;
            /**
            cancelUSSDResponse Method ID: 5
            **/
        virtual void cancelUSSDResponse(
            const asi::connectivity::al::ResultType result
        ) = 0;
            /**
            updateHfpError Method ID: 25
            **/
        virtual void updateHfpError(
            const asi::connectivity::al::HfpError error
        ) = 0;

        /*!
        \brief Informs the service about a connected client
        \param count The number of connected clients
        */
        virtual void clientConnected(uint32_t count) {}

        /*!
        \brief Informs the service that a client disconnected
        \param count the number of connected clients
        */
        virtual void clientDisconnected(uint32_t count) {}

        // call ids
        void
        sendDtmfResponseCallID( comm::CallEvent::CallID& ce )
        {
            void* inst=static_cast<CallHandlingServicesReply*>(this);
            // Don't ever rely on these values outside of a CallID
            comm::OpaqueMethodID mid= 19;
            ce.assign(inst, mid);
        }

        void
        acceptCallResponseCallID( comm::CallEvent::CallID& ce )
        {
            void* inst=static_cast<CallHandlingServicesReply*>(this);
            // Don't ever rely on these values outside of a CallID
            comm::OpaqueMethodID mid= 3;
            ce.assign(inst, mid);
        }

        void
        acceptAndHoldCallResponseCallID( comm::CallEvent::CallID& ce )
        {
            void* inst=static_cast<CallHandlingServicesReply*>(this);
            // Don't ever rely on these values outside of a CallID
            comm::OpaqueMethodID mid= 1;
            ce.assign(inst, mid);
        }

        void
        switchCallsResponseCallID( comm::CallEvent::CallID& ce )
        {
            void* inst=static_cast<CallHandlingServicesReply*>(this);
            // Don't ever rely on these values outside of a CallID
            comm::OpaqueMethodID mid= 23;
            ce.assign(inst, mid);
        }

        void
        dialNumberResponseCallID( comm::CallEvent::CallID& ce )
        {
            void* inst=static_cast<CallHandlingServicesReply*>(this);
            // Don't ever rely on these values outside of a CallID
            comm::OpaqueMethodID mid= 7;
            ce.assign(inst, mid);
        }

        void
        hangupCallResponseCallID( comm::CallEvent::CallID& ce )
        {
            void* inst=static_cast<CallHandlingServicesReply*>(this);
            // Don't ever rely on these values outside of a CallID
            comm::OpaqueMethodID mid= 11;
            ce.assign(inst, mid);
        }

        void
        joinCallsResponseCallID( comm::CallEvent::CallID& ce )
        {
            void* inst=static_cast<CallHandlingServicesReply*>(this);
            // Don't ever rely on these values outside of a CallID
            comm::OpaqueMethodID mid= 15;
            ce.assign(inst, mid);
        }

        void
        splitCallResponseCallID( comm::CallEvent::CallID& ce )
        {
            void* inst=static_cast<CallHandlingServicesReply*>(this);
            // Don't ever rely on these values outside of a CallID
            comm::OpaqueMethodID mid= 21;
            ce.assign(inst, mid);
        }

        void
        holdActiveCallsResponseCallID( comm::CallEvent::CallID& ce )
        {
            void* inst=static_cast<CallHandlingServicesReply*>(this);
            // Don't ever rely on these values outside of a CallID
            comm::OpaqueMethodID mid= 13;
            ce.assign(inst, mid);
        }

        void
        resumeHeldCallsResponseCallID( comm::CallEvent::CallID& ce )
        {
            void* inst=static_cast<CallHandlingServicesReply*>(this);
            // Don't ever rely on these values outside of a CallID
            comm::OpaqueMethodID mid= 17;
            ce.assign(inst, mid);
        }

        void
        updCallStatusCallID( comm::CallEvent::CallID& ce )
        {
            void* inst=static_cast<CallHandlingServicesReply*>(this);
            // Don't ever rely on these values outside of a CallID
            comm::OpaqueMethodID mid= 24;
            ce.assign(inst, mid);
        }

        void
        executeUSSDResponseCallID( comm::CallEvent::CallID& ce )
        {
            void* inst=static_cast<CallHandlingServicesReply*>(this);
            // Don't ever rely on these values outside of a CallID
            comm::OpaqueMethodID mid= 9;
            ce.assign(inst, mid);
        }

        void
        ussdReplyCallID( comm::CallEvent::CallID& ce )
        {
            void* inst=static_cast<CallHandlingServicesReply*>(this);
            // Don't ever rely on these values outside of a CallID
            comm::OpaqueMethodID mid= 26;
            ce.assign(inst, mid);
        }

        void
        cancelUSSDResponseCallID( comm::CallEvent::CallID& ce )
        {
            void* inst=static_cast<CallHandlingServicesReply*>(this);
            // Don't ever rely on these values outside of a CallID
            comm::OpaqueMethodID mid= 5;
            ce.assign(inst, mid);
        }

        void
        updateHfpErrorCallID( comm::CallEvent::CallID& ce )
        {
            void* inst=static_cast<CallHandlingServicesReply*>(this);
            // Don't ever rely on these values outside of a CallID
            comm::OpaqueMethodID mid= 25;
            ce.assign(inst, mid);
        }


        virtual ~CallHandlingServicesReply() {}
    };

}//namespace asi
}//namespace connectivity
}//namespace al

#endif// ASI_CONNECTIVITY_AL_CALLHANDLINGSERVICESREPLY_HXX
