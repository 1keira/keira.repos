build clean is ok
-- The C compiler identification is GNU 7.5.0
-- The CXX compiler identification is GNU 7.5.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Configuring done
-- Generating done
-- Build files have been written to: /home/zhao/Documents/Psd_not_use_signalAPI_justGtest/build
[ 12%] Building CXX object CMakeFiles/psd.dir/src/GeometricCalc.cpp.o
[ 25%] Building CXX object CMakeFiles/psd.dir/src/Haversine.cpp.o
[ 37%] Building CXX object CMakeFiles/psd.dir/src/PsdLocation.cpp.o
[ 50%] Building CXX object CMakeFiles/psd.dir/src/PsdMap.cpp.o
[ 62%] Building CXX object CMakeFiles/psd.dir/src/PsdMessageDecoder.cpp.o
[ 75%] Building CXX object CMakeFiles/psd.dir/gtest/src/PsdTest.cpp.o
[ 87%] Building CXX object CMakeFiles/psd.dir/external/include/signalAPI/PSDParser/eso_adapter/signal_data_access_pdu.cpp.o
[100%] Linking CXX executable /home/zhao/Documents/Psd_not_use_signalAPI_justGtest/gtest/output/bin/psd
[100%] Built target psd
[==========] Running 26 tests from 3 test suites.
[----------] Global test environment set-up.
[----------] 10 tests from PsdMapTest
[ RUN      ] PsdMapTest.mapCreateAndcalcCoordinateWithoutHeading
[TestBody] [152]: MapData_X.preSegmentId = 3
[TestBody] [152]: MapData_X.preSegmentId = 4
[TestBody] [152]: MapData_X.preSegmentId = 5
[TestBody] [152]: MapData_X.preSegmentId = 6
[TestBody] [152]: MapData_X.preSegmentId = 7
[TestBody] [152]: MapData_X.preSegmentId = 8
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 121.303785, latitude = 31.260682, hvHeading = 0.000000
[createNode] [1176]: newNode = 0x563580a88f20
[insertNodeInTree] [1328]: curNode = 0x563580a88f20
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a88f20, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 100.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 100.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 0.000000, accumulateBranchAngleRad = 0.000000
[coordinateSystemRotates] [208]: dX = 100.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 1.000000
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 100.000000
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 100.000000
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [221]: coordinate system rotated X = 100.000000
[coordinateSystemRotates] [222]: coordinate system rotated Y = 0.000000
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = 100.000000, disHv2EndAfterRotatingCoord.distanceY = 0.000000
[calcDestination] [78]: destinationCoord latitude = 31.261580  destinationCoord longitude = 121.303785
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 31.261580  longitude = 121.303785
[calcStraightXYOffset] [230]: Length = 100.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -100.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 0.000000, accumulateBranchAngleRad = 0.000000
[coordinateSystemRotates] [208]: dX = -100.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 1.000000
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -100.000000
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -100.000000
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [221]: coordinate system rotated X = -100.000000
[coordinateSystemRotates] [222]: coordinate system rotated Y = 0.000000
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = -100.000000, disHv2StartAfterRotatingCoord.distanceY = 0.000000
[calcDestination] [78]: destinationCoord latitude = 31.259784  destinationCoord longitude = 121.303785
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 31.259784  longitude = 121.303785
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 31.259784, longitude = 121.303785
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 31.261580, longitude = 121.303785
[insertNode] [1240]: (*it)->preSegmentId = 3's segIsInTree = 1
[findNodeById] [893]: result = (nil)
[insertNode] [1288]: tempNode is = (nil), preSegmentId = 3, prevSegmentId = 2, segIsInTree = 1
[insertNode] [1321]: goto check the next segment info from vPsdMap
[insertNode] [1240]: (*it)->preSegmentId = 4's segIsInTree = 0
[insertNode] [1288]: tempNode is = 0x563580a88f20, preSegmentId = 4, prevSegmentId = 3, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a89010
[insertChildNode] [1184]: childNode = 0x563580a89010
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 200.000000, BranchAngle = -90.000000
[calcStraightXYOffset] [232]: BranchAngleRad = -1.570796
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 0.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = -200.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 0.000000, accumulateBranchAngleRad = 0.000000
[coordinateSystemRotates] [208]: dX = 0.000000
[coordinateSystemRotates] [209]: dY = -200.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 1.000000
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -200.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -200.000000
[coordinateSystemRotates] [221]: coordinate system rotated X = 0.000000
[coordinateSystemRotates] [222]: coordinate system rotated Y = -200.000000
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = 100.000000, accumulateXY.distanceY = -200.000000
[calcDestination] [78]: destinationCoord latitude = 31.261580  destinationCoord longitude = 121.301683
[insertNode] [1310]: childNode's preSegmentId = 4
[displayNodeCoordinate] [140]: 4's startCoordinate: latitude = 31.261580, longitude = 121.303785
[displayNodeCoordinate] [141]: 4's endCoordinate: latitude = 31.261580, longitude = 121.301683
[insertNode] [1240]: (*it)->preSegmentId = 5's segIsInTree = 0
[insertNode] [1288]: tempNode is = 0x563580a88f20, preSegmentId = 5, prevSegmentId = 3, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a89100
[insertChildNode] [1184]: childNode = 0x563580a89100
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 200.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 200.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 0.000000, accumulateBranchAngleRad = 0.000000
[coordinateSystemRotates] [208]: dX = 200.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 1.000000
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 200.000000
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 200.000000
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [221]: coordinate system rotated X = 200.000000
[coordinateSystemRotates] [222]: coordinate system rotated Y = 0.000000
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = 300.000000, accumulateXY.distanceY = 0.000000
[calcDestination] [78]: destinationCoord latitude = 31.263377  destinationCoord longitude = 121.303785
[insertNode] [1310]: childNode's preSegmentId = 5
[displayNodeCoordinate] [140]: 5's startCoordinate: latitude = 31.261580, longitude = 121.303785
[displayNodeCoordinate] [141]: 5's endCoordinate: latitude = 31.263377, longitude = 121.303785
[insertNode] [1240]: (*it)->preSegmentId = 6's segIsInTree = 0
[insertNode] [1288]: tempNode is = 0x563580a88f20, preSegmentId = 6, prevSegmentId = 3, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a891f0
[insertChildNode] [1184]: childNode = 0x563580a891f0
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 200.000000, BranchAngle = 90.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 1.570796
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 0.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 200.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 0.000000, accumulateBranchAngleRad = 0.000000
[coordinateSystemRotates] [208]: dX = 0.000000
[coordinateSystemRotates] [209]: dY = 200.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 1.000000
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 200.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 200.000000
[coordinateSystemRotates] [221]: coordinate system rotated X = 0.000000
[coordinateSystemRotates] [222]: coordinate system rotated Y = 200.000000
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = 100.000000, accumulateXY.distanceY = 200.000000
[calcDestination] [78]: destinationCoord latitude = 31.261580  destinationCoord longitude = 121.305887
[insertNode] [1310]: childNode's preSegmentId = 6
[displayNodeCoordinate] [140]: 6's startCoordinate: latitude = 31.261580, longitude = 121.303785
[displayNodeCoordinate] [141]: 6's endCoordinate: latitude = 31.261580, longitude = 121.305887
[insertNode] [1240]: (*it)->preSegmentId = 7's segIsInTree = 0
[findNodeById] [893]: result = (nil)
[findNodeById] [888]: result = 0x563580a89100
[insertNode] [1288]: tempNode is = 0x563580a89100, preSegmentId = 7, prevSegmentId = 5, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a892e0
[insertChildNode] [1184]: childNode = 0x563580a892e0
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 71.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 71.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 0.000000, accumulateBranchAngleRad = 0.000000
[coordinateSystemRotates] [208]: dX = 71.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 1.000000
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 71.000000
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 71.000000
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [221]: coordinate system rotated X = 71.000000
[coordinateSystemRotates] [222]: coordinate system rotated Y = 0.000000
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = 371.000000, accumulateXY.distanceY = 0.000000
[calcDestination] [78]: destinationCoord latitude = 31.264015  destinationCoord longitude = 121.303785
[insertNode] [1310]: childNode's preSegmentId = 7
[displayNodeCoordinate] [140]: 7's startCoordinate: latitude = 31.263377, longitude = 121.303785
[displayNodeCoordinate] [141]: 7's endCoordinate: latitude = 31.264015, longitude = 121.303785
[insertNode] [1240]: (*it)->preSegmentId = 8's segIsInTree = 0
[findNodeById] [893]: result = (nil)
[findNodeById] [888]: result = 0x563580a892e0
[findNodeById] [888]: result = 0x563580a892e0
[insertNode] [1288]: tempNode is = 0x563580a892e0, preSegmentId = 8, prevSegmentId = 7, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a893d0
[insertChildNode] [1184]: childNode = 0x563580a893d0
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcChildSegmentCoordinate] [327]: R = 7.429300
[calcChildSegmentCoordinate] [355]: finalRemainLength = 16.000000
[calcChildSegmentCoordinate] [378]: KL != Kstart, split into two arcs
[calcChildSegmentCoordinate] [384]: Sa = 14.320324, Se = 1.679676
[calcCurveXYOffset] [246]: arcR = 7.429300, arcRotationAngle = 110.440303, arcRotationAngleRad = 1.927547, signCurvature = 1
[calcCurveXYOffset] [255]: cos(arcRotationAngleRad) - 1 = -1.349231
[calcCurveXYOffset] [256]: arcR * (cos(arcRotationAngleRad) - 1) = -10.023844
[calcCurveXYOffset] [257]: dX = 6.961526
[calcCurveXYOffset] [258]: dY = 10.023844
[coordinateSystemRotates] [207]: accumulateBranchAngle = -34.370000, accumulateBranchAngleRad = -0.599870
[coordinateSystemRotates] [208]: dX = 6.961526
[coordinateSystemRotates] [209]: dY = 10.023844
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 0.825409
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = -0.564535
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 5.746107
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -5.658810
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -3.930024
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 8.273773
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 11.404917
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 4.343749
[coordinateSystemRotates] [221]: coordinate system rotated X = 11.404917
[coordinateSystemRotates] [222]: coordinate system rotated Y = 4.343749
[calcChildSegmentCoordinate] [392]: first half of the curvature curve: accumulateXY.distanceX = 382.404917, accumulateXY.distanceY = 4.343749
[calcDestination] [78]: destinationCoord latitude = 31.264117  destinationCoord longitude = 121.303831
[calcChildSegmentCoordinate] [395]: one SampleCoord before the endCoord  latitude = 31.264117  longitude = 121.303831
[calcChildSegmentCoordinate] [398]: childNode->MapData.accumulateBranchAngle = 76.070303
[calcChildSegmentCoordinate] [400]: fixed childNode->MapData.accumulateBranchAngle = 76.070303
[calcCurveXYOffset] [246]: arcR = 63.339600, arcRotationAngle = 1.519402, arcRotationAngleRad = 0.026519, signCurvature = 184
[calcCurveXYOffset] [255]: cos(arcRotationAngleRad) - 1 = -0.000352
[calcCurveXYOffset] [256]: arcR * (cos(arcRotationAngleRad) - 1) = -0.022270
[calcCurveXYOffset] [257]: dX = 1.679479
[calcCurveXYOffset] [258]: dY = 0.022270
[coordinateSystemRotates] [207]: accumulateBranchAngle = 76.070303, accumulateBranchAngleRad = 1.327677
[coordinateSystemRotates] [208]: dX = 1.679479
[coordinateSystemRotates] [209]: dY = 0.022270
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 0.240731
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.970592
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 0.404303
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.021615
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 1.630088
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 0.005361
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 0.382688
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 1.635450
[coordinateSystemRotates] [221]: coordinate system rotated X = 0.382688
[coordinateSystemRotates] [222]: coordinate system rotated Y = 1.635450
[calcChildSegmentCoordinate] [408]: second half of the curvature curve: childNode->MapData.accumulateXY.distanceX = 382.787605, childNode->MapData.accumulateXY.distanceY = 5.979198
[calcDestination] [78]: destinationCoord latitude = 31.264121  destinationCoord longitude = 121.303848
[calcChildSegmentCoordinate] [410]: childSegment's endCoordinate latitude = 31.264121  longitude = 121.303848
[calcChildSegmentCoordinate] [413]: childNode->MapData.accumulateBranchAngle = 77.589705
[calcChildSegmentCoordinate] [415]: fixed accumulateBranchAngleHv2End = 77.589705
[insertNode] [1310]: childNode's preSegmentId = 8
[displayNodeCoordinate] [145]: 8's startCoordinate: latitude = 31.264015, longitude = 121.303785
[displayNodeCoordinate] [148]: 8's SampleCoord: latitude = 31.264117, longitude = 121.303831
[displayNodeCoordinate] [150]: 8's endCoordinate: latitude = 31.264121, longitude = 121.303848
[TestBody] [163]: startCoordLat_1_absValue = 0.000005
[TestBody] [164]: startCoordLon_1_absValue = 0.000000
[TestBody] [171]: endCoordLat_1_absValue = 0.000001
[TestBody] [172]: endCoordLon_1_absValue = 0.000000
[TestBody] [180]: startCoordLat_2_absValue = 0.000001
[TestBody] [181]: startCoordLon_2_absValue = 0.000000
[TestBody] [188]: endCoordLat_2_absValue = 0.000001
[TestBody] [189]: endCoordLon_2_absValue = 0.000005
[TestBody] [197]: startCoordLat_3_absValue = 0.000001
[TestBody] [198]: startCoordLon_3_absValue = 0.000000
[TestBody] [205]: endCoordLat_3_absValue = 0.000016
[TestBody] [206]: endCoordLon_3_absValue = 0.000000
[TestBody] [214]: startCoordLat_4_absValue = 0.000001
[TestBody] [215]: startCoordLon_4_absValue = 0.000000
[TestBody] [222]: endCoordLat_4_absValue = 0.000001
[TestBody] [223]: endCoordLon_4_absValue = 0.000002
[TestBody] [231]: startCoordLat_5_absValue = 0.000016
[TestBody] [232]: startCoordLon_5_absValue = 0.000000
[TestBody] [239]: endCoordLat_5_absValue = 0.000020
[TestBody] [240]: endCoordLon_5_absValue = 0.000001
[TestBody] [248]: startCoordLat_6_absValue = 0.000020
[TestBody] [249]: startCoordLon_6_absValue = 0.000001
[TestBody] [256]: endCoordLat_6_absValue = 0.000028
[TestBody] [257]: endCoordLon_6_absValue = 0.000206
[       OK ] PsdMapTest.mapCreateAndcalcCoordinateWithoutHeading (0 ms)
[ RUN      ] PsdMapTest.mapCreateAndcalcCoordinateWithHeading
[TestBody] [266]: VPsdMap().empty() = 0
[TestBody] [340]: MapData_X.preSegmentId = 3
[TestBody] [340]: MapData_X.preSegmentId = 4
[TestBody] [340]: MapData_X.preSegmentId = 5
[TestBody] [340]: MapData_X.preSegmentId = 6
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 121.302732, latitude = 31.260679, hvHeading = 45.000000
[createNode] [1176]: newNode = 0x563580a89500
[insertNodeInTree] [1328]: curNode = 0x563580a89500
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a89500, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 141.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 141.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 45.000000, accumulateBranchAngleRad = 0.785398
[coordinateSystemRotates] [208]: dX = 141.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 0.707107
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.707107
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 99.702056
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 99.702056
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 99.702056
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 99.702056
[coordinateSystemRotates] [221]: coordinate system rotated X = 99.702056
[coordinateSystemRotates] [222]: coordinate system rotated Y = 99.702056
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = 99.702056, disHv2EndAfterRotatingCoord.distanceY = 99.702056
[calcDestination] [78]: destinationCoord latitude = 31.261575  destinationCoord longitude = 121.303780
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 31.261575  longitude = 121.303780
[calcStraightXYOffset] [230]: Length = 142.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -142.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 45.000000, accumulateBranchAngleRad = 0.785398
[coordinateSystemRotates] [208]: dX = -142.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 0.707107
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.707107
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -100.409163
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -100.409163
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -100.409163
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -100.409163
[coordinateSystemRotates] [221]: coordinate system rotated X = -100.409163
[coordinateSystemRotates] [222]: coordinate system rotated Y = -100.409163
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = -100.409163, disHv2StartAfterRotatingCoord.distanceY = -100.409163
[calcDestination] [78]: destinationCoord latitude = 31.259777  destinationCoord longitude = 121.301677
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 31.259777  longitude = 121.301677
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 31.259777, longitude = 121.301677
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 31.261575, longitude = 121.303780
[insertNode] [1240]: (*it)->preSegmentId = 3's segIsInTree = 1
[findNodeById] [893]: result = (nil)
[insertNode] [1288]: tempNode is = (nil), preSegmentId = 3, prevSegmentId = 2, segIsInTree = 1
[insertNode] [1321]: goto check the next segment info from vPsdMap
[insertNode] [1240]: (*it)->preSegmentId = 4's segIsInTree = 0
[insertNode] [1288]: tempNode is = 0x563580a89500, preSegmentId = 4, prevSegmentId = 3, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a895f0
[insertChildNode] [1184]: childNode = 0x563580a895f0
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 285.000000, BranchAngle = -89.530000
[calcStraightXYOffset] [232]: BranchAngleRad = -1.562593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 2.337842
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = -284.990411
[coordinateSystemRotates] [207]: accumulateBranchAngle = 45.000000, accumulateBranchAngleRad = 0.785398
[coordinateSystemRotates] [208]: dX = 2.337842
[coordinateSystemRotates] [209]: dY = -284.990411
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 0.707107
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.707107
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 1.653104
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -201.518652
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 1.653104
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -201.518652
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 203.171757
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -199.865548
[coordinateSystemRotates] [221]: coordinate system rotated X = 203.171757
[coordinateSystemRotates] [222]: coordinate system rotated Y = -199.865548
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = 302.873813, accumulateXY.distanceY = -100.163492
[calcDestination] [78]: destinationCoord latitude = 31.263400  destinationCoord longitude = 121.301679
[insertNode] [1310]: childNode's preSegmentId = 4
[displayNodeCoordinate] [140]: 4's startCoordinate: latitude = 31.261575, longitude = 121.303780
[displayNodeCoordinate] [141]: 4's endCoordinate: latitude = 31.263400, longitude = 121.301679
[insertNode] [1240]: (*it)->preSegmentId = 5's segIsInTree = 0
[insertNode] [1288]: tempNode is = 0x563580a89500, preSegmentId = 5, prevSegmentId = 3, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a896e0
[insertChildNode] [1184]: childNode = 0x563580a896e0
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 285.000000, BranchAngle = -0.500000
[calcStraightXYOffset] [232]: BranchAngleRad = -0.008727
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 284.989148
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = -2.487063
[coordinateSystemRotates] [207]: accumulateBranchAngle = 45.000000, accumulateBranchAngleRad = 0.785398
[coordinateSystemRotates] [208]: dX = 284.989148
[coordinateSystemRotates] [209]: dY = -2.487063
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 0.707107
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.707107
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 201.517759
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -1.758619
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 201.517759
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -1.758619
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 203.276378
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 199.759140
[coordinateSystemRotates] [221]: coordinate system rotated X = 203.276378
[coordinateSystemRotates] [222]: coordinate system rotated Y = 199.759140
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = 302.978434, accumulateXY.distanceY = 299.461196
[calcDestination] [78]: destinationCoord latitude = 31.263401  destinationCoord longitude = 121.305879
[insertNode] [1310]: childNode's preSegmentId = 5
[displayNodeCoordinate] [140]: 5's startCoordinate: latitude = 31.261575, longitude = 121.303780
[displayNodeCoordinate] [141]: 5's endCoordinate: latitude = 31.263401, longitude = 121.305879
[insertNode] [1240]: (*it)->preSegmentId = 6's segIsInTree = 0
[insertNode] [1288]: tempNode is = 0x563580a89500, preSegmentId = 6, prevSegmentId = 3, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a897f0
[insertChildNode] [1184]: childNode = 0x563580a897f0
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 283.000000, BranchAngle = 90.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 1.570796
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 0.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 283.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 45.000000, accumulateBranchAngleRad = 0.785398
[coordinateSystemRotates] [208]: dX = 0.000000
[coordinateSystemRotates] [209]: dY = 283.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 0.707107
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.707107
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 200.111219
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 200.111219
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -200.111219
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 200.111219
[coordinateSystemRotates] [221]: coordinate system rotated X = -200.111219
[coordinateSystemRotates] [222]: coordinate system rotated Y = 200.111219
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -100.409163, accumulateXY.distanceY = 299.813275
[calcDestination] [78]: destinationCoord latitude = 31.259777  destinationCoord longitude = 121.305883
[insertNode] [1310]: childNode's preSegmentId = 6
[displayNodeCoordinate] [140]: 6's startCoordinate: latitude = 31.261575, longitude = 121.303780
[displayNodeCoordinate] [141]: 6's endCoordinate: latitude = 31.259777, longitude = 121.305883
[TestBody] [358]: startCoordLat_1_absValue = 0.000002
[TestBody] [359]: startCoordLon_1_absValue = 0.000001
[TestBody] [366]: endCoordLat_1_absValue = 0.000004
[TestBody] [367]: endCoordLon_1_absValue = 0.000005
[TestBody] [375]: startCoordLat_2_absValue = 0.000004
[TestBody] [376]: startCoordLon_2_absValue = 0.000005
[TestBody] [383]: endCoordLat_2_absValue = 0.000014
[TestBody] [384]: endCoordLon_2_absValue = 0.000001
[TestBody] [392]: startCoordLat_3_absValue = 0.000004
[TestBody] [393]: startCoordLon_3_absValue = 0.000005
[TestBody] [400]: endCoordLat_3_absValue = 0.000013
[TestBody] [401]: endCoordLon_3_absValue = 0.000006
[TestBody] [409]: startCoordLat_4_absValue = 0.000004
[TestBody] [410]: startCoordLon_4_absValue = 0.000005
[TestBody] [417]: endCoordLat_4_absValue = 0.000002
[TestBody] [418]: endCoordLon_4_absValue = 0.000002
[       OK ] PsdMapTest.mapCreateAndcalcCoordinateWithHeading (0 ms)
[ RUN      ] PsdMapTest.mapCreateAndcalcCoordinateWithMultiLayer
[TestBody] [427]: VPsdMap().empty() = 0
[TestBody] [557]: MapData_X.preSegmentId = 3
[TestBody] [557]: MapData_X.preSegmentId = 2
[TestBody] [557]: MapData_X.preSegmentId = 10
[TestBody] [557]: MapData_X.preSegmentId = 4
[TestBody] [557]: MapData_X.preSegmentId = 5
[TestBody] [557]: MapData_X.preSegmentId = 6
[TestBody] [557]: MapData_X.preSegmentId = 7
[TestBody] [557]: MapData_X.preSegmentId = 8
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a898e0
[insertNodeInTree] [1328]: curNode = 0x563580a898e0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a898e0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[insertNode] [1240]: (*it)->preSegmentId = 3's segIsInTree = 1
[findNodeById] [893]: result = (nil)
[insertNode] [1288]: tempNode is = (nil), preSegmentId = 3, prevSegmentId = 2, segIsInTree = 1
[insertNode] [1321]: goto check the next segment info from vPsdMap
[insertNode] [1240]: (*it)->preSegmentId = 2's segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a899d0
[insertParentNode] [1202]: parentNode = 0x563580a899d0
[calcRootOrParentSegmentCoordinate] [424]: --------------------------Is rootSegment or parentSegment--------------------------
[calcStraightXYOffset] [230]: Length = -176.000000, BranchAngle = -0.370000
[calcStraightXYOffset] [232]: BranchAngleRad = -0.006458
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -175.996330
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 1.136551
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -175.996330
[coordinateSystemRotates] [209]: dY = 1.136551
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 175.984297
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.013290
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -2.058002
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -1.136473
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 175.971007
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -3.194475
[coordinateSystemRotates] [221]: coordinate system rotated X = 175.971007
[coordinateSystemRotates] [222]: coordinate system rotated Y = -3.194475
[calcRootOrParentSegmentCoordinate] [458]: accumulateXY.distanceX = 244.966289, accumulateXY.distanceY = -4.001323
[calcDestination] [78]: destinationCoord latitude = 40.360351  destinationCoord longitude = 116.815062
[displayNodeCoordinate] [140]: 2's startCoordinate: latitude = 40.360351, longitude = 116.815062
[displayNodeCoordinate] [141]: 2's endCoordinate: latitude = 40.358770, longitude = 116.815099
[findNodeById] [893]: result = (nil)
[findNodeById] [893]: result = (nil)
[insertNode] [1288]: tempNode is = (nil), preSegmentId = 2, prevSegmentId = 10, segIsInTree = 1
[insertNode] [1321]: goto check the next segment info from vPsdMap
[insertNode] [1240]: (*it)->preSegmentId = 10's segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a89ac0
[insertRootNode] [1221]: rootNode = 0x563580a89ac0
[calcRootOrParentSegmentCoordinate] [424]: --------------------------Is rootSegment or parentSegment--------------------------
[calcStraightXYOffset] [230]: Length = -200.000000, BranchAngle = -0.010000
[calcStraightXYOffset] [232]: BranchAngleRad = -0.000175
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -199.999997
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.034907
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.700000, accumulateBranchAngleRad = 3.136357
[coordinateSystemRotates] [208]: dX = -199.999997
[coordinateSystemRotates] [209]: dY = 0.034907
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999986
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.005236
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 199.997255
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000183
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -1.047193
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.034906
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 199.997073
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -1.082099
[coordinateSystemRotates] [221]: coordinate system rotated X = 199.997073
[coordinateSystemRotates] [222]: coordinate system rotated Y = -1.082099
[calcRootOrParentSegmentCoordinate] [458]: accumulateXY.distanceX = 444.963362, accumulateXY.distanceY = -5.083421
[calcDestination] [78]: destinationCoord latitude = 40.362147  destinationCoord longitude = 116.815049
[displayNodeCoordinate] [140]: 10's startCoordinate: latitude = 40.362147, longitude = 116.815049
[displayNodeCoordinate] [141]: 10's endCoordinate: latitude = 40.360351, longitude = 116.815062
[insertNode] [1288]: tempNode is = 0x563580a89ac0, preSegmentId = 10, prevSegmentId = 10, segIsInTree = 1
[insertNode] [1315]: some nodes are already in tree
[insertNode] [1240]: (*it)->preSegmentId = 4's segIsInTree = 0
[findNodeById] [888]: result = 0x563580a898e0
[findNodeById] [888]: result = 0x563580a898e0
[insertNode] [1288]: tempNode is = 0x563580a898e0, preSegmentId = 4, prevSegmentId = 3, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a89bb0
[insertChildNode] [1184]: childNode = 0x563580a89bb0
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 78.000000, BranchAngle = 0.010000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000175
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 77.999999
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.013614
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 77.999999
[coordinateSystemRotates] [209]: dY = 0.013614
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -77.994666
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000159
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 0.912088
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.013613
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -77.994825
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 0.898476
[coordinateSystemRotates] [221]: coordinate system rotated X = -77.994825
[coordinateSystemRotates] [222]: coordinate system rotated Y = 0.898476
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -262.982177, accumulateXY.distanceY = 3.061762
[calcDestination] [78]: destinationCoord latitude = 40.355788  destinationCoord longitude = 116.815145
[insertNode] [1310]: childNode's preSegmentId = 4
[displayNodeCoordinate] [140]: 4's startCoordinate: latitude = 40.356488, longitude = 116.815135
[displayNodeCoordinate] [141]: 4's endCoordinate: latitude = 40.355788, longitude = 116.815145
[insertNode] [1240]: (*it)->preSegmentId = 5's segIsInTree = 0
[findNodeById] [888]: result = 0x563580a89bb0
[findNodeById] [888]: result = 0x563580a89bb0
[findNodeById] [888]: result = 0x563580a89bb0
[insertNode] [1288]: tempNode is = 0x563580a89bb0, preSegmentId = 5, prevSegmentId = 4, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a89cc0
[insertChildNode] [1184]: childNode = 0x563580a89cc0
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 254.000000, BranchAngle = 90.060000
[calcStraightXYOffset] [232]: BranchAngleRad = 1.571844
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -0.265988
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 253.999861
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.340000, accumulateBranchAngleRad = 3.130073
[coordinateSystemRotates] [208]: dX = -0.265988
[coordinateSystemRotates] [209]: dY = 253.999861
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999934
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011519
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 0.265970
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 2.925804
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.003064
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -253.983009
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -2.659833
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -253.986073
[coordinateSystemRotates] [221]: coordinate system rotated X = -2.659833
[coordinateSystemRotates] [222]: coordinate system rotated Y = -253.986073
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -265.642010, accumulateXY.distanceY = -250.924311
[calcDestination] [78]: destinationCoord latitude = 40.355764  destinationCoord longitude = 116.812151
[insertNode] [1310]: childNode's preSegmentId = 5
[displayNodeCoordinate] [140]: 5's startCoordinate: latitude = 40.355788, longitude = 116.815145
[displayNodeCoordinate] [141]: 5's endCoordinate: latitude = 40.355764, longitude = 116.812151
[insertNode] [1240]: (*it)->preSegmentId = 6's segIsInTree = 0
[findNodeById] [888]: result = 0x563580a89bb0
[findNodeById] [888]: result = 0x563580a89bb0
[findNodeById] [888]: result = 0x563580a89bb0
[insertNode] [1288]: tempNode is = 0x563580a89bb0, preSegmentId = 6, prevSegmentId = 4, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a89dd0
[insertChildNode] [1184]: childNode = 0x563580a89dd0
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 254.000000, BranchAngle = 0.020000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000349
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 253.999985
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.088663
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.340000, accumulateBranchAngleRad = 3.130073
[coordinateSystemRotates] [208]: dX = 253.999985
[coordinateSystemRotates] [209]: dY = 0.088663
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999934
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011519
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -253.983133
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.001021
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.925805
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.088657
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -253.984154
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.837148
[coordinateSystemRotates] [221]: coordinate system rotated X = -253.984154
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.837148
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -516.966331, accumulateXY.distanceY = 5.898910
[calcDestination] [78]: destinationCoord latitude = 40.353506  destinationCoord longitude = 116.815179
[insertNode] [1310]: childNode's preSegmentId = 6
[displayNodeCoordinate] [140]: 6's startCoordinate: latitude = 40.355788, longitude = 116.815145
[displayNodeCoordinate] [141]: 6's endCoordinate: latitude = 40.353506, longitude = 116.815179
[insertNode] [1240]: (*it)->preSegmentId = 7's segIsInTree = 0
[findNodeById] [888]: result = 0x563580a89bb0
[findNodeById] [888]: result = 0x563580a89bb0
[findNodeById] [888]: result = 0x563580a89bb0
[insertNode] [1288]: tempNode is = 0x563580a89bb0, preSegmentId = 7, prevSegmentId = 4, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a89ee0
[insertChildNode] [1184]: childNode = 0x563580a89ee0
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 254.000000, BranchAngle = -90.050000
[calcStraightXYOffset] [232]: BranchAngleRad = -1.571669
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -0.221657
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = -253.999903
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.340000, accumulateBranchAngleRad = 3.130073
[coordinateSystemRotates] [208]: dX = -0.221657
[coordinateSystemRotates] [209]: dY = -253.999903
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999934
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011519
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 0.221642
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -2.925804
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.002553
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 253.983052
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 3.147446
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 253.980498
[coordinateSystemRotates] [221]: coordinate system rotated X = 3.147446
[coordinateSystemRotates] [222]: coordinate system rotated Y = 253.980498
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -259.834730, accumulateXY.distanceY = 257.042260
[calcDestination] [78]: destinationCoord latitude = 40.355816  destinationCoord longitude = 116.818139
[insertNode] [1310]: childNode's preSegmentId = 7
[displayNodeCoordinate] [140]: 7's startCoordinate: latitude = 40.355788, longitude = 116.815145
[displayNodeCoordinate] [141]: 7's endCoordinate: latitude = 40.355816, longitude = 116.818139
[insertNode] [1240]: (*it)->preSegmentId = 8's segIsInTree = 0
[findNodeById] [893]: result = (nil)
[findNodeById] [888]: result = 0x563580a89dd0
[findNodeById] [888]: result = 0x563580a89dd0
[findNodeById] [888]: result = 0x563580a89dd0
[findNodeById] [888]: result = 0x563580a89dd0
[insertNode] [1288]: tempNode is = 0x563580a89dd0, preSegmentId = 8, prevSegmentId = 6, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a89fd0
[insertChildNode] [1184]: childNode = 0x563580a89fd0
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 103.000000, BranchAngle = 0.010000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000175
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 102.999998
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.017977
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.360000, accumulateBranchAngleRad = 3.130423
[coordinateSystemRotates] [208]: dX = 102.999998
[coordinateSystemRotates] [209]: dY = 0.017977
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999938
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011170
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -102.993573
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000201
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 1.150497
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.017976
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -102.993774
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 1.132521
[coordinateSystemRotates] [221]: coordinate system rotated X = -102.993774
[coordinateSystemRotates] [222]: coordinate system rotated Y = 1.132521
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -619.960104, accumulateXY.distanceY = 7.031431
[calcDestination] [78]: destinationCoord latitude = 40.352581  destinationCoord longitude = 116.815192
[insertNode] [1310]: childNode's preSegmentId = 8
[displayNodeCoordinate] [140]: 8's startCoordinate: latitude = 40.353506, longitude = 116.815179
[displayNodeCoordinate] [141]: 8's endCoordinate: latitude = 40.352581, longitude = 116.815192
[TestBody] [568]: startCoordLat_1_absValue = 0.000002
[TestBody] [569]: startCoordLon_1_absValue = 0.000001
[TestBody] [576]: endCoordLat_1_absValue = 0.000008
[TestBody] [577]: endCoordLon_1_absValue = 0.000001
[TestBody] [585]: startCoordLat_2_absValue = 0.000000
[TestBody] [586]: startCoordLon_2_absValue = 0.000028
[TestBody] [593]: endCoordLat_2_absValue = 0.000002
[TestBody] [594]: endCoordLon_2_absValue = 0.000001
[TestBody] [602]: startCoordLat_3_absValue = 0.000005
[TestBody] [603]: startCoordLon_3_absValue = 0.000029
[TestBody] [610]: endCoordLat_3_absValue = 0.000000
[TestBody] [611]: endCoordLon_3_absValue = 0.000028
[TestBody] [619]: startCoordLat_4_absValue = 0.000008
[TestBody] [620]: startCoordLon_4_absValue = 0.000001
[TestBody] [627]: endCoordLat_4_absValue = 0.000011
[TestBody] [628]: endCoordLon_4_absValue = 0.000001
[TestBody] [636]: startCoordLat_5_absValue = 0.000011
[TestBody] [637]: startCoordLon_5_absValue = 0.000001
[TestBody] [644]: endCoordLat_5_absValue = 0.000008
[TestBody] [645]: endCoordLon_5_absValue = 0.000002
[TestBody] [653]: startCoordLat_6_absValue = 0.000011
[TestBody] [654]: startCoordLon_6_absValue = 0.000001
[TestBody] [661]: endCoordLat_6_absValue = 0.000017
[TestBody] [662]: endCoordLon_6_absValue = 0.000000
[TestBody] [670]: startCoordLat_7_absValue = 0.000011
[TestBody] [671]: startCoordLon_7_absValue = 0.000001
[TestBody] [678]: endCoordLat_7_absValue = 0.000007
[TestBody] [679]: endCoordLon_7_absValue = 0.000004
[TestBody] [687]: startCoordLat_8_absValue = 0.000017
[TestBody] [688]: startCoordLon_8_absValue = 0.000000
[TestBody] [695]: endCoordLat_8_absValue = 0.000020
[TestBody] [696]: endCoordLon_8_absValue = 0.000002
[       OK ] PsdMapTest.mapCreateAndcalcCoordinateWithMultiLayer (0 ms)
[ RUN      ] PsdMapTest.mapCreateAndcalcCoordinateWithCurve
[TestBody] [705]: VPsdMap().empty() = 0
[TestBody] [737]MapData_1.preSegmentId = 3
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.812289, latitude = 40.346799, hvHeading = 66.850000
[createNode] [1176]: newNode = 0x563580a8a0c0
[insertNodeInTree] [1328]: curNode = 0x563580a8a0c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8a0c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcCurSegmentCoordinate] [623]: --------------------------calculate HV's endCoordinate--------------------------
[calcCurSegmentCoordinate] [648]: R = 46.991215
[calcCurSegmentCoordinate] [654]: Ssum = 51.957366
[calcCurSegmentCoordinate] [658]: sampleRotationAngle = 31.675472
[calcCurveXYOffset] [246]: arcR = 46.991215, arcRotationAngle = 31.675472, arcRotationAngleRad = 0.552841, signCurvature = 0
[calcCurveXYOffset] [255]: cos(arcRotationAngleRad) - 1 = -0.148964
[calcCurveXYOffset] [256]: arcR * (cos(arcRotationAngleRad) - 1) = -7.000000
[calcCurveXYOffset] [257]: dX = 24.675433
[calcCurveXYOffset] [258]: dY = -7.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 66.850000, accumulateBranchAngleRad = 1.166753
[coordinateSystemRotates] [208]: dX = 24.675433
[coordinateSystemRotates] [209]: dY = -7.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 0.393140
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.919479
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 9.700892
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -6.436351
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 22.688537
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -2.751978
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 16.137243
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 19.936559
[coordinateSystemRotates] [221]: coordinate system rotated X = 16.137243
[coordinateSystemRotates] [222]: coordinate system rotated Y = 19.936559
[calcCurSegmentCoordinate] [666]: disHv2EndAfterRotatingCoord.distanceX = 16.137243, disHv2EndAfterRotatingCoord.distanceY = 19.936559
[calcDestination] [78]: destinationCoord latitude = 40.346944  destinationCoord longitude = 116.812524
[calcCurSegmentCoordinate] [672]: accumulateBranchAngleHv2End = 35.174528
[calcCurSegmentCoordinate] [675]: fixed accumulateBranchAngleHv2End = 35.174528
[calcCurSegmentCoordinate] [648]: R = 46.817912
[calcCurSegmentCoordinate] [681]: finalRemainLength = 48.042634
[calcCurSegmentCoordinate] [708]: Sa = 23.980429, Se = 24.062205
[calcCurveXYOffset] [246]: arcR = 46.817912, arcRotationAngle = 29.347259, arcRotationAngleRad = 0.512206, signCurvature = 0
[calcCurveXYOffset] [255]: cos(arcRotationAngleRad) - 1 = -0.128335
[calcCurveXYOffset] [256]: arcR * (cos(arcRotationAngleRad) - 1) = -6.008362
[calcCurveXYOffset] [257]: dX = 22.945533
[calcCurveXYOffset] [258]: dY = -6.008362
[coordinateSystemRotates] [207]: accumulateBranchAngle = 35.174528, accumulateBranchAngleRad = 0.613911
[coordinateSystemRotates] [208]: dX = 22.945533
[coordinateSystemRotates] [209]: dY = -6.008362
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 0.817401
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.576069
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 18.755703
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -3.461231
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 13.218210
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -4.911241
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 22.216934
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 8.306969
[coordinateSystemRotates] [221]: coordinate system rotated X = 22.216934
[coordinateSystemRotates] [222]: coordinate system rotated Y = 8.306969
[calcCurSegmentCoordinate] [716]: first half of the curvature curve: disHv2EndAfterRotatingCoord.distanceX = 38.354177, disHv2EndAfterRotatingCoord.distanceY = 28.243528
[calcDestination] [78]: destinationCoord latitude = 40.347144  destinationCoord longitude = 116.812622
[calcCurSegmentCoordinate] [719]: HV's one SampleCoord before the endCoord  latitude = 40.347144  longitude = 116.812622
[calcCurSegmentCoordinate] [722]: accumulateBranchAngleHv2End = 5.827270
[calcCurSegmentCoordinate] [724]: fixed accumulateBranchAngleHv2End = 5.827270
[calcCurveXYOffset] [246]: arcR = 46.658800, arcRotationAngle = 29.547755, arcRotationAngleRad = 0.515706, signCurvature = 184
[calcCurveXYOffset] [255]: cos(arcRotationAngleRad) - 1 = -0.130055
[calcCurveXYOffset] [256]: arcR * (cos(arcRotationAngleRad) - 1) = -6.068212
[calcCurveXYOffset] [257]: dX = 23.009732
[calcCurveXYOffset] [258]: dY = 6.068212
[coordinateSystemRotates] [207]: accumulateBranchAngle = 5.827270, accumulateBranchAngleRad = 0.101705
[coordinateSystemRotates] [208]: dX = 23.009732
[coordinateSystemRotates] [209]: dY = 6.068212
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 0.994832
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.101530
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 22.890829
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.616104
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.336173
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 6.036854
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 22.274725
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 8.373028
[coordinateSystemRotates] [221]: coordinate system rotated X = 22.274725
[coordinateSystemRotates] [222]: coordinate system rotated Y = 8.373028
[calcCurSegmentCoordinate] [732]: second half of the curvature curve: disHv2EndAfterRotatingCoord.distanceX = 60.628902, disHv2EndAfterRotatingCoord.distanceY = 36.616555
[calcDestination] [78]: destinationCoord latitude = 40.347344  destinationCoord longitude = 116.812721
[calcCurSegmentCoordinate] [734]: HV's endCoordinate latitude = 40.347344  longitude = 116.812721
[calcCurSegmentCoordinate] [737]: accumulateBranchAngleHv2End = 35.375025
[calcCurSegmentCoordinate] [739]: fixed accumulateBranchAngleHv2End = 35.375025
[calcCurSegmentCoordinate] [743]: --------------------------calculate HV's startCoordinate--------------------------
[calcCurSegmentCoordinate] [747]: accumulateBranchAngleHv2Start = 66.850000
[calcCurSegmentCoordinate] [759]: R = 46.991215
[calcCurSegmentCoordinate] [765]: Ssum = 51.957366
[calcCurSegmentCoordinate] [768]: sampleRotationAngle = 31.675472
[calcCurveXYOffset] [246]: arcR = -46.991215, arcRotationAngle = 31.675472, arcRotationAngleRad = 0.552841, signCurvature = 0
[calcCurveXYOffset] [252]: fixed arcR = 46.991215
[calcCurveXYOffset] [255]: cos(arcRotationAngleRad) - 1 = -0.148964
[calcCurveXYOffset] [256]: arcR * (cos(arcRotationAngleRad) - 1) = -7.000000
[calcCurveXYOffset] [257]: dX = -24.675433
[calcCurveXYOffset] [258]: dY = -7.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 66.850000, accumulateBranchAngleRad = 1.166753
[coordinateSystemRotates] [208]: dX = -24.675433
[coordinateSystemRotates] [209]: dY = -7.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 0.393140
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.919479
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -9.700892
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -6.436351
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -22.688537
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -2.751978
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -3.264540
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -25.440515
[coordinateSystemRotates] [221]: coordinate system rotated X = -3.264540
[coordinateSystemRotates] [222]: coordinate system rotated Y = -25.440515
[calcCurSegmentCoordinate] [773]: disHv2StartAfterRotatingCoord.distanceX = -3.264540, disHv2StartAfterRotatingCoord.distanceY = -25.440515
[calcDestination] [78]: destinationCoord latitude = 40.346770  destinationCoord longitude = 116.811989
[calcCurSegmentCoordinate] [779]: accumulateBranchAngleHv2Start = 66.850000
[calcCurSegmentCoordinate] [781]: fixed accumulateBranchAngleHv2Start = 66.850000
[calcCurSegmentCoordinate] [759]: R = 47.165805
[calcCurSegmentCoordinate] [787]: finalRemainLength = 48.042634
[calcCurSegmentCoordinate] [811]: Sa = 24.062650, Se = 23.979984
[calcCurveXYOffset] [246]: arcR = 47.165805, arcRotationAngle = 29.230674, arcRotationAngleRad = 0.510172, signCurvature = 0
[calcCurveXYOffset] [255]: cos(arcRotationAngleRad) - 1 = -0.127339
[calcCurveXYOffset] [256]: arcR * (cos(arcRotationAngleRad) - 1) = -6.006057
[calcCurveXYOffset] [257]: dX = 23.032333
[calcCurveXYOffset] [258]: dY = -6.006057
[coordinateSystemRotates] [207]: accumulateBranchAngle = 66.850000, accumulateBranchAngleRad = 1.166753
[coordinateSystemRotates] [208]: dX = 23.032333
[coordinateSystemRotates] [209]: dY = -6.006057
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 0.393140
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.919479
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 9.054923
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -5.522442
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 21.177741
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -2.361219
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 14.577366
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 18.816521
[coordinateSystemRotates] [221]: coordinate system rotated X = 14.577366
[coordinateSystemRotates] [222]: coordinate system rotated Y = 18.816521
[calcCurSegmentCoordinate] [819]: first half of the curvature curve: disHv2StartAfterRotatingCoord.distanceX = 11.312826, disHv2StartAfterRotatingCoord.distanceY = -6.623993
[calcDestination] [78]: destinationCoord latitude = 40.346901  destinationCoord longitude = 116.812211
[calcCurSegmentCoordinate] [822]: HV's one SampleCoord before the startCoord latitude = 40.346901  longitude = 116.812211
[calcCurSegmentCoordinate] [825]: accumulateBranchAngleHv2Start = 96.080674
[calcCurSegmentCoordinate] [827]: fixed accumulateBranchAngleHv2Start = 96.080674
[calcCurveXYOffset] [246]: arcR = 47.328400, arcRotationAngle = 29.030178, arcRotationAngleRad = 0.506672, signCurvature = 153
[calcCurveXYOffset] [255]: cos(arcRotationAngleRad) - 1 = -0.125636
[calcCurveXYOffset] [256]: arcR * (cos(arcRotationAngleRad) - 1) = -5.946140
[calcCurveXYOffset] [257]: dX = 22.967063
[calcCurveXYOffset] [258]: dY = 5.946140
[coordinateSystemRotates] [207]: accumulateBranchAngle = 96.080674, accumulateBranchAngleRad = 1.676924
[coordinateSystemRotates] [208]: dX = 22.967063
[coordinateSystemRotates] [209]: dY = 5.946140
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.105929
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.994374
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -2.432871
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 5.912685
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 22.837844
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.629867
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -8.345556
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 22.207977
[coordinateSystemRotates] [221]: coordinate system rotated X = -8.345556
[coordinateSystemRotates] [222]: coordinate system rotated Y = 22.207977
[calcCurSegmentCoordinate] [834]: second half of the curvature curve: disHv2StartAfterRotatingCoord.distanceX = 2.967270, disHv2StartAfterRotatingCoord.distanceY = 15.583984
[calcDestination] [78]: destinationCoord latitude = 40.346826  destinationCoord longitude = 116.812473
[calcCurSegmentCoordinate] [836]: HV's startCoordinate latitude = 40.346826  longitude = 116.812473
[calcCurSegmentCoordinate] [839]: accumulateBranchAngleHv2Start = 67.050496
[calcCurSegmentCoordinate] [841]: fixed accumulateBranchAngleHv2Start = 67.050496
[displayNodeCoordinate] [145]: 3's startCoordinate: latitude = 40.346826, longitude = 116.812473
[displayNodeCoordinate] [148]: 3's SampleCoord: latitude = 40.346901, longitude = 116.812211
[displayNodeCoordinate] [148]: 3's SampleCoord: latitude = 40.346770, longitude = 116.811989
[displayNodeCoordinate] [148]: 3's SampleCoord: latitude = 40.346944, longitude = 116.812524
[displayNodeCoordinate] [148]: 3's SampleCoord: latitude = 40.347144, longitude = 116.812622
[displayNodeCoordinate] [150]: 3's endCoordinate: latitude = 40.347344, longitude = 116.812721
[TestBody] [748]: startCoordLat_1_absValue = 0.000533
[TestBody] [749]: startCoordLon_1_absValue = 0.001156
[TestBody] [756]: endCoordLat_1_absValue = 0.000305
[TestBody] [757]: endCoordLon_1_absValue = 0.000697
[       OK ] PsdMapTest.mapCreateAndcalcCoordinateWithCurve (1 ms)
[ RUN      ] PsdMapTest.rootWithCurve
[TestBody] [766]: VPsdMap().empty() = 0
[TestBody] [826]: MapData_X.preSegmentId = 4
[TestBody] [826]: MapData_X.preSegmentId = 3
[TestBody] [826]: MapData_X.preSegmentId = 2
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.808842, latitude = 40.344795, hvHeading = 231.490000
[createNode] [1176]: newNode = 0x563580a8a230
[insertNodeInTree] [1328]: curNode = 0x563580a8a230
[IsCurIdInList] [1534]: curSegmentId is in list = 4
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8a230, current tree Id is = 4, curSegmentId is = 4
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 0.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 0.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 231.490000, accumulateBranchAngleRad = 4.040263
[coordinateSystemRotates] [208]: dX = 0.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.622651
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = -0.782499
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [221]: coordinate system rotated X = 0.000000
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.000000
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = 0.000000, disHv2EndAfterRotatingCoord.distanceY = 0.000000
[calcDestination] [78]: destinationCoord latitude = 40.344795  destinationCoord longitude = 116.808842
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.344795  longitude = 116.808842
[calcStraightXYOffset] [230]: Length = 115.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -115.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 231.490000, accumulateBranchAngleRad = 4.040263
[coordinateSystemRotates] [208]: dX = -115.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.622651
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = -0.782499
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 71.604890
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 89.987442
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 71.604890
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 89.987442
[coordinateSystemRotates] [221]: coordinate system rotated X = 71.604890
[coordinateSystemRotates] [222]: coordinate system rotated Y = 89.987442
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 71.604890, disHv2StartAfterRotatingCoord.distanceY = 89.987442
[calcDestination] [78]: destinationCoord latitude = 40.345438  destinationCoord longitude = 116.809903
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.345438  longitude = 116.809903
[displayNodeCoordinate] [140]: 4's startCoordinate: latitude = 40.345438, longitude = 116.809903
[displayNodeCoordinate] [141]: 4's endCoordinate: latitude = 40.344795, longitude = 116.808842
[insertNode] [1240]: (*it)->preSegmentId = 4's segIsInTree = 1
[findNodeById] [893]: result = (nil)
[insertNode] [1288]: tempNode is = (nil), preSegmentId = 4, prevSegmentId = 3, segIsInTree = 1
[insertNode] [1321]: goto check the next segment info from vPsdMap
[insertNode] [1240]: (*it)->preSegmentId = 3's segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8a320
[insertParentNode] [1202]: parentNode = 0x563580a8a320
[calcRootOrParentSegmentCoordinate] [424]: --------------------------Is rootSegment or parentSegment--------------------------
[calcStraightXYOffset] [230]: Length = -153.000000, BranchAngle = 0.010000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000175
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -152.999998
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = -0.026704
[coordinateSystemRotates] [207]: accumulateBranchAngle = 231.490000, accumulateBranchAngleRad = 4.040263
[coordinateSystemRotates] [208]: dX = -152.999998
[coordinateSystemRotates] [209]: dY = -0.026704
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.622651
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = -0.782499
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 95.265635
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.020896
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 119.722421
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 0.016627
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 95.244739
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 119.739048
[coordinateSystemRotates] [221]: coordinate system rotated X = 95.244739
[coordinateSystemRotates] [222]: coordinate system rotated Y = 119.739048
[calcRootOrParentSegmentCoordinate] [458]: accumulateXY.distanceX = 166.849629, accumulateXY.distanceY = 209.726490
[calcDestination] [78]: destinationCoord latitude = 40.346294  destinationCoord longitude = 116.811314
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.346294, longitude = 116.811314
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.345438, longitude = 116.809903
[findNodeById] [893]: result = (nil)
[findNodeById] [893]: result = (nil)
[insertNode] [1288]: tempNode is = (nil), preSegmentId = 3, prevSegmentId = 2, segIsInTree = 1
[insertNode] [1321]: goto check the next segment info from vPsdMap
[insertNode] [1240]: (*it)->preSegmentId = 2's segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8a410
[insertRootNode] [1221]: rootNode = 0x563580a8a410
[calcRootOrParentSegmentCoordinate] [424]: --------------------------Is rootSegment or parentSegment--------------------------
[calcRootOrParentSegmentCoordinate] [493]: R = 202.123000
[calcRootOrParentSegmentCoordinate] [521]: finalRemainLength = 100.000000
[calcRootOrParentSegmentCoordinate] [545]: Sa = 54.084764, Se = 45.915236
[calcCurveXYOffset] [246]: arcR = 202.123000, arcRotationAngle = 15.331401, arcRotationAngleRad = 0.267583, signCurvature = 0
[calcCurveXYOffset] [255]: cos(arcRotationAngleRad) - 1 = -0.035587
[calcCurveXYOffset] [256]: arcR * (cos(arcRotationAngleRad) - 1) = -7.193020
[calcCurveXYOffset] [257]: dX = 53.441651
[calcCurveXYOffset] [258]: dY = -7.193020
[coordinateSystemRotates] [207]: accumulateBranchAngle = 233.320000, accumulateBranchAngleRad = 4.072202
[coordinateSystemRotates] [208]: dX = 53.441651
[coordinateSystemRotates] [209]: dY = -7.193020
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.597345
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = -0.801984
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -31.923116
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 5.768689
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -42.859360
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 4.296716
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -37.691805
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -38.562644
[coordinateSystemRotates] [221]: coordinate system rotated X = -37.691805
[coordinateSystemRotates] [222]: coordinate system rotated Y = -38.562644
[calcRootOrParentSegmentCoordinate] [553]: first half of the curvature curve: rootOrParentNode->MapData.accumulateXY.distanceX = 129.157825, rootOrParentNode->MapData.accumulateXY.distanceY = 171.163846
[calcDestination] [78]: destinationCoord latitude = 40.345955  destinationCoord longitude = 116.810859
[calcRootOrParentSegmentCoordinate] [556]: one SampleCoord before the startCoord latitude = 40.345955  longitude = 116.810859
[calcRootOrParentSegmentCoordinate] [559]: rootOrParentNode->MapData.accumulateBranchAngle = 248.651401
[calcRootOrParentSegmentCoordinate] [561]: fixed rootOrParentNode->MapData.accumulateBranchAngle = 248.651401
[calcCurveXYOffset] [246]: arcR = 238.086000, arcRotationAngle = 11.049575, arcRotationAngleRad = 0.192851, signCurvature = 153
[calcCurveXYOffset] [255]: cos(arcRotationAngleRad) - 1 = -0.018538
[calcCurveXYOffset] [256]: arcR * (cos(arcRotationAngleRad) - 1) = -4.413706
[calcCurveXYOffset] [257]: dX = 45.631154
[calcCurveXYOffset] [258]: dY = 4.413706
[coordinateSystemRotates] [207]: accumulateBranchAngle = 248.651401, accumulateBranchAngleRad = 4.339786
[coordinateSystemRotates] [208]: dX = 45.631154
[coordinateSystemRotates] [209]: dY = 4.413706
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.364041
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = -0.931383
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -16.611628
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -4.110849
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -42.500071
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -1.606771
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -12.500779
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -44.106842
[coordinateSystemRotates] [221]: coordinate system rotated X = -12.500779
[coordinateSystemRotates] [222]: coordinate system rotated Y = -44.106842
[calcRootOrParentSegmentCoordinate] [568]: second half of the curvature curve: rootOrParentNode->MapData.accumulateXY.distanceX = 116.657046, rootOrParentNode->MapData.accumulateXY.distanceY = 127.057004
[calcDestination] [78]: destinationCoord latitude = 40.345843  destinationCoord longitude = 116.810340
[calcRootOrParentSegmentCoordinate] [570]: rootSegment or parentSegment's startCoordinate latitude = 40.345843  longitude = 116.810340
[calcRootOrParentSegmentCoordinate] [573]: rootOrParentNode->MapData.accumulateBranchAngle = 237.601825
[calcRootOrParentSegmentCoordinate] [575]: fixed rootOrParentNode->MapData.accumulateBranchAngle = 237.601825
[displayNodeCoordinate] [145]: 2's startCoordinate: latitude = 40.345843, longitude = 116.810340
[displayNodeCoordinate] [148]: 2's SampleCoord: latitude = 40.345955, longitude = 116.810859
[displayNodeCoordinate] [150]: 2's endCoordinate: latitude = 40.346294, longitude = 116.811314
[insertNode] [1288]: tempNode is = 0x563580a8a410, preSegmentId = 2, prevSegmentId = 2, segIsInTree = 1
[insertNode] [1315]: some nodes are already in tree
[       OK ] PsdMapTest.rootWithCurve (0 ms)
[ RUN      ] PsdMapTest.parentWithCurve
[TestBody] [837]: VPsdMap().empty() = 0
[TestBody] [883]: MapData_X.preSegmentId = 3
[TestBody] [883]: MapData_X.preSegmentId = 2
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.809901, latitude = 40.345438, hvHeading = 231.480000
[createNode] [1176]: newNode = 0x563580a8a560
[insertNodeInTree] [1328]: curNode = 0x563580a8a560
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8a560, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 0.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 0.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 231.480000, accumulateBranchAngleRad = 4.040088
[coordinateSystemRotates] [208]: dX = 0.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.622788
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = -0.782391
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [221]: coordinate system rotated X = 0.000000
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.000000
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = 0.000000, disHv2EndAfterRotatingCoord.distanceY = 0.000000
[calcDestination] [78]: destinationCoord latitude = 40.345438  destinationCoord longitude = 116.809901
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.345438  longitude = 116.809901
[calcStraightXYOffset] [230]: Length = 153.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -153.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 231.480000, accumulateBranchAngleRad = 4.040088
[coordinateSystemRotates] [208]: dX = -153.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.622788
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = -0.782391
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 95.286530
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 119.705794
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 95.286530
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 119.705794
[coordinateSystemRotates] [221]: coordinate system rotated X = 95.286530
[coordinateSystemRotates] [222]: coordinate system rotated Y = 119.705794
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 95.286530, disHv2StartAfterRotatingCoord.distanceY = 119.705794
[calcDestination] [78]: destinationCoord latitude = 40.346294  destinationCoord longitude = 116.811312
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.346294  longitude = 116.811312
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.346294, longitude = 116.811312
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.345438, longitude = 116.809901
[insertNode] [1240]: (*it)->preSegmentId = 3's segIsInTree = 1
[findNodeById] [893]: result = (nil)
[insertNode] [1288]: tempNode is = (nil), preSegmentId = 3, prevSegmentId = 2, segIsInTree = 1
[insertNode] [1321]: goto check the next segment info from vPsdMap
[insertNode] [1240]: (*it)->preSegmentId = 2's segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8a650
[insertParentNode] [1202]: parentNode = 0x563580a8a650
[calcRootOrParentSegmentCoordinate] [424]: --------------------------Is rootSegment or parentSegment--------------------------
[calcRootOrParentSegmentCoordinate] [493]: R = 47.328400
[calcRootOrParentSegmentCoordinate] [499]: Ssum = 52.138564
[calcRootOrParentSegmentCoordinate] [502]: sampleRotationAngle = 31.559483
[calcCurveXYOffset] [246]: arcR = -47.328400, arcRotationAngle = 31.559483, arcRotationAngleRad = 0.550817, signCurvature = 0
[calcCurveXYOffset] [252]: fixed arcR = 47.328400
[calcCurveXYOffset] [255]: cos(arcRotationAngleRad) - 1 = -0.147903
[calcCurveXYOffset] [256]: arcR * (cos(arcRotationAngleRad) - 1) = -7.000000
[calcCurveXYOffset] [257]: dX = -24.770902
[calcCurveXYOffset] [258]: dY = -7.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 233.320000, accumulateBranchAngleRad = 4.072202
[coordinateSystemRotates] [208]: dX = -24.770902
[coordinateSystemRotates] [209]: dY = -7.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.597345
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = -0.801984
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 14.796781
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 5.613889
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 19.865872
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 4.181417
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 9.182891
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 24.047289
[coordinateSystemRotates] [221]: coordinate system rotated X = 9.182891
[coordinateSystemRotates] [222]: coordinate system rotated Y = 24.047289
[calcRootOrParentSegmentCoordinate] [507]: accumulateXY.distanceX = 104.469421, accumulateXY.distanceY = 143.753083
[calcDestination] [78]: destinationCoord latitude = 40.346376  destinationCoord longitude = 116.811595
[calcRootOrParentSegmentCoordinate] [513]: accumulateBranchAngle = 264.879483
[calcRootOrParentSegmentCoordinate] [515]: fixed rootOrParentNode->MapData.accumulateBranchAngle = 264.879483
[calcRootOrParentSegmentCoordinate] [493]: R = 47.151995
[calcRootOrParentSegmentCoordinate] [499]: Ssum = 104.182409
[calcRootOrParentSegmentCoordinate] [502]: sampleRotationAngle = 31.620005
[calcCurveXYOffset] [246]: arcR = -47.151995, arcRotationAngle = 31.620005, arcRotationAngleRad = 0.551873, signCurvature = 0
[calcCurveXYOffset] [252]: fixed arcR = 47.151995
[calcCurveXYOffset] [255]: cos(arcRotationAngleRad) - 1 = -0.148456
[calcCurveXYOffset] [256]: arcR * (cos(arcRotationAngleRad) - 1) = -7.000000
[calcCurveXYOffset] [257]: dX = -24.721002
[calcCurveXYOffset] [258]: dY = -7.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 264.879483, accumulateBranchAngleRad = 4.623019
[coordinateSystemRotates] [208]: dX = -24.721002
[coordinateSystemRotates] [209]: dY = -7.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.089251
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = -0.996009
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 2.206373
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 6.972064
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 24.622344
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 0.624757
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -4.765691
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 25.247101
[coordinateSystemRotates] [221]: coordinate system rotated X = -4.765691
[coordinateSystemRotates] [222]: coordinate system rotated Y = 25.247101
[calcRootOrParentSegmentCoordinate] [507]: accumulateXY.distanceX = 99.703731, accumulateXY.distanceY = 169.000184
[calcDestination] [78]: destinationCoord latitude = 40.346334  destinationCoord longitude = 116.811893
[calcRootOrParentSegmentCoordinate] [513]: accumulateBranchAngle = 296.499488
[calcRootOrParentSegmentCoordinate] [515]: fixed rootOrParentNode->MapData.accumulateBranchAngle = 296.499488
[calcRootOrParentSegmentCoordinate] [493]: R = 46.977217
[calcRootOrParentSegmentCoordinate] [499]: Ssum = 156.132239
[calcRootOrParentSegmentCoordinate] [502]: sampleRotationAngle = 31.680315
[calcCurveXYOffset] [246]: arcR = -46.977217, arcRotationAngle = 31.680315, arcRotationAngleRad = 0.552926, signCurvature = 0
[calcCurveXYOffset] [252]: fixed arcR = 46.977217
[calcCurveXYOffset] [255]: cos(arcRotationAngleRad) - 1 = -0.149008
[calcCurveXYOffset] [256]: arcR * (cos(arcRotationAngleRad) - 1) = -7.000000
[calcCurveXYOffset] [257]: dX = -24.671462
[calcCurveXYOffset] [258]: dY = -7.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 296.499488, accumulateBranchAngleRad = 5.174892
[coordinateSystemRotates] [208]: dX = -24.671462
[coordinateSystemRotates] [209]: dY = -7.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 0.446190
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = -0.894938
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -11.008155
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 6.264568
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 22.079437
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -3.123329
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -17.272724
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 18.956109
[coordinateSystemRotates] [221]: coordinate system rotated X = -17.272724
[coordinateSystemRotates] [222]: coordinate system rotated Y = 18.956109
[calcRootOrParentSegmentCoordinate] [507]: accumulateXY.distanceX = 82.431007, accumulateXY.distanceY = 187.956293
[calcDestination] [78]: destinationCoord latitude = 40.346178  destinationCoord longitude = 116.812116
[calcRootOrParentSegmentCoordinate] [513]: accumulateBranchAngle = 328.179803
[calcRootOrParentSegmentCoordinate] [515]: fixed rootOrParentNode->MapData.accumulateBranchAngle = 328.179803
[calcRootOrParentSegmentCoordinate] [493]: R = 46.804042
[calcRootOrParentSegmentCoordinate] [521]: finalRemainLength = 43.867761
[calcRootOrParentSegmentCoordinate] [545]: Sa = 21.899795, Se = 21.967966
[calcCurveXYOffset] [246]: arcR = 46.804042, arcRotationAngle = 26.808920, arcRotationAngleRad = 0.467904, signCurvature = 0
[calcCurveXYOffset] [255]: cos(arcRotationAngleRad) - 1 = -0.107484
[calcCurveXYOffset] [256]: arcR * (cos(arcRotationAngleRad) - 1) = -5.030704
[calcCurveXYOffset] [257]: dX = 21.109395
[calcCurveXYOffset] [258]: dY = -5.030704
[coordinateSystemRotates] [207]: accumulateBranchAngle = 328.179803, accumulateBranchAngleRad = 5.727818
[coordinateSystemRotates] [208]: dX = 21.109395
[coordinateSystemRotates] [209]: dY = -5.030704
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 0.849707
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = -0.527255
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 17.936798
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 2.652465
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -11.130042
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -4.274624
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 15.284333
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -15.404665
[coordinateSystemRotates] [221]: coordinate system rotated X = 15.284333
[coordinateSystemRotates] [222]: coordinate system rotated Y = -15.404665
[calcRootOrParentSegmentCoordinate] [553]: first half of the curvature curve: rootOrParentNode->MapData.accumulateXY.distanceX = 97.715340, rootOrParentNode->MapData.accumulateXY.distanceY = 172.551628
[calcDestination] [78]: destinationCoord latitude = 40.346316  destinationCoord longitude = 116.811935
[calcRootOrParentSegmentCoordinate] [556]: one SampleCoord before the startCoord latitude = 40.346316  longitude = 116.811935
[calcRootOrParentSegmentCoordinate] [559]: rootOrParentNode->MapData.accumulateBranchAngle = 354.988723
[calcRootOrParentSegmentCoordinate] [561]: fixed rootOrParentNode->MapData.accumulateBranchAngle = 354.988723
[calcCurveXYOffset] [246]: arcR = 46.658800, arcRotationAngle = 26.976084, arcRotationAngleRad = 0.470821, signCurvature = 153
[calcCurveXYOffset] [255]: cos(arcRotationAngleRad) - 1 = -0.108804
[calcCurveXYOffset] [256]: arcR * (cos(arcRotationAngleRad) - 1) = -5.076667
[calcCurveXYOffset] [257]: dX = 21.165297
[calcCurveXYOffset] [258]: dY = 5.076667
[coordinateSystemRotates] [207]: accumulateBranchAngle = 354.988723, accumulateBranchAngleRad = 6.195722
[coordinateSystemRotates] [208]: dX = 21.165297
[coordinateSystemRotates] [209]: dY = 5.076667
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 0.996178
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = -0.087352
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 21.084393
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -0.443456
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -1.848827
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 5.057261
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 21.527849
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 3.208434
[coordinateSystemRotates] [221]: coordinate system rotated X = 21.527849
[coordinateSystemRotates] [222]: coordinate system rotated Y = 3.208434
[calcRootOrParentSegmentCoordinate] [568]: second half of the curvature curve: rootOrParentNode->MapData.accumulateXY.distanceX = 119.243189, rootOrParentNode->MapData.accumulateXY.distanceY = 175.760062
[calcDestination] [78]: destinationCoord latitude = 40.346509  destinationCoord longitude = 116.811973
[calcRootOrParentSegmentCoordinate] [570]: rootSegment or parentSegment's startCoordinate latitude = 40.346509  longitude = 116.811973
[calcRootOrParentSegmentCoordinate] [573]: rootOrParentNode->MapData.accumulateBranchAngle = 328.012639
[calcRootOrParentSegmentCoordinate] [575]: fixed rootOrParentNode->MapData.accumulateBranchAngle = 328.012639
[displayNodeCoordinate] [145]: 2's startCoordinate: latitude = 40.346509, longitude = 116.811973
[displayNodeCoordinate] [148]: 2's SampleCoord: latitude = 40.346316, longitude = 116.811935
[displayNodeCoordinate] [148]: 2's SampleCoord: latitude = 40.346178, longitude = 116.812116
[displayNodeCoordinate] [148]: 2's SampleCoord: latitude = 40.346334, longitude = 116.811893
[displayNodeCoordinate] [148]: 2's SampleCoord: latitude = 40.346376, longitude = 116.811595
[displayNodeCoordinate] [150]: 2's endCoordinate: latitude = 40.346294, longitude = 116.811312
[findNodeById] [893]: result = (nil)
[findNodeById] [893]: result = (nil)
[insertNode] [1288]: tempNode is = (nil), preSegmentId = 2, prevSegmentId = 4, segIsInTree = 1
[insertNode] [1321]: goto check the next segment info from vPsdMap
[       OK ] PsdMapTest.parentWithCurve (0 ms)
[ RUN      ] PsdMapTest.childWithCurve
[TestBody] [894]: VPsdMap().empty() = 0
[TestBody] [940]: MapData_X.preSegmentId = 3
[TestBody] [940]: MapData_X.preSegmentId = 2
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.809901, latitude = 40.345438, hvHeading = 52.150000
[createNode] [1176]: newNode = 0x563580a8a7b0
[insertNodeInTree] [1328]: curNode = 0x563580a8a7b0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8a7b0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 153.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 153.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 52.150000, accumulateBranchAngleRad = 0.910189
[coordinateSystemRotates] [208]: dX = 153.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 0.613596
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.789620
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 93.880243
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 120.811837
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 93.880243
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 120.811837
[coordinateSystemRotates] [221]: coordinate system rotated X = 93.880243
[coordinateSystemRotates] [222]: coordinate system rotated Y = 120.811837
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = 93.880243, disHv2EndAfterRotatingCoord.distanceY = 120.811837
[calcDestination] [78]: destinationCoord latitude = 40.346281  destinationCoord longitude = 116.811325
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.346281  longitude = 116.811325
[calcStraightXYOffset] [230]: Length = 0.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -0.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 52.150000, accumulateBranchAngleRad = 0.910189
[coordinateSystemRotates] [208]: dX = -0.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 0.613596
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.789620
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [221]: coordinate system rotated X = -0.000000
[coordinateSystemRotates] [222]: coordinate system rotated Y = 0.000000
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 0.000000, disHv2StartAfterRotatingCoord.distanceY = 0.000000
[calcDestination] [78]: destinationCoord latitude = 40.345438  destinationCoord longitude = 116.809901
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.345438  longitude = 116.809901
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.345438, longitude = 116.809901
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.346281, longitude = 116.811325
[insertNode] [1240]: (*it)->preSegmentId = 3's segIsInTree = 1
[findNodeById] [893]: result = (nil)
[insertNode] [1288]: tempNode is = (nil), preSegmentId = 3, prevSegmentId = 4, segIsInTree = 1
[insertNode] [1321]: goto check the next segment info from vPsdMap
[insertNode] [1240]: (*it)->preSegmentId = 2's segIsInTree = 0
[insertNode] [1288]: tempNode is = 0x563580a8a7b0, preSegmentId = 2, prevSegmentId = 3, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8a8a0
[insertChildNode] [1184]: childNode = 0x563580a8a8a0
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcChildSegmentCoordinate] [327]: R = 47.328400
[calcChildSegmentCoordinate] [333]: Ssum = 52.138564
[calcChildSegmentCoordinate] [336]: sampleRotationAngle = 31.559483
[calcCurveXYOffset] [246]: arcR = 47.328400, arcRotationAngle = 31.559483, arcRotationAngleRad = 0.550817, signCurvature = 0
[calcCurveXYOffset] [255]: cos(arcRotationAngleRad) - 1 = -0.147903
[calcCurveXYOffset] [256]: arcR * (cos(arcRotationAngleRad) - 1) = -7.000000
[calcCurveXYOffset] [257]: dX = 24.770902
[calcCurveXYOffset] [258]: dY = -7.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 53.990000, accumulateBranchAngleRad = 0.942303
[coordinateSystemRotates] [208]: dX = 24.770902
[coordinateSystemRotates] [209]: dY = -7.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 0.587926
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.808914
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 14.563468
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -5.662401
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 20.037539
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -4.115485
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 20.225869
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 15.922054
[coordinateSystemRotates] [221]: coordinate system rotated X = 20.225869
[coordinateSystemRotates] [222]: coordinate system rotated Y = 15.922054
[calcChildSegmentCoordinate] [341]: accumulateXY.distanceX = 114.106112, accumulateXY.distanceY = 136.733891
[calcDestination] [78]: destinationCoord latitude = 40.346463  destinationCoord longitude = 116.811513
[calcChildSegmentCoordinate] [347]: childNode->MapData.accumulateBranchAngle = 22.430517
[calcChildSegmentCoordinate] [349]: fixed childNode->MapData.accumulateBranchAngle = 22.430517
[calcChildSegmentCoordinate] [327]: R = 47.151995
[calcChildSegmentCoordinate] [333]: Ssum = 104.182409
[calcChildSegmentCoordinate] [336]: sampleRotationAngle = 31.620005
[calcCurveXYOffset] [246]: arcR = 47.151995, arcRotationAngle = 31.620005, arcRotationAngleRad = 0.551873, signCurvature = 0
[calcCurveXYOffset] [255]: cos(arcRotationAngleRad) - 1 = -0.148456
[calcCurveXYOffset] [256]: arcR * (cos(arcRotationAngleRad) - 1) = -7.000000
[calcCurveXYOffset] [257]: dX = 24.721002
[calcCurveXYOffset] [258]: dY = -7.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 22.430517, accumulateBranchAngleRad = 0.391486
[coordinateSystemRotates] [208]: dX = 24.721002
[coordinateSystemRotates] [209]: dY = -7.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 0.924343
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.381563
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 22.850683
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -2.670939
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 9.432614
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -6.470401
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 25.521623
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.962213
[coordinateSystemRotates] [221]: coordinate system rotated X = 25.521623
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.962213
[calcChildSegmentCoordinate] [341]: accumulateXY.distanceX = 139.627735, accumulateXY.distanceY = 139.696104
[calcDestination] [78]: destinationCoord latitude = 40.346692  destinationCoord longitude = 116.811548
[calcChildSegmentCoordinate] [347]: childNode->MapData.accumulateBranchAngle = -9.189488
[calcChildSegmentCoordinate] [349]: fixed childNode->MapData.accumulateBranchAngle = -9.189488
[calcChildSegmentCoordinate] [327]: R = 46.977217
[calcChildSegmentCoordinate] [333]: Ssum = 156.132239
[calcChildSegmentCoordinate] [336]: sampleRotationAngle = 31.680315
[calcCurveXYOffset] [246]: arcR = 46.977217, arcRotationAngle = 31.680315, arcRotationAngleRad = 0.552926, signCurvature = 0
[calcCurveXYOffset] [255]: cos(arcRotationAngleRad) - 1 = -0.149008
[calcCurveXYOffset] [256]: arcR * (cos(arcRotationAngleRad) - 1) = -7.000000
[calcCurveXYOffset] [257]: dX = 24.671462
[calcCurveXYOffset] [258]: dY = -7.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = -9.189488, accumulateBranchAngleRad = -0.160387
[coordinateSystemRotates] [208]: dX = 24.671462
[coordinateSystemRotates] [209]: dY = -7.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 0.987166
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = -0.159700
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 24.354818
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 1.117901
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -3.940035
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -6.910159
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 23.236918
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -10.850194
[coordinateSystemRotates] [221]: coordinate system rotated X = 23.236918
[coordinateSystemRotates] [222]: coordinate system rotated Y = -10.850194
[calcChildSegmentCoordinate] [341]: accumulateXY.distanceX = 162.864653, accumulateXY.distanceY = 128.845911
[calcDestination] [78]: destinationCoord latitude = 40.346901  destinationCoord longitude = 116.811420
[calcChildSegmentCoordinate] [347]: childNode->MapData.accumulateBranchAngle = -40.869803
[calcChildSegmentCoordinate] [349]: fixed childNode->MapData.accumulateBranchAngle = -40.869803
[calcChildSegmentCoordinate] [327]: R = 46.804042
[calcChildSegmentCoordinate] [355]: finalRemainLength = 43.867761
[calcChildSegmentCoordinate] [378]: KL != Kstart, split into two arcs
[calcChildSegmentCoordinate] [384]: Sa = 21.899795, Se = 21.967966
[calcCurveXYOffset] [246]: arcR = 46.804042, arcRotationAngle = 26.808920, arcRotationAngleRad = 0.467904, signCurvature = 0
[calcCurveXYOffset] [255]: cos(arcRotationAngleRad) - 1 = -0.107484
[calcCurveXYOffset] [256]: arcR * (cos(arcRotationAngleRad) - 1) = -5.030704
[calcCurveXYOffset] [257]: dX = 21.109395
[calcCurveXYOffset] [258]: dY = -5.030704
[coordinateSystemRotates] [207]: accumulateBranchAngle = -40.869803, accumulateBranchAngleRad = -0.713313
[coordinateSystemRotates] [208]: dX = 21.109395
[coordinateSystemRotates] [209]: dY = -5.030704
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 0.756198
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = -0.654342
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 15.962892
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 3.291803
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -13.812771
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -3.804210
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 12.671089
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -17.616982
[coordinateSystemRotates] [221]: coordinate system rotated X = 12.671089
[coordinateSystemRotates] [222]: coordinate system rotated Y = -17.616982
[calcChildSegmentCoordinate] [392]: first half of the curvature curve: accumulateXY.distanceX = 175.535742, accumulateXY.distanceY = 111.228929
[calcDestination] [78]: destinationCoord latitude = 40.347015  destinationCoord longitude = 116.811212
[calcChildSegmentCoordinate] [395]: one SampleCoord before the endCoord  latitude = 40.347015  longitude = 116.811212
[calcChildSegmentCoordinate] [398]: childNode->MapData.accumulateBranchAngle = -67.678723
[calcChildSegmentCoordinate] [400]: fixed childNode->MapData.accumulateBranchAngle = -67.678723
[calcCurveXYOffset] [246]: arcR = 46.658800, arcRotationAngle = 26.976084, arcRotationAngleRad = 0.470821, signCurvature = 184
[calcCurveXYOffset] [255]: cos(arcRotationAngleRad) - 1 = -0.108804
[calcCurveXYOffset] [256]: arcR * (cos(arcRotationAngleRad) - 1) = -5.076667
[calcCurveXYOffset] [257]: dX = 21.165297
[calcCurveXYOffset] [258]: dY = 5.076667
[coordinateSystemRotates] [207]: accumulateBranchAngle = -67.678723, accumulateBranchAngleRad = -1.181217
[coordinateSystemRotates] [208]: dX = 21.165297
[coordinateSystemRotates] [209]: dY = 5.076667
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 0.379800
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = -0.925069
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 8.038574
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -4.696266
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -19.579355
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 1.928117
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 12.734839
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -17.651238
[coordinateSystemRotates] [221]: coordinate system rotated X = 12.734839
[coordinateSystemRotates] [222]: coordinate system rotated Y = -17.651238
[calcChildSegmentCoordinate] [408]: second half of the curvature curve: childNode->MapData.accumulateXY.distanceX = 188.270581, childNode->MapData.accumulateXY.distanceY = 93.577691
[calcDestination] [78]: destinationCoord latitude = 40.347129  destinationCoord longitude = 116.811004
[calcChildSegmentCoordinate] [410]: childSegment's endCoordinate latitude = 40.347129  longitude = 116.811004
[calcChildSegmentCoordinate] [413]: childNode->MapData.accumulateBranchAngle = -40.702639
[calcChildSegmentCoordinate] [415]: fixed accumulateBranchAngleHv2End = -40.702639
[insertNode] [1310]: childNode's preSegmentId = 2
[displayNodeCoordinate] [145]: 2's startCoordinate: latitude = 40.346281, longitude = 116.811325
[displayNodeCoordinate] [148]: 2's SampleCoord: latitude = 40.346463, longitude = 116.811513
[displayNodeCoordinate] [148]: 2's SampleCoord: latitude = 40.346692, longitude = 116.811548
[displayNodeCoordinate] [148]: 2's SampleCoord: latitude = 40.346901, longitude = 116.811420
[displayNodeCoordinate] [148]: 2's SampleCoord: latitude = 40.347015, longitude = 116.811212
[displayNodeCoordinate] [150]: 2's endCoordinate: latitude = 40.347129, longitude = 116.811004
[       OK ] PsdMapTest.childWithCurve (0 ms)
[ RUN      ] PsdMapTest.deleteSubTreeWithDepthGreaterThan1
[TestBody] [951]: VPsdMap().empty() = 0
[pushInList] [193]: preSegmentId = 4
[pushInList] [193]: preSegmentId = 3
[pushInList] [193]: preSegmentId = 2
[pushInList] [193]: preSegmentId = 5
[pushInList] [193]: preSegmentId = 6
[pushInList] [193]: preSegmentId = 7
[pushInList] [193]: preSegmentId = 8
[TestBody] [1074]: MapData_X.preSegmentId = 4
[TestBody] [1074]: MapData_X.preSegmentId = 3
[TestBody] [1074]: MapData_X.preSegmentId = 2
[TestBody] [1074]: MapData_X.preSegmentId = 5
[TestBody] [1074]: MapData_X.preSegmentId = 6
[TestBody] [1074]: MapData_X.preSegmentId = 7
[TestBody] [1074]: MapData_X.preSegmentId = 8
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815134, latitude = 40.356480, hvHeading = 179.340000
[createNode] [1176]: newNode = 0x563580a8afb0
[insertNodeInTree] [1328]: curNode = 0x563580a8afb0
[IsCurIdInList] [1534]: curSegmentId is in list = 4
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8afb0, current tree Id is = 4, curSegmentId is = 4
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 78.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 78.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.340000, accumulateBranchAngleRad = 3.130073
[coordinateSystemRotates] [208]: dX = 78.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999934
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011519
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -77.994825
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 0.898476
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -77.994825
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 0.898476
[coordinateSystemRotates] [221]: coordinate system rotated X = -77.994825
[coordinateSystemRotates] [222]: coordinate system rotated Y = 0.898476
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -77.994825, disHv2EndAfterRotatingCoord.distanceY = 0.898476
[calcDestination] [78]: destinationCoord latitude = 40.355779  destinationCoord longitude = 116.815145
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.355779  longitude = 116.815145
[calcStraightXYOffset] [230]: Length = 0.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -0.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.340000, accumulateBranchAngleRad = 3.130073
[coordinateSystemRotates] [208]: dX = -0.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999934
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011519
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [221]: coordinate system rotated X = 0.000000
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.000000
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 0.000000, disHv2StartAfterRotatingCoord.distanceY = 0.000000
[calcDestination] [78]: destinationCoord latitude = 40.356480  destinationCoord longitude = 116.815134
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.356480  longitude = 116.815134
[displayNodeCoordinate] [140]: 4's startCoordinate: latitude = 40.356480, longitude = 116.815134
[displayNodeCoordinate] [141]: 4's endCoordinate: latitude = 40.355779, longitude = 116.815145
[insertNode] [1240]: (*it)->preSegmentId = 4's segIsInTree = 1
[findNodeById] [893]: result = (nil)
[insertNode] [1288]: tempNode is = (nil), preSegmentId = 4, prevSegmentId = 3, segIsInTree = 1
[insertNode] [1321]: goto check the next segment info from vPsdMap
[insertNode] [1240]: (*it)->preSegmentId = 3's segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8b0a0
[insertParentNode] [1202]: parentNode = 0x563580a8b0a0
[calcRootOrParentSegmentCoordinate] [424]: --------------------------Is rootSegment or parentSegment--------------------------
[calcStraightXYOffset] [230]: Length = -254.000000, BranchAngle = 0.010000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000175
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -253.999996
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = -0.044331
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.340000, accumulateBranchAngleRad = 3.130073
[coordinateSystemRotates] [208]: dX = -253.999996
[coordinateSystemRotates] [209]: dY = -0.044331
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999934
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011519
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 253.983145
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -0.000511
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -2.925805
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 0.044328
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 253.983655
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -2.881477
[coordinateSystemRotates] [221]: coordinate system rotated X = 253.983655
[coordinateSystemRotates] [222]: coordinate system rotated Y = -2.881477
[calcRootOrParentSegmentCoordinate] [458]: accumulateXY.distanceX = 253.983655, accumulateXY.distanceY = -2.881477
[calcDestination] [78]: destinationCoord latitude = 40.358762  destinationCoord longitude = 116.815100
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358762, longitude = 116.815100
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356480, longitude = 116.815134
[findNodeById] [893]: result = (nil)
[findNodeById] [893]: result = (nil)
[insertNode] [1288]: tempNode is = (nil), preSegmentId = 3, prevSegmentId = 2, segIsInTree = 1
[insertNode] [1321]: goto check the next segment info from vPsdMap
[insertNode] [1240]: (*it)->preSegmentId = 2's segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8b190
[insertRootNode] [1221]: rootNode = 0x563580a8b190
[calcRootOrParentSegmentCoordinate] [424]: --------------------------Is rootSegment or parentSegment--------------------------
[calcStraightXYOffset] [230]: Length = -176.000000, BranchAngle = -0.370000
[calcStraightXYOffset] [232]: BranchAngleRad = -0.006458
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -175.996330
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 1.136551
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -175.996330
[coordinateSystemRotates] [209]: dY = 1.136551
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 175.984297
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.013290
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -2.058002
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -1.136473
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 175.971007
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -3.194475
[coordinateSystemRotates] [221]: coordinate system rotated X = 175.971007
[coordinateSystemRotates] [222]: coordinate system rotated Y = -3.194475
[calcRootOrParentSegmentCoordinate] [458]: accumulateXY.distanceX = 429.954662, accumulateXY.distanceY = -6.075952
[calcDestination] [78]: destinationCoord latitude = 40.360342  destinationCoord longitude = 116.815062
[displayNodeCoordinate] [140]: 2's startCoordinate: latitude = 40.360342, longitude = 116.815062
[displayNodeCoordinate] [141]: 2's endCoordinate: latitude = 40.358762, longitude = 116.815100
[insertNode] [1288]: tempNode is = 0x563580a8b190, preSegmentId = 2, prevSegmentId = 2, segIsInTree = 1
[insertNode] [1315]: some nodes are already in tree
[insertNode] [1240]: (*it)->preSegmentId = 5's segIsInTree = 0
[findNodeById] [888]: result = 0x563580a8afb0
[findNodeById] [888]: result = 0x563580a8afb0
[insertNode] [1288]: tempNode is = 0x563580a8afb0, preSegmentId = 5, prevSegmentId = 4, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8b2a0
[insertChildNode] [1184]: childNode = 0x563580a8b2a0
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 254.000000, BranchAngle = 90.060000
[calcStraightXYOffset] [232]: BranchAngleRad = 1.571844
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -0.265988
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 253.999861
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.340000, accumulateBranchAngleRad = 3.130073
[coordinateSystemRotates] [208]: dX = -0.265988
[coordinateSystemRotates] [209]: dY = 253.999861
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999934
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011519
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 0.265970
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 2.925804
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.003064
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -253.983009
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -2.659833
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -253.986073
[coordinateSystemRotates] [221]: coordinate system rotated X = -2.659833
[coordinateSystemRotates] [222]: coordinate system rotated Y = -253.986073
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -80.654658, accumulateXY.distanceY = -253.087597
[calcDestination] [78]: destinationCoord latitude = 40.355755  destinationCoord longitude = 116.812150
[insertNode] [1310]: childNode's preSegmentId = 5
[displayNodeCoordinate] [140]: 5's startCoordinate: latitude = 40.355779, longitude = 116.815145
[displayNodeCoordinate] [141]: 5's endCoordinate: latitude = 40.355755, longitude = 116.812150
[insertNode] [1240]: (*it)->preSegmentId = 6's segIsInTree = 0
[findNodeById] [888]: result = 0x563580a8afb0
[findNodeById] [888]: result = 0x563580a8afb0
[insertNode] [1288]: tempNode is = 0x563580a8afb0, preSegmentId = 6, prevSegmentId = 4, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8b3b0
[insertChildNode] [1184]: childNode = 0x563580a8b3b0
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 254.000000, BranchAngle = 0.020000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000349
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 253.999985
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.088663
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.340000, accumulateBranchAngleRad = 3.130073
[coordinateSystemRotates] [208]: dX = 253.999985
[coordinateSystemRotates] [209]: dY = 0.088663
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999934
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011519
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -253.983133
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.001021
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.925805
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.088657
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -253.984154
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.837148
[coordinateSystemRotates] [221]: coordinate system rotated X = -253.984154
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.837148
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -331.978979, accumulateXY.distanceY = 3.735624
[calcDestination] [78]: destinationCoord latitude = 40.353498  destinationCoord longitude = 116.815178
[insertNode] [1310]: childNode's preSegmentId = 6
[displayNodeCoordinate] [140]: 6's startCoordinate: latitude = 40.355779, longitude = 116.815145
[displayNodeCoordinate] [141]: 6's endCoordinate: latitude = 40.353498, longitude = 116.815178
[insertNode] [1240]: (*it)->preSegmentId = 7's segIsInTree = 0
[findNodeById] [888]: result = 0x563580a8afb0
[findNodeById] [888]: result = 0x563580a8afb0
[insertNode] [1288]: tempNode is = 0x563580a8afb0, preSegmentId = 7, prevSegmentId = 4, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertChildNode] [1184]: childNode = 0x563580a8b4c0
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 254.000000, BranchAngle = -90.050000
[calcStraightXYOffset] [232]: BranchAngleRad = -1.571669
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -0.221657
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = -253.999903
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.340000, accumulateBranchAngleRad = 3.130073
[coordinateSystemRotates] [208]: dX = -0.221657
[coordinateSystemRotates] [209]: dY = -253.999903
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999934
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011519
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 0.221642
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -2.925804
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.002553
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 253.983052
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 3.147446
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 253.980498
[coordinateSystemRotates] [221]: coordinate system rotated X = 3.147446
[coordinateSystemRotates] [222]: coordinate system rotated Y = 253.980498
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -74.847379, accumulateXY.distanceY = 254.878974
[calcDestination] [78]: destinationCoord latitude = 40.355808  destinationCoord longitude = 116.818139
[insertNode] [1310]: childNode's preSegmentId = 7
[displayNodeCoordinate] [140]: 7's startCoordinate: latitude = 40.355779, longitude = 116.815145
[displayNodeCoordinate] [141]: 7's endCoordinate: latitude = 40.355808, longitude = 116.818139
[insertNode] [1240]: (*it)->preSegmentId = 8's segIsInTree = 0
[findNodeById] [893]: result = (nil)
[findNodeById] [888]: result = 0x563580a8b3b0
[findNodeById] [888]: result = 0x563580a8b3b0
[findNodeById] [888]: result = 0x563580a8b3b0
[insertNode] [1288]: tempNode is = 0x563580a8b3b0, preSegmentId = 8, prevSegmentId = 6, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8b5b0
[insertChildNode] [1184]: childNode = 0x563580a8b5b0
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 103.000000, BranchAngle = 0.010000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000175
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 102.999998
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.017977
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.360000, accumulateBranchAngleRad = 3.130423
[coordinateSystemRotates] [208]: dX = 102.999998
[coordinateSystemRotates] [209]: dY = 0.017977
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999938
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011170
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -102.993573
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000201
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 1.150497
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.017976
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -102.993774
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 1.132521
[coordinateSystemRotates] [221]: coordinate system rotated X = -102.993774
[coordinateSystemRotates] [222]: coordinate system rotated Y = 1.132521
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -434.972753, accumulateXY.distanceY = 4.868145
[calcDestination] [78]: destinationCoord latitude = 40.352573  destinationCoord longitude = 116.815191
[insertNode] [1310]: childNode's preSegmentId = 8
[displayNodeCoordinate] [140]: 8's startCoordinate: latitude = 40.353498, longitude = 116.815178
[displayNodeCoordinate] [141]: 8's endCoordinate: latitude = 40.352573, longitude = 116.815191
[mapUpdate] [1406]: --------------------------update the attribute of root, parent and current and delete out of date childs--------------------------
[updateRootNode] [1144]: updateRootNode
[updateRootNode] [1160]: old RootNode = 2
[deleteOldRoot] [957]: old parentNode = 3 is newRoot
[popUpList] [171]: delete list's element
[updateRootNode] [1162]: new RootNode = 3
[mapUpdate] [1414]: mTree->MapData.nodeAttribute = 1
[updateOtherNode] [1091]: mTree->MapData.nodeAttribute = 1
[updateOtherNode] [1117]: this RootSegment is new root
[findNodeById] [888]: result = 0x563580a8afb0
[updateOtherNode] [1120]: lastCurNode = 4 is newParent
[popUpList] [171]: delete list's element
[popUpList] [171]: delete list's element
[popUpList] [171]: delete list's element
[findNodeById] [888]: result = 0x563580a8b2a0
[findNodeById] [888]: result = 0x563580a8b2a0
[updateOtherNode] [1130]: curNode  = 0x563580a8b2a0
[updateOtherNode] [1135]: curNode  = 5
[mapUpdate] [1420]: updateOtherNode
[mapUpdate] [1424]: mTree->MapData.nodeAttribute = 1
[mapUpdate] [1430]: updateChildNode
[mapUpdate] [1452]: --------------------------update the Coordinate of root, parent, current and childs--------------------------
[mapUpdate] [1453]: hv's longitude = 116.815146, latitude = 40.355777, hvHeading = 269.400000
[findNodeById] [888]: result = 0x563580a8b2a0
[findNodeById] [888]: result = 0x563580a8b2a0
[mapUpdate] [1463]: curNode->MapData.nodeAttribute = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 254.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 254.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 269.400000, accumulateBranchAngleRad = 4.701917
[coordinateSystemRotates] [208]: dX = 254.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.010472
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = -0.999945
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -2.659833
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -253.986073
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -2.659833
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -253.986073
[coordinateSystemRotates] [221]: coordinate system rotated X = -2.659833
[coordinateSystemRotates] [222]: coordinate system rotated Y = -253.986073
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -2.659833, disHv2EndAfterRotatingCoord.distanceY = -253.986073
[calcDestination] [78]: destinationCoord latitude = 40.355753  destinationCoord longitude = 116.812152
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.355753  longitude = 116.812152
[calcStraightXYOffset] [230]: Length = 0.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -0.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 269.400000, accumulateBranchAngleRad = 4.701917
[coordinateSystemRotates] [208]: dX = -0.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.010472
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = -0.999945
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [221]: coordinate system rotated X = 0.000000
[coordinateSystemRotates] [222]: coordinate system rotated Y = 0.000000
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 0.000000, disHv2StartAfterRotatingCoord.distanceY = 0.000000
[calcDestination] [78]: destinationCoord latitude = 40.355777  destinationCoord longitude = 116.815146
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.355777  longitude = 116.815146
[displayNodeCoordinate] [140]: 5's startCoordinate: latitude = 40.355777, longitude = 116.815146
[displayNodeCoordinate] [141]: 5's endCoordinate: latitude = 40.355753, longitude = 116.812152
[calcRootOrParentSegmentCoordinate] [424]: --------------------------Is rootSegment or parentSegment--------------------------
[calcStraightXYOffset] [230]: Length = -78.000000, BranchAngle = 90.060000
[calcStraightXYOffset] [232]: BranchAngleRad = 1.571844
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 0.081681
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = -77.999957
[coordinateSystemRotates] [207]: accumulateBranchAngle = 269.400000, accumulateBranchAngleRad = 4.701917
[coordinateSystemRotates] [208]: dX = 0.081681
[coordinateSystemRotates] [209]: dY = -77.999957
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.010472
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = -0.999945
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -0.000855
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 77.995680
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.081677
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 0.816799
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -77.996536
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 0.735122
[coordinateSystemRotates] [221]: coordinate system rotated X = -77.996536
[coordinateSystemRotates] [222]: coordinate system rotated Y = 0.735122
[calcRootOrParentSegmentCoordinate] [458]: accumulateXY.distanceX = -77.996536, accumulateXY.distanceY = 0.735122
[calcDestination] [78]: destinationCoord latitude = 40.355076  destinationCoord longitude = 116.815155
[displayNodeCoordinate] [140]: 4's startCoordinate: latitude = 40.355076, longitude = 116.815155
[displayNodeCoordinate] [141]: 4's endCoordinate: latitude = 40.355777, longitude = 116.815146
[calcRootOrParentSegmentCoordinate] [424]: --------------------------Is rootSegment or parentSegment--------------------------
[calcStraightXYOffset] [230]: Length = -254.000000, BranchAngle = 0.010000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000175
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -253.999996
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = -0.044331
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.340000, accumulateBranchAngleRad = 3.130073
[coordinateSystemRotates] [208]: dX = -253.999996
[coordinateSystemRotates] [209]: dY = -0.044331
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999934
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011519
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 253.983145
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -0.000511
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -2.925805
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 0.044328
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 253.983655
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -2.881477
[coordinateSystemRotates] [221]: coordinate system rotated X = 253.983655
[coordinateSystemRotates] [222]: coordinate system rotated Y = -2.881477
[calcRootOrParentSegmentCoordinate] [458]: accumulateXY.distanceX = 175.987119, accumulateXY.distanceY = -2.146355
[calcDestination] [78]: destinationCoord latitude = 40.357358  destinationCoord longitude = 116.815121
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.357358, longitude = 116.815121
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.355076, longitude = 116.815155
[TestBody] [1096]: check remain segmentId
[TestBody] [1099]: MapData_X.preSegmentId = 4
[TestBody] [1099]: MapData_X.preSegmentId = 3
[TestBody] [1099]: MapData_X.preSegmentId = 5
[       OK ] PsdMapTest.deleteSubTreeWithDepthGreaterThan1 (0 ms)
[ RUN      ] PsdMapTest.mapCreateAndmapUpdateAndmapClear
[TestBody] [1107]: VPsdMap().empty() = 0
[pushInList] [193]: preSegmentId = 4
[pushInList] [193]: preSegmentId = 3
[pushInList] [193]: preSegmentId = 2
[pushInList] [193]: preSegmentId = 5
[pushInList] [193]: preSegmentId = 6
[pushInList] [193]: preSegmentId = 7
[pushInList] [193]: preSegmentId = 8
[pushInList] [193]: preSegmentId = 20
[TestBody] [1245]: MapData_X.preSegmentId = 4
[TestBody] [1245]: MapData_X.preSegmentId = 3
[TestBody] [1245]: MapData_X.preSegmentId = 2
[TestBody] [1245]: MapData_X.preSegmentId = 5
[TestBody] [1245]: MapData_X.preSegmentId = 6
[TestBody] [1245]: MapData_X.preSegmentId = 7
[TestBody] [1245]: MapData_X.preSegmentId = 8
[TestBody] [1245]: MapData_X.preSegmentId = 20
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815134, latitude = 40.356480, hvHeading = 179.340000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 4
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 4, curSegmentId is = 4
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 78.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 78.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.340000, accumulateBranchAngleRad = 3.130073
[coordinateSystemRotates] [208]: dX = 78.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999934
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011519
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -77.994825
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 0.898476
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -77.994825
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 0.898476
[coordinateSystemRotates] [221]: coordinate system rotated X = -77.994825
[coordinateSystemRotates] [222]: coordinate system rotated Y = 0.898476
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -77.994825, disHv2EndAfterRotatingCoord.distanceY = 0.898476
[calcDestination] [78]: destinationCoord latitude = 40.355779  destinationCoord longitude = 116.815145
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.355779  longitude = 116.815145
[calcStraightXYOffset] [230]: Length = 0.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -0.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.340000, accumulateBranchAngleRad = 3.130073
[coordinateSystemRotates] [208]: dX = -0.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999934
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011519
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [221]: coordinate system rotated X = 0.000000
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.000000
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 0.000000, disHv2StartAfterRotatingCoord.distanceY = 0.000000
[calcDestination] [78]: destinationCoord latitude = 40.356480  destinationCoord longitude = 116.815134
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.356480  longitude = 116.815134
[displayNodeCoordinate] [140]: 4's startCoordinate: latitude = 40.356480, longitude = 116.815134
[displayNodeCoordinate] [141]: 4's endCoordinate: latitude = 40.355779, longitude = 116.815145
[insertNode] [1240]: (*it)->preSegmentId = 4's segIsInTree = 1
[findNodeById] [893]: result = (nil)
[insertNode] [1288]: tempNode is = (nil), preSegmentId = 4, prevSegmentId = 3, segIsInTree = 1
[insertNode] [1321]: goto check the next segment info from vPsdMap
[insertNode] [1240]: (*it)->preSegmentId = 3's segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8b3b0
[insertParentNode] [1202]: parentNode = 0x563580a8b3b0
[calcRootOrParentSegmentCoordinate] [424]: --------------------------Is rootSegment or parentSegment--------------------------
[calcStraightXYOffset] [230]: Length = -254.000000, BranchAngle = 0.010000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000175
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -253.999996
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = -0.044331
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.340000, accumulateBranchAngleRad = 3.130073
[coordinateSystemRotates] [208]: dX = -253.999996
[coordinateSystemRotates] [209]: dY = -0.044331
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999934
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011519
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 253.983145
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -0.000511
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -2.925805
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 0.044328
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 253.983655
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -2.881477
[coordinateSystemRotates] [221]: coordinate system rotated X = 253.983655
[coordinateSystemRotates] [222]: coordinate system rotated Y = -2.881477
[calcRootOrParentSegmentCoordinate] [458]: accumulateXY.distanceX = 253.983655, accumulateXY.distanceY = -2.881477
[calcDestination] [78]: destinationCoord latitude = 40.358762  destinationCoord longitude = 116.815100
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358762, longitude = 116.815100
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356480, longitude = 116.815134
[findNodeById] [893]: result = (nil)
[findNodeById] [893]: result = (nil)
[insertNode] [1288]: tempNode is = (nil), preSegmentId = 3, prevSegmentId = 2, segIsInTree = 1
[insertNode] [1321]: goto check the next segment info from vPsdMap
[insertNode] [1240]: (*it)->preSegmentId = 2's segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8b5b0
[insertRootNode] [1221]: rootNode = 0x563580a8b5b0
[calcRootOrParentSegmentCoordinate] [424]: --------------------------Is rootSegment or parentSegment--------------------------
[calcStraightXYOffset] [230]: Length = -176.000000, BranchAngle = -0.370000
[calcStraightXYOffset] [232]: BranchAngleRad = -0.006458
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -175.996330
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 1.136551
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -175.996330
[coordinateSystemRotates] [209]: dY = 1.136551
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 175.984297
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.013290
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -2.058002
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -1.136473
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 175.971007
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -3.194475
[coordinateSystemRotates] [221]: coordinate system rotated X = 175.971007
[coordinateSystemRotates] [222]: coordinate system rotated Y = -3.194475
[calcRootOrParentSegmentCoordinate] [458]: accumulateXY.distanceX = 429.954662, accumulateXY.distanceY = -6.075952
[calcDestination] [78]: destinationCoord latitude = 40.360342  destinationCoord longitude = 116.815062
[displayNodeCoordinate] [140]: 2's startCoordinate: latitude = 40.360342, longitude = 116.815062
[displayNodeCoordinate] [141]: 2's endCoordinate: latitude = 40.358762, longitude = 116.815100
[insertNode] [1288]: tempNode is = 0x563580a8b5b0, preSegmentId = 2, prevSegmentId = 2, segIsInTree = 1
[insertNode] [1315]: some nodes are already in tree
[insertNode] [1240]: (*it)->preSegmentId = 5's segIsInTree = 0
[findNodeById] [888]: result = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[insertNode] [1288]: tempNode is = 0x563580a8b4c0, preSegmentId = 5, prevSegmentId = 4, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8b190
[insertChildNode] [1184]: childNode = 0x563580a8b190
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 254.000000, BranchAngle = 90.060000
[calcStraightXYOffset] [232]: BranchAngleRad = 1.571844
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -0.265988
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 253.999861
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.340000, accumulateBranchAngleRad = 3.130073
[coordinateSystemRotates] [208]: dX = -0.265988
[coordinateSystemRotates] [209]: dY = 253.999861
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999934
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011519
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 0.265970
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 2.925804
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.003064
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -253.983009
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -2.659833
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -253.986073
[coordinateSystemRotates] [221]: coordinate system rotated X = -2.659833
[coordinateSystemRotates] [222]: coordinate system rotated Y = -253.986073
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -80.654658, accumulateXY.distanceY = -253.087597
[calcDestination] [78]: destinationCoord latitude = 40.355755  destinationCoord longitude = 116.812150
[insertNode] [1310]: childNode's preSegmentId = 5
[displayNodeCoordinate] [140]: 5's startCoordinate: latitude = 40.355779, longitude = 116.815145
[displayNodeCoordinate] [141]: 5's endCoordinate: latitude = 40.355755, longitude = 116.812150
[insertNode] [1240]: (*it)->preSegmentId = 6's segIsInTree = 0
[findNodeById] [888]: result = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[insertNode] [1288]: tempNode is = 0x563580a8b4c0, preSegmentId = 6, prevSegmentId = 4, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8b9e0
[insertChildNode] [1184]: childNode = 0x563580a8b9e0
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 254.000000, BranchAngle = 0.020000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000349
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 253.999985
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.088663
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.340000, accumulateBranchAngleRad = 3.130073
[coordinateSystemRotates] [208]: dX = 253.999985
[coordinateSystemRotates] [209]: dY = 0.088663
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999934
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011519
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -253.983133
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.001021
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.925805
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.088657
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -253.984154
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.837148
[coordinateSystemRotates] [221]: coordinate system rotated X = -253.984154
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.837148
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -331.978979, accumulateXY.distanceY = 3.735624
[calcDestination] [78]: destinationCoord latitude = 40.353498  destinationCoord longitude = 116.815178
[insertNode] [1310]: childNode's preSegmentId = 6
[displayNodeCoordinate] [140]: 6's startCoordinate: latitude = 40.355779, longitude = 116.815145
[displayNodeCoordinate] [141]: 6's endCoordinate: latitude = 40.353498, longitude = 116.815178
[insertNode] [1240]: (*it)->preSegmentId = 7's segIsInTree = 0
[findNodeById] [888]: result = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[insertNode] [1288]: tempNode is = 0x563580a8b4c0, preSegmentId = 7, prevSegmentId = 4, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8baf0
[insertChildNode] [1184]: childNode = 0x563580a8baf0
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 254.000000, BranchAngle = -90.050000
[calcStraightXYOffset] [232]: BranchAngleRad = -1.571669
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -0.221657
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = -253.999903
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.340000, accumulateBranchAngleRad = 3.130073
[coordinateSystemRotates] [208]: dX = -0.221657
[coordinateSystemRotates] [209]: dY = -253.999903
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999934
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011519
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 0.221642
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -2.925804
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.002553
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 253.983052
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 3.147446
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 253.980498
[coordinateSystemRotates] [221]: coordinate system rotated X = 3.147446
[coordinateSystemRotates] [222]: coordinate system rotated Y = 253.980498
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -74.847379, accumulateXY.distanceY = 254.878974
[calcDestination] [78]: destinationCoord latitude = 40.355808  destinationCoord longitude = 116.818139
[insertNode] [1310]: childNode's preSegmentId = 7
[displayNodeCoordinate] [140]: 7's startCoordinate: latitude = 40.355779, longitude = 116.815145
[displayNodeCoordinate] [141]: 7's endCoordinate: latitude = 40.355808, longitude = 116.818139
[insertNode] [1240]: (*it)->preSegmentId = 8's segIsInTree = 0
[findNodeById] [893]: result = (nil)
[findNodeById] [888]: result = 0x563580a8b9e0
[findNodeById] [888]: result = 0x563580a8b9e0
[findNodeById] [888]: result = 0x563580a8b9e0
[insertNode] [1288]: tempNode is = 0x563580a8b9e0, preSegmentId = 8, prevSegmentId = 6, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8bc10
[insertChildNode] [1184]: childNode = 0x563580a8bc10
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 103.000000, BranchAngle = 0.010000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000175
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 102.999998
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.017977
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.360000, accumulateBranchAngleRad = 3.130423
[coordinateSystemRotates] [208]: dX = 102.999998
[coordinateSystemRotates] [209]: dY = 0.017977
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999938
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011170
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -102.993573
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000201
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 1.150497
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.017976
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -102.993774
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 1.132521
[coordinateSystemRotates] [221]: coordinate system rotated X = -102.993774
[coordinateSystemRotates] [222]: coordinate system rotated Y = 1.132521
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -434.972753, accumulateXY.distanceY = 4.868145
[calcDestination] [78]: destinationCoord latitude = 40.352573  destinationCoord longitude = 116.815191
[insertNode] [1310]: childNode's preSegmentId = 8
[displayNodeCoordinate] [140]: 8's startCoordinate: latitude = 40.353498, longitude = 116.815178
[displayNodeCoordinate] [141]: 8's endCoordinate: latitude = 40.352573, longitude = 116.815191
[insertNode] [1240]: (*it)->preSegmentId = 20's segIsInTree = 0
[findNodeById] [893]: result = (nil)
[findNodeById] [893]: result = (nil)
[findNodeById] [893]: result = (nil)
[findNodeById] [893]: result = (nil)
[findNodeById] [893]: result = (nil)
[findNodeById] [893]: result = (nil)
[findNodeById] [893]: result = (nil)
[insertNode] [1288]: tempNode is = (nil), preSegmentId = 20, prevSegmentId = 19, segIsInTree = 0
[insertNode] [1321]: goto check the next segment info from vPsdMap
[mapUpdate] [1406]: --------------------------update the attribute of root, parent and current and delete out of date childs--------------------------
[updateRootNode] [1144]: updateRootNode
[updateRootNode] [1160]: old RootNode = 2
[deleteOldRoot] [957]: old parentNode = 3 is newRoot
[popUpList] [171]: delete list's element
[updateRootNode] [1162]: new RootNode = 3
[mapUpdate] [1414]: mTree->MapData.nodeAttribute = 1
[updateOtherNode] [1091]: mTree->MapData.nodeAttribute = 1
[updateOtherNode] [1117]: this RootSegment is new root
[findNodeById] [888]: result = 0x563580a8b4c0
[updateOtherNode] [1120]: lastCurNode = 4 is newParent
[popUpList] [171]: delete list's element
[popUpList] [171]: delete list's element
[findNodeById] [888]: result = 0x563580a8b9e0
[findNodeById] [888]: result = 0x563580a8b9e0
[updateOtherNode] [1130]: curNode  = 0x563580a8b9e0
[updateOtherNode] [1135]: curNode  = 6
[mapUpdate] [1420]: updateOtherNode
[mapUpdate] [1424]: mTree->MapData.nodeAttribute = 1
[mapUpdate] [1430]: updateChildNode
[updateChildNode] [1042]: tempNode is = 0x563580a8b3b0, preSegmentId = 4, prevSegmentId = 3, segIsInTree = 1
[findNodeById] [893]: result = (nil)
[findNodeById] [893]: result = (nil)
[findNodeById] [893]: result = (nil)
[findNodeById] [893]: result = (nil)
[updateChildNode] [1042]: tempNode is = (nil), preSegmentId = 3, prevSegmentId = 2, segIsInTree = 1
[updateChildNode] [1075]: goto check the next segment info from vPsdMap
[findNodeById] [888]: result = 0x563580a8b4c0
[updateChildNode] [1042]: tempNode is = 0x563580a8b4c0, preSegmentId = 6, prevSegmentId = 4, segIsInTree = 1
[findNodeById] [888]: result = 0x563580a8b9e0
[findNodeById] [888]: result = 0x563580a8b9e0
[updateChildNode] [1042]: tempNode is = 0x563580a8b9e0, preSegmentId = 8, prevSegmentId = 6, segIsInTree = 1
[updateChildNode] [1068]: some nodes are already in tree
[findNodeById] [893]: result = (nil)
[findNodeById] [893]: result = (nil)
[findNodeById] [893]: result = (nil)
[findNodeById] [893]: result = (nil)
[updateChildNode] [1042]: tempNode is = (nil), preSegmentId = 20, prevSegmentId = 19, segIsInTree = 0
[updateChildNode] [1075]: goto check the next segment info from vPsdMap
[mapUpdate] [1452]: --------------------------update the Coordinate of root, parent, current and childs--------------------------
[mapUpdate] [1453]: hv's longitude = 116.815146, latitude = 40.355777, hvHeading = 179.360000
[findNodeById] [888]: result = 0x563580a8b9e0
[findNodeById] [888]: result = 0x563580a8b9e0
[mapUpdate] [1463]: curNode->MapData.nodeAttribute = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 254.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 254.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.360000, accumulateBranchAngleRad = 3.130423
[coordinateSystemRotates] [208]: dX = 254.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999938
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011170
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -253.984154
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.837148
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -253.984154
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.837148
[coordinateSystemRotates] [221]: coordinate system rotated X = -253.984154
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.837148
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -253.984154, disHv2EndAfterRotatingCoord.distanceY = 2.837148
[calcDestination] [78]: destinationCoord latitude = 40.353495  destinationCoord longitude = 116.815179
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.353495  longitude = 116.815179
[calcStraightXYOffset] [230]: Length = 0.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -0.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.360000, accumulateBranchAngleRad = 3.130423
[coordinateSystemRotates] [208]: dX = -0.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999938
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011170
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [221]: coordinate system rotated X = 0.000000
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.000000
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 0.000000, disHv2StartAfterRotatingCoord.distanceY = 0.000000
[calcDestination] [78]: destinationCoord latitude = 40.355777  destinationCoord longitude = 116.815146
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.355777  longitude = 116.815146
[displayNodeCoordinate] [140]: 6's startCoordinate: latitude = 40.355777, longitude = 116.815146
[displayNodeCoordinate] [141]: 6's endCoordinate: latitude = 40.353495, longitude = 116.815179
[calcRootOrParentSegmentCoordinate] [424]: --------------------------Is rootSegment or parentSegment--------------------------
[calcStraightXYOffset] [230]: Length = -78.000000, BranchAngle = 0.020000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000349
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -77.999995
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = -0.027227
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.360000, accumulateBranchAngleRad = 3.130423
[coordinateSystemRotates] [208]: dX = -77.999995
[coordinateSystemRotates] [209]: dY = -0.027227
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999938
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011170
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 77.995129
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -0.000304
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.871250
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 0.027225
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 77.995433
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.844025
[coordinateSystemRotates] [221]: coordinate system rotated X = 77.995433
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.844025
[calcRootOrParentSegmentCoordinate] [458]: accumulateXY.distanceX = 77.995433, accumulateXY.distanceY = -0.844025
[calcDestination] [78]: destinationCoord latitude = 40.356478  destinationCoord longitude = 116.815136
[displayNodeCoordinate] [140]: 4's startCoordinate: latitude = 40.356478, longitude = 116.815136
[displayNodeCoordinate] [141]: 4's endCoordinate: latitude = 40.355777, longitude = 116.815146
[calcRootOrParentSegmentCoordinate] [424]: --------------------------Is rootSegment or parentSegment--------------------------
[calcStraightXYOffset] [230]: Length = -254.000000, BranchAngle = 0.010000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000175
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -253.999996
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = -0.044331
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.340000, accumulateBranchAngleRad = 3.130073
[coordinateSystemRotates] [208]: dX = -253.999996
[coordinateSystemRotates] [209]: dY = -0.044331
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999934
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011519
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 253.983145
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -0.000511
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -2.925805
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 0.044328
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 253.983655
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -2.881477
[coordinateSystemRotates] [221]: coordinate system rotated X = 253.983655
[coordinateSystemRotates] [222]: coordinate system rotated Y = -2.881477
[calcRootOrParentSegmentCoordinate] [458]: accumulateXY.distanceX = 331.979089, accumulateXY.distanceY = -3.725502
[calcDestination] [78]: destinationCoord latitude = 40.358759  destinationCoord longitude = 116.815102
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358759, longitude = 116.815102
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356478, longitude = 116.815136
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 103.000000, BranchAngle = 0.010000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000175
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 102.999998
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.017977
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.360000, accumulateBranchAngleRad = 3.130423
[coordinateSystemRotates] [208]: dX = 102.999998
[coordinateSystemRotates] [209]: dY = 0.017977
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999938
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011170
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -102.993573
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000201
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 1.150497
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.017976
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -102.993774
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 1.132521
[coordinateSystemRotates] [221]: coordinate system rotated X = -102.993774
[coordinateSystemRotates] [222]: coordinate system rotated Y = 1.132521
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -356.977928, accumulateXY.distanceY = 3.969670
[calcDestination] [78]: destinationCoord latitude = 40.352570  destinationCoord longitude = 116.815193
[displayNodeCoordinate] [140]: 8's startCoordinate: latitude = 40.353495, longitude = 116.815179
[displayNodeCoordinate] [141]: 8's endCoordinate: latitude = 40.352570, longitude = 116.815193
[TestBody] [1267]: check remain segmentId
[TestBody] [1270]: MapData_X.preSegmentId = 4
[TestBody] [1270]: MapData_X.preSegmentId = 3
[TestBody] [1270]: MapData_X.preSegmentId = 6
[TestBody] [1270]: MapData_X.preSegmentId = 8
[TestBody] [1270]: MapData_X.preSegmentId = 20
[TestBody] [1277]: tree = 0x563580a8b3b0
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b3b0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [993]: child id =  4
[clearNodeOutTree] [990]: Node id = 4
[clearNodeOutTree] [993]: child id =  6
[clearNodeOutTree] [990]: Node id = 6
[clearNodeOutTree] [993]: child id =  8
[clearNodeOutTree] [990]: Node id = 8
[clearNodeOutTree] [996]: clear id = 8
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8bc10, Node->ParentNode = 0x563580a8b9e0
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[clearNodeOutTree] [996]: clear id = 6
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b9e0, Node->ParentNode = 0x563580a8b4c0
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[clearNodeOutTree] [996]: clear id = 4
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = 0x563580a8b3b0
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b3b0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[clearList] [165]: clear the vPsdMap
[       OK ] PsdMapTest.mapCreateAndmapUpdateAndmapClear (0 ms)
[ RUN      ] PsdMapTest.curIdIsNotInList
[TestBody] [1291]: VPsdMap().empty() = 1
[IsCurIdInList] [1539]: curSegmentId is not in List
[       OK ] PsdMapTest.curIdIsNotInList (0 ms)
[----------] 10 tests from PsdMapTest (4 ms total)

[----------] 14 tests from PsdLocationTest
[ RUN      ] PsdLocationTest.getPsdRoLocation
[TestBody] [1363]: VPsdMap().empty() = 0
[pushInList] [193]: preSegmentId = 3
[TestBody] [1394]MapData_1.preSegmentId = 3
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b3b0
[insertNodeInTree] [1328]: curNode = 0x563580a8b3b0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b3b0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[PsdLocation] [76]: initialize mRoMatchedSegId = 0
[PsdLocation] [77]: initialize mRoMatchedNode = (nil)
[PsdLocation] [78]: initialize mIsMatch = 0
[PsdLocation] [79]: initialize PsdAvailable = 0
[PsdLocation] [80]: initialize MPP = 0
[PsdLocation] [81]: initialize roadSegClass = 0
[PsdLocation] [82]: initialize relativePos = 0
[PsdLocation] [83]: initialize RelativeDir = 0
[PsdLocation] [84]: initialize RvRelevancy = 0
[PsdLocation] [85]: initialize dis2Event = 0.000000
[PsdLocation] [86]: initialize HvDTIP = 0.000000
[PsdLocation] [87]: initialize RvDTIP = 0.000000
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.345438, RoPos.Long = 116.809901
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -1485.446342, startPoint.y = -424.337305
[RoMatchSegment] [453]: endPoint.x = -1232.147387, endPoint.y = -430.274546
[RoMatchSegment] [460]: orthogonalDistance = 459.029577
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.849049, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547361
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594232, atan2(endPoint.x, endPoint.y) = -1.906765
[RoMatchSegment] [468]: Alpha = 0.301688, Beta = 3.500996
[getPsdRoLocation] [659]: MPP = 0
[getPsdRoLocation] [660]: roadSegClass = 0
[getPsdRoLocation] [661]: relativePos = 0
[getPsdRoLocation] [662]: RelativeDir = 0
[getPsdRoLocation] [663]: RvRelevancy = 0
[getPsdRoLocation] [664]: dis2Event = 0.000000
[clearList] [165]: clear the vPsdMap
[       OK ] PsdLocationTest.getPsdRoLocation (0 ms)
[ RUN      ] PsdLocationTest.treeWithMultiLayer
[TestBody] [1419]: VPsdMap().empty() = 1
[pushInList] [193]: preSegmentId = 3
[pushInList] [193]: preSegmentId = 2
[pushInList] [193]: preSegmentId = 10
[pushInList] [193]: preSegmentId = 4
[pushInList] [193]: preSegmentId = 5
[pushInList] [193]: preSegmentId = 6
[pushInList] [193]: preSegmentId = 7
[pushInList] [193]: preSegmentId = 8
[TestBody] [1558]: MapData_X.preSegmentId = 3
[TestBody] [1558]: MapData_X.preSegmentId = 2
[TestBody] [1558]: MapData_X.preSegmentId = 10
[TestBody] [1558]: MapData_X.preSegmentId = 4
[TestBody] [1558]: MapData_X.preSegmentId = 5
[TestBody] [1558]: MapData_X.preSegmentId = 6
[TestBody] [1558]: MapData_X.preSegmentId = 7
[TestBody] [1558]: MapData_X.preSegmentId = 8
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[insertNode] [1240]: (*it)->preSegmentId = 3's segIsInTree = 1
[findNodeById] [893]: result = (nil)
[insertNode] [1288]: tempNode is = (nil), preSegmentId = 3, prevSegmentId = 2, segIsInTree = 1
[insertNode] [1321]: goto check the next segment info from vPsdMap
[insertNode] [1240]: (*it)->preSegmentId = 2's segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8b9e0
[insertParentNode] [1202]: parentNode = 0x563580a8b9e0
[calcRootOrParentSegmentCoordinate] [424]: --------------------------Is rootSegment or parentSegment--------------------------
[calcStraightXYOffset] [230]: Length = -176.000000, BranchAngle = -0.370000
[calcStraightXYOffset] [232]: BranchAngleRad = -0.006458
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -175.996330
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 1.136551
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -175.996330
[coordinateSystemRotates] [209]: dY = 1.136551
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 175.984297
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.013290
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -2.058002
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -1.136473
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 175.971007
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -3.194475
[coordinateSystemRotates] [221]: coordinate system rotated X = 175.971007
[coordinateSystemRotates] [222]: coordinate system rotated Y = -3.194475
[calcRootOrParentSegmentCoordinate] [458]: accumulateXY.distanceX = 244.966289, accumulateXY.distanceY = -4.001323
[calcDestination] [78]: destinationCoord latitude = 40.360351  destinationCoord longitude = 116.815062
[displayNodeCoordinate] [140]: 2's startCoordinate: latitude = 40.360351, longitude = 116.815062
[displayNodeCoordinate] [141]: 2's endCoordinate: latitude = 40.358770, longitude = 116.815099
[findNodeById] [893]: result = (nil)
[findNodeById] [893]: result = (nil)
[insertNode] [1288]: tempNode is = (nil), preSegmentId = 2, prevSegmentId = 10, segIsInTree = 1
[insertNode] [1321]: goto check the next segment info from vPsdMap
[insertNode] [1240]: (*it)->preSegmentId = 10's segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8bc10
[insertRootNode] [1221]: rootNode = 0x563580a8bc10
[calcRootOrParentSegmentCoordinate] [424]: --------------------------Is rootSegment or parentSegment--------------------------
[calcStraightXYOffset] [230]: Length = -200.000000, BranchAngle = -0.010000
[calcStraightXYOffset] [232]: BranchAngleRad = -0.000175
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -199.999997
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.034907
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.700000, accumulateBranchAngleRad = 3.136357
[coordinateSystemRotates] [208]: dX = -199.999997
[coordinateSystemRotates] [209]: dY = 0.034907
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999986
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.005236
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 199.997255
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000183
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -1.047193
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.034906
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 199.997073
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -1.082099
[coordinateSystemRotates] [221]: coordinate system rotated X = 199.997073
[coordinateSystemRotates] [222]: coordinate system rotated Y = -1.082099
[calcRootOrParentSegmentCoordinate] [458]: accumulateXY.distanceX = 444.963362, accumulateXY.distanceY = -5.083421
[calcDestination] [78]: destinationCoord latitude = 40.362147  destinationCoord longitude = 116.815049
[displayNodeCoordinate] [140]: 10's startCoordinate: latitude = 40.362147, longitude = 116.815049
[displayNodeCoordinate] [141]: 10's endCoordinate: latitude = 40.360351, longitude = 116.815062
[insertNode] [1288]: tempNode is = 0x563580a8bc10, preSegmentId = 10, prevSegmentId = 10, segIsInTree = 1
[insertNode] [1315]: some nodes are already in tree
[insertNode] [1240]: (*it)->preSegmentId = 4's segIsInTree = 0
[findNodeById] [888]: result = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[insertNode] [1288]: tempNode is = 0x563580a8b4c0, preSegmentId = 4, prevSegmentId = 3, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8baf0
[insertChildNode] [1184]: childNode = 0x563580a8baf0
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 78.000000, BranchAngle = 0.010000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000175
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 77.999999
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.013614
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 77.999999
[coordinateSystemRotates] [209]: dY = 0.013614
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -77.994666
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000159
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 0.912088
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.013613
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -77.994825
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 0.898476
[coordinateSystemRotates] [221]: coordinate system rotated X = -77.994825
[coordinateSystemRotates] [222]: coordinate system rotated Y = 0.898476
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -262.982177, accumulateXY.distanceY = 3.061762
[calcDestination] [78]: destinationCoord latitude = 40.355788  destinationCoord longitude = 116.815145
[insertNode] [1310]: childNode's preSegmentId = 4
[displayNodeCoordinate] [140]: 4's startCoordinate: latitude = 40.356488, longitude = 116.815135
[displayNodeCoordinate] [141]: 4's endCoordinate: latitude = 40.355788, longitude = 116.815145
[insertNode] [1240]: (*it)->preSegmentId = 5's segIsInTree = 0
[findNodeById] [888]: result = 0x563580a8baf0
[findNodeById] [888]: result = 0x563580a8baf0
[findNodeById] [888]: result = 0x563580a8baf0
[insertNode] [1288]: tempNode is = 0x563580a8baf0, preSegmentId = 5, prevSegmentId = 4, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8b190
[insertChildNode] [1184]: childNode = 0x563580a8b190
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 254.000000, BranchAngle = 90.060000
[calcStraightXYOffset] [232]: BranchAngleRad = 1.571844
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -0.265988
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 253.999861
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.340000, accumulateBranchAngleRad = 3.130073
[coordinateSystemRotates] [208]: dX = -0.265988
[coordinateSystemRotates] [209]: dY = 253.999861
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999934
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011519
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 0.265970
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 2.925804
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.003064
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -253.983009
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -2.659833
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -253.986073
[coordinateSystemRotates] [221]: coordinate system rotated X = -2.659833
[coordinateSystemRotates] [222]: coordinate system rotated Y = -253.986073
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -265.642010, accumulateXY.distanceY = -250.924311
[calcDestination] [78]: destinationCoord latitude = 40.355764  destinationCoord longitude = 116.812151
[insertNode] [1310]: childNode's preSegmentId = 5
[displayNodeCoordinate] [140]: 5's startCoordinate: latitude = 40.355788, longitude = 116.815145
[displayNodeCoordinate] [141]: 5's endCoordinate: latitude = 40.355764, longitude = 116.812151
[insertNode] [1240]: (*it)->preSegmentId = 6's segIsInTree = 0
[findNodeById] [888]: result = 0x563580a8baf0
[findNodeById] [888]: result = 0x563580a8baf0
[findNodeById] [888]: result = 0x563580a8baf0
[insertNode] [1288]: tempNode is = 0x563580a8baf0, preSegmentId = 6, prevSegmentId = 4, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8b5b0
[insertChildNode] [1184]: childNode = 0x563580a8b5b0
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 254.000000, BranchAngle = 0.020000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000349
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 253.999985
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.088663
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.340000, accumulateBranchAngleRad = 3.130073
[coordinateSystemRotates] [208]: dX = 253.999985
[coordinateSystemRotates] [209]: dY = 0.088663
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999934
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011519
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -253.983133
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.001021
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.925805
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.088657
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -253.984154
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.837148
[coordinateSystemRotates] [221]: coordinate system rotated X = -253.984154
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.837148
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -516.966331, accumulateXY.distanceY = 5.898910
[calcDestination] [78]: destinationCoord latitude = 40.353506  destinationCoord longitude = 116.815179
[insertNode] [1310]: childNode's preSegmentId = 6
[displayNodeCoordinate] [140]: 6's startCoordinate: latitude = 40.355788, longitude = 116.815145
[displayNodeCoordinate] [141]: 6's endCoordinate: latitude = 40.353506, longitude = 116.815179
[insertNode] [1240]: (*it)->preSegmentId = 7's segIsInTree = 0
[findNodeById] [888]: result = 0x563580a8baf0
[findNodeById] [888]: result = 0x563580a8baf0
[findNodeById] [888]: result = 0x563580a8baf0
[insertNode] [1288]: tempNode is = 0x563580a8baf0, preSegmentId = 7, prevSegmentId = 4, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8bdd0
[insertChildNode] [1184]: childNode = 0x563580a8bdd0
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 254.000000, BranchAngle = -90.050000
[calcStraightXYOffset] [232]: BranchAngleRad = -1.571669
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -0.221657
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = -253.999903
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.340000, accumulateBranchAngleRad = 3.130073
[coordinateSystemRotates] [208]: dX = -0.221657
[coordinateSystemRotates] [209]: dY = -253.999903
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999934
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011519
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 0.221642
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -2.925804
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.002553
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 253.983052
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 3.147446
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 253.980498
[coordinateSystemRotates] [221]: coordinate system rotated X = 3.147446
[coordinateSystemRotates] [222]: coordinate system rotated Y = 253.980498
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -259.834730, accumulateXY.distanceY = 257.042260
[calcDestination] [78]: destinationCoord latitude = 40.355816  destinationCoord longitude = 116.818139
[insertNode] [1310]: childNode's preSegmentId = 7
[displayNodeCoordinate] [140]: 7's startCoordinate: latitude = 40.355788, longitude = 116.815145
[displayNodeCoordinate] [141]: 7's endCoordinate: latitude = 40.355816, longitude = 116.818139
[insertNode] [1240]: (*it)->preSegmentId = 8's segIsInTree = 0
[findNodeById] [893]: result = (nil)
[findNodeById] [888]: result = 0x563580a8b5b0
[findNodeById] [888]: result = 0x563580a8b5b0
[findNodeById] [888]: result = 0x563580a8b5b0
[findNodeById] [888]: result = 0x563580a8b5b0
[insertNode] [1288]: tempNode is = 0x563580a8b5b0, preSegmentId = 8, prevSegmentId = 6, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8bec0
[insertChildNode] [1184]: childNode = 0x563580a8bec0
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 103.000000, BranchAngle = 0.010000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000175
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 102.999998
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.017977
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.360000, accumulateBranchAngleRad = 3.130423
[coordinateSystemRotates] [208]: dX = 102.999998
[coordinateSystemRotates] [209]: dY = 0.017977
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999938
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011170
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -102.993573
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000201
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 1.150497
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.017976
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -102.993774
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 1.132521
[coordinateSystemRotates] [221]: coordinate system rotated X = -102.993774
[coordinateSystemRotates] [222]: coordinate system rotated Y = 1.132521
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -619.960104, accumulateXY.distanceY = 7.031431
[calcDestination] [78]: destinationCoord latitude = 40.352581  destinationCoord longitude = 116.815192
[insertNode] [1310]: childNode's preSegmentId = 8
[displayNodeCoordinate] [140]: 8's startCoordinate: latitude = 40.353506, longitude = 116.815179
[displayNodeCoordinate] [141]: 8's endCoordinate: latitude = 40.352581, longitude = 116.815192
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357717, RoPos.Long = 116.815133
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -116.862700, startPoint.y = 4.213521
[RoMatchSegment] [453]: endPoint.x = 136.433608, endPoint.y = -1.723121
[RoMatchSegment] [460]: orthogonalDistance = 1.474142
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.534757, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.583425
[RoMatchSegment] [468]: Alpha = 0.012606, Beta = 0.010804
[RoMatchSegment] [476]: current tree Id = 10
[findNodeById] [888]: result = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[findNodeById] [888]: result = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = 48.053851
[calcRelativePosition] [337]: y = -2.600798
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 1, RvSpeed = 60.000000, headingDelta = 270.000000
[calcRelativeDirection] [322]: realativeDirection = 0
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 0, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 2127421142
[calcRvRelevancy] [262]: RvRelevancy = 0
[calcDistanceToEvent] [222]: dis2Event = 48.244312
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 3
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 0
[getPsdRoLocation] [663]: RvRelevancy = 0
[getPsdRoLocation] [664]: dis2Event = 48.244312
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.358516, RoPos.Long = 116.815116
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -28.163476, startPoint.y = 1.732043
[RoMatchSegment] [453]: endPoint.x = 225.132832, endPoint.y = -4.204563
[RoMatchSegment] [460]: orthogonalDistance = 1.071670
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.509374, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594229, atan2(endPoint.x, endPoint.y) = 1.589470
[RoMatchSegment] [468]: Alpha = 0.037989, Beta = 0.004759
[RoMatchSegment] [476]: current tree Id = 10
[findNodeById] [888]: result = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[findNodeById] [888]: result = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = -40.645373
[calcRelativePosition] [337]: y = -0.119346
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 2
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 2, RvSpeed = 60.000000, headingDelta = 90.000000
[calcRelativeDirection] [322]: realativeDirection = 0
[calcRvRelevancy] [228]: relativePos = 2, RelativeDir = 0, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 2127421142
[calcRvRelevancy] [262]: RvRelevancy = 0
[calcDistanceToEvent] [222]: dis2Event = 40.747261
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 3
[getPsdRoLocation] [661]: relativePos = 2
[getPsdRoLocation] [662]: RelativeDir = 0
[getPsdRoLocation] [663]: RvRelevancy = 0
[getPsdRoLocation] [664]: dis2Event = 40.747261
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.358516, RoPos.Long = 116.815116
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -28.163476, startPoint.y = 1.732043
[RoMatchSegment] [453]: endPoint.x = 225.132832, endPoint.y = -4.204563
[RoMatchSegment] [460]: orthogonalDistance = 1.071670
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.509374, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594229, atan2(endPoint.x, endPoint.y) = 1.589470
[RoMatchSegment] [468]: Alpha = 0.037989, Beta = 0.004759
[RoMatchSegment] [476]: current tree Id = 10
[findNodeById] [888]: result = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[findNodeById] [888]: result = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = -40.645373
[calcRelativePosition] [337]: y = -0.119346
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 2
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 2, RvSpeed = 60.000000, headingDelta = 90.000000
[calcRelativeDirection] [322]: realativeDirection = 0
[calcRvRelevancy] [228]: relativePos = 2, RelativeDir = 0, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 2127421142
[calcRvRelevancy] [262]: RvRelevancy = 0
[calcDistanceToEvent] [222]: dis2Event = 40.747261
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 3
[getPsdRoLocation] [661]: relativePos = 2
[getPsdRoLocation] [662]: RelativeDir = 0
[getPsdRoLocation] [663]: RvRelevancy = 0
[getPsdRoLocation] [664]: dis2Event = 40.747261
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357717, RoPos.Long = 116.815133
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -116.862700, startPoint.y = 4.213521
[RoMatchSegment] [453]: endPoint.x = 136.433608, endPoint.y = -1.723121
[RoMatchSegment] [460]: orthogonalDistance = 1.474142
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.534757, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.583425
[RoMatchSegment] [468]: Alpha = 0.012606, Beta = 0.010804
[RoMatchSegment] [476]: current tree Id = 10
[findNodeById] [888]: result = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[findNodeById] [888]: result = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = 48.053851
[calcRelativePosition] [337]: y = -2.600798
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 1, RvSpeed = 60.000000, headingDelta = 270.000000
[calcRelativeDirection] [322]: realativeDirection = 0
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 0, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 2127421142
[calcRvRelevancy] [262]: RvRelevancy = 0
[calcDistanceToEvent] [222]: dis2Event = 48.244312
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 3
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 0
[getPsdRoLocation] [663]: RvRelevancy = 0
[getPsdRoLocation] [664]: dis2Event = 48.244312
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.358516, RoPos.Long = 116.815116
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -28.163476, startPoint.y = 1.732043
[RoMatchSegment] [453]: endPoint.x = 225.132832, endPoint.y = -4.204563
[RoMatchSegment] [460]: orthogonalDistance = 1.071670
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.509374, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594229, atan2(endPoint.x, endPoint.y) = 1.589470
[RoMatchSegment] [468]: Alpha = 0.037989, Beta = 0.004759
[RoMatchSegment] [476]: current tree Id = 10
[findNodeById] [888]: result = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[findNodeById] [888]: result = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = -40.645373
[calcRelativePosition] [337]: y = -0.119346
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 2
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 2, RvSpeed = 60.000000, headingDelta = 30.000000
[calcRelativeDirection] [322]: realativeDirection = 6
[calcRvRelevancy] [228]: relativePos = 2, RelativeDir = 6, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 2127421142
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 40.747261
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 3
[getPsdRoLocation] [661]: relativePos = 2
[getPsdRoLocation] [662]: RelativeDir = 6
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 40.747261
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.358516, RoPos.Long = 116.815116
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -28.163476, startPoint.y = 1.732043
[RoMatchSegment] [453]: endPoint.x = 225.132832, endPoint.y = -4.204563
[RoMatchSegment] [460]: orthogonalDistance = 1.071670
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.509374, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594229, atan2(endPoint.x, endPoint.y) = 1.589470
[RoMatchSegment] [468]: Alpha = 0.037989, Beta = 0.004759
[RoMatchSegment] [476]: current tree Id = 10
[findNodeById] [888]: result = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[findNodeById] [888]: result = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = -40.645373
[calcRelativePosition] [337]: y = -0.119346
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 2
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 2, RvSpeed = 0.000000, headingDelta = 90.000000
[calcRelativeDirection] [322]: realativeDirection = 1
[calcRvRelevancy] [228]: relativePos = 2, RelativeDir = 1, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 2127421142
[calcRvRelevancy] [262]: RvRelevancy = 0
[calcDistanceToEvent] [222]: dis2Event = 40.747261
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 3
[getPsdRoLocation] [661]: relativePos = 2
[getPsdRoLocation] [662]: RelativeDir = 1
[getPsdRoLocation] [663]: RvRelevancy = 0
[getPsdRoLocation] [664]: dis2Event = 40.747261
[       OK ] PsdLocationTest.treeWithMultiLayer (0 ms)
[ RUN      ] PsdLocationTest.RelativePositionAndRelativeDirection
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8bc10
[clearNodeOutTree] [990]: Node id = 10
[clearNodeOutTree] [993]: child id =  2
[clearNodeOutTree] [990]: Node id = 2
[clearNodeOutTree] [993]: child id =  3
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [993]: child id =  4
[clearNodeOutTree] [990]: Node id = 4
[clearNodeOutTree] [993]: child id =  5
[clearNodeOutTree] [990]: Node id = 5
[clearNodeOutTree] [996]: clear id = 5
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b190, Node->ParentNode = 0x563580a8baf0
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[clearNodeOutTree] [993]: child id =  6
[clearNodeOutTree] [990]: Node id = 6
[clearNodeOutTree] [993]: child id =  8
[clearNodeOutTree] [990]: Node id = 8
[clearNodeOutTree] [996]: clear id = 8
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8bec0, Node->ParentNode = 0x563580a8b5b0
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[clearNodeOutTree] [996]: clear id = 6
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b5b0, Node->ParentNode = 0x563580a8baf0
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[clearNodeOutTree] [993]: child id =  7
[clearNodeOutTree] [990]: Node id = 7
[clearNodeOutTree] [996]: clear id = 7
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8bdd0, Node->ParentNode = 0x563580a8baf0
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[clearNodeOutTree] [996]: clear id = 4
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8baf0, Node->ParentNode = 0x563580a8b4c0
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = 0x563580a8b9e0
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[clearNodeOutTree] [996]: clear id = 2
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b9e0, Node->ParentNode = 0x563580a8bc10
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[clearNodeOutTree] [996]: clear id = 10
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8bc10, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b9e0
[insertNodeInTree] [1328]: curNode = 0x563580a8b9e0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b9e0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357717, RoPos.Long = 116.815133
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -116.862700, startPoint.y = 4.213521
[RoMatchSegment] [453]: endPoint.x = 136.433608, endPoint.y = -1.723121
[RoMatchSegment] [460]: orthogonalDistance = 1.474142
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.534757, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.583425
[RoMatchSegment] [468]: Alpha = 0.012606, Beta = 0.010804
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 1
[calcRelativePosition] [336]: x = 48.053851
[calcRelativePosition] [337]: y = -2.600798
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 1, relativePos = 1, RvSpeed = 60.000000, headingDelta = 0.000000
[calcRelativeDirection] [322]: realativeDirection = 3
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 3, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 3
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 48.244312
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 1
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 3
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 48.244312
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357715, RoPos.Long = 116.815083
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -117.134434, startPoint.y = -0.030922
[RoMatchSegment] [453]: endPoint.x = 136.161875, endPoint.y = -5.967563
[RoMatchSegment] [460]: orthogonalDistance = 2.775502
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.571060, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.614595
[RoMatchSegment] [468]: Alpha = 0.023697, Beta = 0.020366
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 1
[calcRelativePosition] [336]: x = 48.325585
[calcRelativePosition] [337]: y = 1.643617
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 1, relativePos = 1, RvSpeed = 60.000000, headingDelta = 0.000000
[calcRelativeDirection] [322]: realativeDirection = 3
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 3, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 3
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 48.474178
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 1
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 3
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 48.474178
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357890, RoPos.Long = 116.815114
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -97.672704, startPoint.y = 2.375009
[RoMatchSegment] [453]: endPoint.x = 155.623604, endPoint.y = -3.561624
[RoMatchSegment] [460]: orthogonalDistance = 0.085781
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.546485, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.593678
[RoMatchSegment] [468]: Alpha = 0.000878, Beta = 0.000551
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 1
[calcRelativePosition] [336]: x = 28.863855
[calcRelativePosition] [337]: y = -0.762300
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 1, relativePos = 1, RvSpeed = 60.000000, headingDelta = 30.000000
[calcRelativeDirection] [322]: realativeDirection = 3
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 3, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 3
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 28.946175
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 1
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 3
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 28.946175
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357715, RoPos.Long = 116.815083
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -117.134434, startPoint.y = -0.030922
[RoMatchSegment] [453]: endPoint.x = 136.161875, endPoint.y = -5.967563
[RoMatchSegment] [460]: orthogonalDistance = 2.775502
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.571060, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.614595
[RoMatchSegment] [468]: Alpha = 0.023697, Beta = 0.020366
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 1
[calcRelativePosition] [336]: x = 48.325585
[calcRelativePosition] [337]: y = 1.643617
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 1, relativePos = 1, RvSpeed = 60.000000, headingDelta = 330.000000
[calcRelativeDirection] [322]: realativeDirection = 3
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 3, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 3
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 48.474178
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 1
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 3
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 48.474178
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357715, RoPos.Long = 116.815083
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -117.134434, startPoint.y = -0.030922
[RoMatchSegment] [453]: endPoint.x = 136.161875, endPoint.y = -5.967563
[RoMatchSegment] [460]: orthogonalDistance = 2.775502
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.571060, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.614595
[RoMatchSegment] [468]: Alpha = 0.023697, Beta = 0.020366
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 1
[calcRelativePosition] [336]: x = 48.325585
[calcRelativePosition] [337]: y = 1.643617
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 1, relativePos = 1, RvSpeed = 60.000000, headingDelta = 270.000000
[calcRelativeDirection] [322]: realativeDirection = 0
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 0, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 3
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 48.474178
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 1
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 0
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 48.474178
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357715, RoPos.Long = 116.815083
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -117.134434, startPoint.y = -0.030922
[RoMatchSegment] [453]: endPoint.x = 136.161875, endPoint.y = -5.967563
[RoMatchSegment] [460]: orthogonalDistance = 2.775502
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.571060, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.614595
[RoMatchSegment] [468]: Alpha = 0.023697, Beta = 0.020366
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 1
[calcRelativePosition] [336]: x = 48.325585
[calcRelativePosition] [337]: y = 1.643617
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 1, relativePos = 1, RvSpeed = 60.000000, headingDelta = -10.000000
[calcRelativeDirection] [322]: realativeDirection = 0
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 0, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 3
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 48.474178
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 1
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 0
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 48.474178
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357715, RoPos.Long = 116.815083
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -117.134434, startPoint.y = -0.030922
[RoMatchSegment] [453]: endPoint.x = 136.161875, endPoint.y = -5.967563
[RoMatchSegment] [460]: orthogonalDistance = 2.775502
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.571060, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.614595
[RoMatchSegment] [468]: Alpha = 0.023697, Beta = 0.020366
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 1
[calcRelativePosition] [336]: x = 48.325585
[calcRelativePosition] [337]: y = 1.643617
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 1, relativePos = 1, RvSpeed = 60.000000, headingDelta = 370.000000
[calcRelativeDirection] [322]: realativeDirection = 0
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 0, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 3
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 48.474178
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 1
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 0
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 48.474178
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357890, RoPos.Long = 116.815114
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -97.672704, startPoint.y = 2.375009
[RoMatchSegment] [453]: endPoint.x = 155.623604, endPoint.y = -3.561624
[RoMatchSegment] [460]: orthogonalDistance = 0.085781
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.546485, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.593678
[RoMatchSegment] [468]: Alpha = 0.000878, Beta = 0.000551
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 1
[calcRelativePosition] [336]: x = 28.863855
[calcRelativePosition] [337]: y = -0.762300
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 1, relativePos = 1, RvSpeed = 60.000000, headingDelta = 180.000000
[calcRelativeDirection] [322]: realativeDirection = 2
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 2, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 3
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 28.946175
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 1
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 2
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 28.946175
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357890, RoPos.Long = 116.815114
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -97.672704, startPoint.y = 2.375009
[RoMatchSegment] [453]: endPoint.x = 155.623604, endPoint.y = -3.561624
[RoMatchSegment] [460]: orthogonalDistance = 0.085781
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.546485, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.593678
[RoMatchSegment] [468]: Alpha = 0.000878, Beta = 0.000551
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 1
[calcRelativePosition] [336]: x = 28.863855
[calcRelativePosition] [337]: y = -0.762300
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 1, relativePos = 1, RvSpeed = 60.000000, headingDelta = 100.000000
[calcRelativeDirection] [322]: realativeDirection = 0
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 0, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 3
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 28.946175
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 1
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 0
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 28.946175
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.358516, RoPos.Long = 116.815116
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -28.163476, startPoint.y = 1.732043
[RoMatchSegment] [453]: endPoint.x = 225.132832, endPoint.y = -4.204563
[RoMatchSegment] [460]: orthogonalDistance = 1.071670
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.509374, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594229, atan2(endPoint.x, endPoint.y) = 1.589470
[RoMatchSegment] [468]: Alpha = 0.037989, Beta = 0.004759
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 1
[calcRelativePosition] [336]: x = -40.645373
[calcRelativePosition] [337]: y = -0.119346
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 2
[calcRelativeDirection] [270]: roadSegClass = 1, relativePos = 2, RvSpeed = 60.000000, headingDelta = 30.000000
[calcRelativeDirection] [322]: realativeDirection = 6
[calcRvRelevancy] [228]: relativePos = 2, RelativeDir = 6, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 3
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 40.747261
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 1
[getPsdRoLocation] [661]: relativePos = 2
[getPsdRoLocation] [662]: RelativeDir = 6
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 40.747261
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.358516, RoPos.Long = 116.815116
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -28.163476, startPoint.y = 1.732043
[RoMatchSegment] [453]: endPoint.x = 225.132832, endPoint.y = -4.204563
[RoMatchSegment] [460]: orthogonalDistance = 1.071670
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.509374, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594229, atan2(endPoint.x, endPoint.y) = 1.589470
[RoMatchSegment] [468]: Alpha = 0.037989, Beta = 0.004759
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 1
[calcRelativePosition] [336]: x = -40.645373
[calcRelativePosition] [337]: y = -0.119346
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 2
[calcRelativeDirection] [270]: roadSegClass = 1, relativePos = 2, RvSpeed = 60.000000, headingDelta = 330.000000
[calcRelativeDirection] [322]: realativeDirection = 6
[calcRvRelevancy] [228]: relativePos = 2, RelativeDir = 6, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 3
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 40.747261
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 1
[getPsdRoLocation] [661]: relativePos = 2
[getPsdRoLocation] [662]: RelativeDir = 6
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 40.747261
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.358516, RoPos.Long = 116.815116
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -28.163476, startPoint.y = 1.732043
[RoMatchSegment] [453]: endPoint.x = 225.132832, endPoint.y = -4.204563
[RoMatchSegment] [460]: orthogonalDistance = 1.071670
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.509374, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594229, atan2(endPoint.x, endPoint.y) = 1.589470
[RoMatchSegment] [468]: Alpha = 0.037989, Beta = 0.004759
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 1
[calcRelativePosition] [336]: x = -40.645373
[calcRelativePosition] [337]: y = -0.119346
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 2
[calcRelativeDirection] [270]: roadSegClass = 1, relativePos = 2, RvSpeed = 60.000000, headingDelta = -10.000000
[calcRelativeDirection] [322]: realativeDirection = 0
[calcRvRelevancy] [228]: relativePos = 2, RelativeDir = 0, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 3
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 40.747261
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 1
[getPsdRoLocation] [661]: relativePos = 2
[getPsdRoLocation] [662]: RelativeDir = 0
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 40.747261
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.358516, RoPos.Long = 116.815116
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -28.163476, startPoint.y = 1.732043
[RoMatchSegment] [453]: endPoint.x = 225.132832, endPoint.y = -4.204563
[RoMatchSegment] [460]: orthogonalDistance = 1.071670
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.509374, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594229, atan2(endPoint.x, endPoint.y) = 1.589470
[RoMatchSegment] [468]: Alpha = 0.037989, Beta = 0.004759
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 1
[calcRelativePosition] [336]: x = -40.645373
[calcRelativePosition] [337]: y = -0.119346
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 2
[calcRelativeDirection] [270]: roadSegClass = 1, relativePos = 2, RvSpeed = 60.000000, headingDelta = 370.000000
[calcRelativeDirection] [322]: realativeDirection = 0
[calcRvRelevancy] [228]: relativePos = 2, RelativeDir = 0, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 3
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 40.747261
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 1
[getPsdRoLocation] [661]: relativePos = 2
[getPsdRoLocation] [662]: RelativeDir = 0
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 40.747261
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.358516, RoPos.Long = 116.815116
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -28.163476, startPoint.y = 1.732043
[RoMatchSegment] [453]: endPoint.x = 225.132832, endPoint.y = -4.204563
[RoMatchSegment] [460]: orthogonalDistance = 1.071670
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.509374, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594229, atan2(endPoint.x, endPoint.y) = 1.589470
[RoMatchSegment] [468]: Alpha = 0.037989, Beta = 0.004759
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 1
[calcRelativePosition] [336]: x = -40.645373
[calcRelativePosition] [337]: y = -0.119346
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 2
[calcRelativeDirection] [270]: roadSegClass = 1, relativePos = 2, RvSpeed = 60.000000, headingDelta = 180.000000
[calcRelativeDirection] [322]: realativeDirection = 9
[calcRvRelevancy] [228]: relativePos = 2, RelativeDir = 9, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 3
[calcRvRelevancy] [262]: RvRelevancy = 0
[calcDistanceToEvent] [222]: dis2Event = 40.747261
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 1
[getPsdRoLocation] [661]: relativePos = 2
[getPsdRoLocation] [662]: RelativeDir = 9
[getPsdRoLocation] [663]: RvRelevancy = 0
[getPsdRoLocation] [664]: dis2Event = 40.747261
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.358516, RoPos.Long = 116.815116
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -28.163476, startPoint.y = 1.732043
[RoMatchSegment] [453]: endPoint.x = 225.132832, endPoint.y = -4.204563
[RoMatchSegment] [460]: orthogonalDistance = 1.071670
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.509374, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594229, atan2(endPoint.x, endPoint.y) = 1.589470
[RoMatchSegment] [468]: Alpha = 0.037989, Beta = 0.004759
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 1
[calcRelativePosition] [336]: x = -40.645373
[calcRelativePosition] [337]: y = -0.119346
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 2
[calcRelativeDirection] [270]: roadSegClass = 1, relativePos = 2, RvSpeed = 60.000000, headingDelta = 226.000000
[calcRelativeDirection] [322]: realativeDirection = 0
[calcRvRelevancy] [228]: relativePos = 2, RelativeDir = 0, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 3
[calcRvRelevancy] [262]: RvRelevancy = 0
[calcDistanceToEvent] [222]: dis2Event = 40.747261
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 1
[getPsdRoLocation] [661]: relativePos = 2
[getPsdRoLocation] [662]: RelativeDir = 0
[getPsdRoLocation] [663]: RvRelevancy = 0
[getPsdRoLocation] [664]: dis2Event = 40.747261
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357717, RoPos.Long = 116.815133
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -116.862700, startPoint.y = 4.213521
[RoMatchSegment] [453]: endPoint.x = 136.433608, endPoint.y = -1.723121
[RoMatchSegment] [460]: orthogonalDistance = 1.474142
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.534757, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.583425
[RoMatchSegment] [468]: Alpha = 0.012606, Beta = 0.010804
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = 48.053851
[calcRelativePosition] [337]: y = -2.600798
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 1, RvSpeed = 60.000000, headingDelta = 90.000000
[calcRelativeDirection] [322]: realativeDirection = 0
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 0, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 3
[calcRvRelevancy] [262]: RvRelevancy = 0
[calcDistanceToEvent] [222]: dis2Event = 48.244312
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 3
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 0
[getPsdRoLocation] [663]: RvRelevancy = 0
[getPsdRoLocation] [664]: dis2Event = 48.244312
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357717, RoPos.Long = 116.815133
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -116.862700, startPoint.y = 4.213521
[RoMatchSegment] [453]: endPoint.x = 136.433608, endPoint.y = -1.723121
[RoMatchSegment] [460]: orthogonalDistance = 1.474142
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.534757, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.583425
[RoMatchSegment] [468]: Alpha = 0.012606, Beta = 0.010804
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = 48.053851
[calcRelativePosition] [337]: y = -2.600798
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 1, RvSpeed = 60.000000, headingDelta = 44.000000
[calcRelativeDirection] [322]: realativeDirection = 3
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 3, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 3
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 48.244312
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 3
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 3
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 48.244312
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357717, RoPos.Long = 116.815133
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -116.862700, startPoint.y = 4.213521
[RoMatchSegment] [453]: endPoint.x = 136.433608, endPoint.y = -1.723121
[RoMatchSegment] [460]: orthogonalDistance = 1.474142
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.534757, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.583425
[RoMatchSegment] [468]: Alpha = 0.012606, Beta = 0.010804
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = 48.053851
[calcRelativePosition] [337]: y = -2.600798
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 1, RvSpeed = 60.000000, headingDelta = 136.000000
[calcRelativeDirection] [322]: realativeDirection = 2
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 2, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 3
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 48.244312
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 3
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 2
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 48.244312
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357717, RoPos.Long = 116.815133
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -116.862700, startPoint.y = 4.213521
[RoMatchSegment] [453]: endPoint.x = 136.433608, endPoint.y = -1.723121
[RoMatchSegment] [460]: orthogonalDistance = 1.474142
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.534757, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.583425
[RoMatchSegment] [468]: Alpha = 0.012606, Beta = 0.010804
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = 48.053851
[calcRelativePosition] [337]: y = -2.600798
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 1, RvSpeed = 60.000000, headingDelta = 270.000000
[calcRelativeDirection] [322]: realativeDirection = 0
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 0, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 3
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 48.244312
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 3
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 0
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 48.244312
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357717, RoPos.Long = 116.815133
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -116.862700, startPoint.y = 4.213521
[RoMatchSegment] [453]: endPoint.x = 136.433608, endPoint.y = -1.723121
[RoMatchSegment] [460]: orthogonalDistance = 1.474142
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.534757, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.583425
[RoMatchSegment] [468]: Alpha = 0.012606, Beta = 0.010804
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = 48.053851
[calcRelativePosition] [337]: y = -2.600798
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 1, RvSpeed = 60.000000, headingDelta = 224.000000
[calcRelativeDirection] [322]: realativeDirection = 2
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 2, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 3
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 48.244312
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 3
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 2
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 48.244312
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357717, RoPos.Long = 116.815133
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -116.862700, startPoint.y = 4.213521
[RoMatchSegment] [453]: endPoint.x = 136.433608, endPoint.y = -1.723121
[RoMatchSegment] [460]: orthogonalDistance = 1.474142
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.534757, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.583425
[RoMatchSegment] [468]: Alpha = 0.012606, Beta = 0.010804
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = 48.053851
[calcRelativePosition] [337]: y = -2.600798
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 1, RvSpeed = 60.000000, headingDelta = 316.000000
[calcRelativeDirection] [322]: realativeDirection = 3
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 3, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 3
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 48.244312
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 3
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 3
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 48.244312
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357715, RoPos.Long = 116.815083
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -117.134434, startPoint.y = -0.030922
[RoMatchSegment] [453]: endPoint.x = 136.161875, endPoint.y = -5.967563
[RoMatchSegment] [460]: orthogonalDistance = 2.775502
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.571060, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.614595
[RoMatchSegment] [468]: Alpha = 0.023697, Beta = 0.020366
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = 48.325585
[calcRelativePosition] [337]: y = 1.643617
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 1, RvSpeed = 60.000000, headingDelta = 90.000000
[calcRelativeDirection] [322]: realativeDirection = 0
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 0, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 3
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 48.474178
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 3
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 0
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 48.474178
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357715, RoPos.Long = 116.815083
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -117.134434, startPoint.y = -0.030922
[RoMatchSegment] [453]: endPoint.x = 136.161875, endPoint.y = -5.967563
[RoMatchSegment] [460]: orthogonalDistance = 2.775502
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.571060, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.614595
[RoMatchSegment] [468]: Alpha = 0.023697, Beta = 0.020366
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = 48.325585
[calcRelativePosition] [337]: y = 1.643617
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 1, RvSpeed = 60.000000, headingDelta = 44.000000
[calcRelativeDirection] [322]: realativeDirection = 3
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 3, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 3
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 48.474178
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 3
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 3
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 48.474178
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357715, RoPos.Long = 116.815083
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -117.134434, startPoint.y = -0.030922
[RoMatchSegment] [453]: endPoint.x = 136.161875, endPoint.y = -5.967563
[RoMatchSegment] [460]: orthogonalDistance = 2.775502
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.571060, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.614595
[RoMatchSegment] [468]: Alpha = 0.023697, Beta = 0.020366
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = 48.325585
[calcRelativePosition] [337]: y = 1.643617
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 1, RvSpeed = 60.000000, headingDelta = 136.000000
[calcRelativeDirection] [322]: realativeDirection = 2
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 2, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 3
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 48.474178
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 3
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 2
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 48.474178
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357715, RoPos.Long = 116.815083
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -117.134434, startPoint.y = -0.030922
[RoMatchSegment] [453]: endPoint.x = 136.161875, endPoint.y = -5.967563
[RoMatchSegment] [460]: orthogonalDistance = 2.775502
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.571060, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.614595
[RoMatchSegment] [468]: Alpha = 0.023697, Beta = 0.020366
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = 48.325585
[calcRelativePosition] [337]: y = 1.643617
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 1, RvSpeed = 60.000000, headingDelta = 316.000000
[calcRelativeDirection] [322]: realativeDirection = 3
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 3, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 3
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 48.474178
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 3
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 3
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 48.474178
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357890, RoPos.Long = 116.815114
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -97.672704, startPoint.y = 2.375009
[RoMatchSegment] [453]: endPoint.x = 155.623604, endPoint.y = -3.561624
[RoMatchSegment] [460]: orthogonalDistance = 0.085781
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.546485, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.593678
[RoMatchSegment] [468]: Alpha = 0.000878, Beta = 0.000551
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 1
[calcRelativePosition] [336]: x = 28.863855
[calcRelativePosition] [337]: y = -0.762300
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 1, relativePos = 1, RvSpeed = 60.000000, headingDelta = 316.000000
[calcRelativeDirection] [322]: realativeDirection = 3
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 3, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 3
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 28.946175
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 1
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 3
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 28.946175
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357890, RoPos.Long = 116.815114
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -97.672704, startPoint.y = 2.375009
[RoMatchSegment] [453]: endPoint.x = 155.623604, endPoint.y = -3.561624
[RoMatchSegment] [460]: orthogonalDistance = 0.085781
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.546485, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.593678
[RoMatchSegment] [468]: Alpha = 0.000878, Beta = 0.000551
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 1
[calcRelativePosition] [336]: x = 28.863855
[calcRelativePosition] [337]: y = -0.762300
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 1, relativePos = 1, RvSpeed = 60.000000, headingDelta = 316.000000
[calcRelativeDirection] [322]: realativeDirection = 3
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 3, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 3
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 28.946175
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 1
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 3
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 28.946175
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357890, RoPos.Long = 116.815114
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -97.672704, startPoint.y = 2.375009
[RoMatchSegment] [453]: endPoint.x = 155.623604, endPoint.y = -3.561624
[RoMatchSegment] [460]: orthogonalDistance = 0.085781
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.546485, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.593678
[RoMatchSegment] [468]: Alpha = 0.000878, Beta = 0.000551
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 1
[calcRelativePosition] [336]: x = 28.863855
[calcRelativePosition] [337]: y = -0.762300
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 1, relativePos = 1, RvSpeed = 60.000000, headingDelta = 316.000000
[calcRelativeDirection] [322]: realativeDirection = 3
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 3, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 3
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 28.946175
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 1
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 3
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 28.946175
[       OK ] PsdLocationTest.RelativePositionAndRelativeDirection (1 ms)
[ RUN      ] PsdLocationTest.calcRvRelevancy
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.358516, RoPos.Long = 116.815116
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -28.163476, startPoint.y = 1.732043
[RoMatchSegment] [453]: endPoint.x = 225.132832, endPoint.y = -4.204563
[RoMatchSegment] [460]: orthogonalDistance = 1.071670
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.509374, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594229, atan2(endPoint.x, endPoint.y) = 1.589470
[RoMatchSegment] [468]: Alpha = 0.037989, Beta = 0.004759
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = -40.645373
[calcRelativePosition] [337]: y = -0.119346
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 2
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 2, RvSpeed = 0.000000, headingDelta = 0.000000
[calcRelativeDirection] [322]: realativeDirection = 1
[calcRvRelevancy] [228]: relativePos = 2, RelativeDir = 1, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = -2136443464
[calcRvRelevancy] [262]: RvRelevancy = 0
[calcDistanceToEvent] [222]: dis2Event = 40.747261
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 3
[getPsdRoLocation] [661]: relativePos = 2
[getPsdRoLocation] [662]: RelativeDir = 1
[getPsdRoLocation] [663]: RvRelevancy = 0
[getPsdRoLocation] [664]: dis2Event = 40.747261
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.358516, RoPos.Long = 116.815116
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -28.163476, startPoint.y = 1.732043
[RoMatchSegment] [453]: endPoint.x = 225.132832, endPoint.y = -4.204563
[RoMatchSegment] [460]: orthogonalDistance = 1.071670
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.509374, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594229, atan2(endPoint.x, endPoint.y) = 1.589470
[RoMatchSegment] [468]: Alpha = 0.037989, Beta = 0.004759
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 0
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = -40.645373
[calcRelativePosition] [337]: y = -0.119346
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 2
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 2, RvSpeed = 0.000000, headingDelta = 0.000000
[calcRelativeDirection] [322]: realativeDirection = 1
[calcRvRelevancy] [228]: relativePos = 2, RelativeDir = 1, mRoMatchedNode->MapData.mpp = 0
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = -2136443464
[calcRvRelevancy] [262]: RvRelevancy = 0
[calcDistanceToEvent] [222]: dis2Event = 40.747261
[getPsdRoLocation] [659]: MPP = 0
[getPsdRoLocation] [660]: roadSegClass = 3
[getPsdRoLocation] [661]: relativePos = 2
[getPsdRoLocation] [662]: RelativeDir = 1
[getPsdRoLocation] [663]: RvRelevancy = 0
[getPsdRoLocation] [664]: dis2Event = 40.747261
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357890, RoPos.Long = 116.815114
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -97.672704, startPoint.y = 2.375009
[RoMatchSegment] [453]: endPoint.x = 155.623604, endPoint.y = -3.561624
[RoMatchSegment] [460]: orthogonalDistance = 0.085781
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.546485, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.593678
[RoMatchSegment] [468]: Alpha = 0.000878, Beta = 0.000551
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = 28.863855
[calcRelativePosition] [337]: y = -0.762300
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 1, RvSpeed = 0.000000, headingDelta = 0.000000
[calcRelativeDirection] [322]: realativeDirection = 3
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 3, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = -2136443464
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 28.946175
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 3
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 3
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 28.946175
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357890, RoPos.Long = 116.815114
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -97.672704, startPoint.y = 2.375009
[RoMatchSegment] [453]: endPoint.x = 155.623604, endPoint.y = -3.561624
[RoMatchSegment] [460]: orthogonalDistance = 0.085781
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.546485, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.593678
[RoMatchSegment] [468]: Alpha = 0.000878, Beta = 0.000551
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 0
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = 28.863855
[calcRelativePosition] [337]: y = -0.762300
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 1, RvSpeed = 0.000000, headingDelta = 0.000000
[calcRelativeDirection] [322]: realativeDirection = 3
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 3, mRoMatchedNode->MapData.mpp = 0
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = -2136443464
[calcRvRelevancy] [262]: RvRelevancy = 0
[calcDistanceToEvent] [222]: dis2Event = 28.946175
[getPsdRoLocation] [659]: MPP = 0
[getPsdRoLocation] [660]: roadSegClass = 3
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 3
[getPsdRoLocation] [663]: RvRelevancy = 0
[getPsdRoLocation] [664]: dis2Event = 28.946175
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357890, RoPos.Long = 116.815114
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -97.672704, startPoint.y = 2.375009
[RoMatchSegment] [453]: endPoint.x = 155.623604, endPoint.y = -3.561624
[RoMatchSegment] [460]: orthogonalDistance = 0.085781
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.546485, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.593678
[RoMatchSegment] [468]: Alpha = 0.000878, Beta = 0.000551
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = 28.863855
[calcRelativePosition] [337]: y = -0.762300
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 1, RvSpeed = 0.000000, headingDelta = 180.000000
[calcRelativeDirection] [322]: realativeDirection = 2
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 2, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 1
[calcRvRelevancy] [262]: RvRelevancy = 0
[calcDistanceToEvent] [222]: dis2Event = 28.946175
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 3
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 2
[getPsdRoLocation] [663]: RvRelevancy = 0
[getPsdRoLocation] [664]: dis2Event = 28.946175
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357890, RoPos.Long = 116.815114
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -97.672704, startPoint.y = 2.375009
[RoMatchSegment] [453]: endPoint.x = 155.623604, endPoint.y = -3.561624
[RoMatchSegment] [460]: orthogonalDistance = 0.085781
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.546485, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.593678
[RoMatchSegment] [468]: Alpha = 0.000878, Beta = 0.000551
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = 28.863855
[calcRelativePosition] [337]: y = -0.762300
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 1, RvSpeed = 0.000000, headingDelta = 180.000000
[calcRelativeDirection] [322]: realativeDirection = 2
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 2, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 2
[calcRvRelevancy] [262]: RvRelevancy = 0
[calcDistanceToEvent] [222]: dis2Event = 28.946175
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 3
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 2
[getPsdRoLocation] [663]: RvRelevancy = 0
[getPsdRoLocation] [664]: dis2Event = 28.946175
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357890, RoPos.Long = 116.815114
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -97.672704, startPoint.y = 2.375009
[RoMatchSegment] [453]: endPoint.x = 155.623604, endPoint.y = -3.561624
[RoMatchSegment] [460]: orthogonalDistance = 0.085781
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.546485, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.593678
[RoMatchSegment] [468]: Alpha = 0.000878, Beta = 0.000551
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = 28.863855
[calcRelativePosition] [337]: y = -0.762300
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 1, RvSpeed = 0.000000, headingDelta = 30.000000
[calcRelativeDirection] [322]: realativeDirection = 3
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 3, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 2
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 28.946175
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 3
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 3
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 28.946175
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357890, RoPos.Long = 116.815114
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -97.672704, startPoint.y = 2.375009
[RoMatchSegment] [453]: endPoint.x = 155.623604, endPoint.y = -3.561624
[RoMatchSegment] [460]: orthogonalDistance = 0.085781
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.546485, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.593678
[RoMatchSegment] [468]: Alpha = 0.000878, Beta = 0.000551
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = 28.863855
[calcRelativePosition] [337]: y = -0.762300
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 1, RvSpeed = 0.000000, headingDelta = 180.000000
[calcRelativeDirection] [322]: realativeDirection = 2
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 2, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 3
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 28.946175
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 3
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 2
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 28.946175
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357890, RoPos.Long = 116.815114
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -97.672704, startPoint.y = 2.375009
[RoMatchSegment] [453]: endPoint.x = 155.623604, endPoint.y = -3.561624
[RoMatchSegment] [460]: orthogonalDistance = 0.085781
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.546485, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.593678
[RoMatchSegment] [468]: Alpha = 0.000878, Beta = 0.000551
[RoMatchSegment] [476]: current tree Id = 3
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b4c0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = 28.863855
[calcRelativePosition] [337]: y = -0.762300
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 1, RvSpeed = 0.000000, headingDelta = 180.000000
[calcRelativeDirection] [322]: realativeDirection = 2
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 2, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 3
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 28.946175
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 3
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 2
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 28.946175
[       OK ] PsdLocationTest.calcRvRelevancy (0 ms)
[ RUN      ] PsdLocationTest.calcDistanceToEvent
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[TestBody] [3267]: MapData_X.preSegmentId = 3
[TestBody] [3267]: MapData_X.preSegmentId = 2
[TestBody] [3267]: MapData_X.preSegmentId = 10
[TestBody] [3267]: MapData_X.preSegmentId = 4
[TestBody] [3267]: MapData_X.preSegmentId = 5
[TestBody] [3267]: MapData_X.preSegmentId = 6
[TestBody] [3267]: MapData_X.preSegmentId = 7
[TestBody] [3267]: MapData_X.preSegmentId = 8
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[insertNode] [1240]: (*it)->preSegmentId = 3's segIsInTree = 1
[findNodeById] [893]: result = (nil)
[insertNode] [1288]: tempNode is = (nil), preSegmentId = 3, prevSegmentId = 2, segIsInTree = 1
[insertNode] [1321]: goto check the next segment info from vPsdMap
[insertNode] [1240]: (*it)->preSegmentId = 2's segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8baf0
[insertParentNode] [1202]: parentNode = 0x563580a8baf0
[calcRootOrParentSegmentCoordinate] [424]: --------------------------Is rootSegment or parentSegment--------------------------
[calcStraightXYOffset] [230]: Length = -176.000000, BranchAngle = -0.370000
[calcStraightXYOffset] [232]: BranchAngleRad = -0.006458
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -175.996330
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 1.136551
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -175.996330
[coordinateSystemRotates] [209]: dY = 1.136551
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 175.984297
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.013290
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -2.058002
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -1.136473
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 175.971007
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -3.194475
[coordinateSystemRotates] [221]: coordinate system rotated X = 175.971007
[coordinateSystemRotates] [222]: coordinate system rotated Y = -3.194475
[calcRootOrParentSegmentCoordinate] [458]: accumulateXY.distanceX = 244.966289, accumulateXY.distanceY = -4.001323
[calcDestination] [78]: destinationCoord latitude = 40.360351  destinationCoord longitude = 116.815062
[displayNodeCoordinate] [140]: 2's startCoordinate: latitude = 40.360351, longitude = 116.815062
[displayNodeCoordinate] [141]: 2's endCoordinate: latitude = 40.358770, longitude = 116.815099
[findNodeById] [893]: result = (nil)
[findNodeById] [893]: result = (nil)
[insertNode] [1288]: tempNode is = (nil), preSegmentId = 2, prevSegmentId = 10, segIsInTree = 1
[insertNode] [1321]: goto check the next segment info from vPsdMap
[insertNode] [1240]: (*it)->preSegmentId = 10's segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8bdd0
[insertRootNode] [1221]: rootNode = 0x563580a8bdd0
[calcRootOrParentSegmentCoordinate] [424]: --------------------------Is rootSegment or parentSegment--------------------------
[calcStraightXYOffset] [230]: Length = -200.000000, BranchAngle = -0.010000
[calcStraightXYOffset] [232]: BranchAngleRad = -0.000175
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -199.999997
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.034907
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.700000, accumulateBranchAngleRad = 3.136357
[coordinateSystemRotates] [208]: dX = -199.999997
[coordinateSystemRotates] [209]: dY = 0.034907
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999986
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.005236
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 199.997255
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000183
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -1.047193
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.034906
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 199.997073
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -1.082099
[coordinateSystemRotates] [221]: coordinate system rotated X = 199.997073
[coordinateSystemRotates] [222]: coordinate system rotated Y = -1.082099
[calcRootOrParentSegmentCoordinate] [458]: accumulateXY.distanceX = 444.963362, accumulateXY.distanceY = -5.083421
[calcDestination] [78]: destinationCoord latitude = 40.362147  destinationCoord longitude = 116.815049
[displayNodeCoordinate] [140]: 10's startCoordinate: latitude = 40.362147, longitude = 116.815049
[displayNodeCoordinate] [141]: 10's endCoordinate: latitude = 40.360351, longitude = 116.815062
[insertNode] [1288]: tempNode is = 0x563580a8bdd0, preSegmentId = 10, prevSegmentId = 10, segIsInTree = 1
[insertNode] [1315]: some nodes are already in tree
[insertNode] [1240]: (*it)->preSegmentId = 4's segIsInTree = 0
[findNodeById] [888]: result = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[insertNode] [1288]: tempNode is = 0x563580a8b4c0, preSegmentId = 4, prevSegmentId = 3, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8b5b0
[insertChildNode] [1184]: childNode = 0x563580a8b5b0
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 78.000000, BranchAngle = 0.010000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000175
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 77.999999
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.013614
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 77.999999
[coordinateSystemRotates] [209]: dY = 0.013614
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -77.994666
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000159
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 0.912088
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.013613
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -77.994825
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 0.898476
[coordinateSystemRotates] [221]: coordinate system rotated X = -77.994825
[coordinateSystemRotates] [222]: coordinate system rotated Y = 0.898476
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -262.982177, accumulateXY.distanceY = 3.061762
[calcDestination] [78]: destinationCoord latitude = 40.355788  destinationCoord longitude = 116.815145
[insertNode] [1310]: childNode's preSegmentId = 4
[displayNodeCoordinate] [140]: 4's startCoordinate: latitude = 40.356488, longitude = 116.815135
[displayNodeCoordinate] [141]: 4's endCoordinate: latitude = 40.355788, longitude = 116.815145
[insertNode] [1240]: (*it)->preSegmentId = 5's segIsInTree = 0
[findNodeById] [888]: result = 0x563580a8b5b0
[findNodeById] [888]: result = 0x563580a8b5b0
[findNodeById] [888]: result = 0x563580a8b5b0
[insertNode] [1288]: tempNode is = 0x563580a8b5b0, preSegmentId = 5, prevSegmentId = 4, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8bec0
[insertChildNode] [1184]: childNode = 0x563580a8bec0
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 254.000000, BranchAngle = 90.060000
[calcStraightXYOffset] [232]: BranchAngleRad = 1.571844
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -0.265988
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 253.999861
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.340000, accumulateBranchAngleRad = 3.130073
[coordinateSystemRotates] [208]: dX = -0.265988
[coordinateSystemRotates] [209]: dY = 253.999861
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999934
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011519
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 0.265970
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 2.925804
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.003064
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -253.983009
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -2.659833
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -253.986073
[coordinateSystemRotates] [221]: coordinate system rotated X = -2.659833
[coordinateSystemRotates] [222]: coordinate system rotated Y = -253.986073
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -265.642010, accumulateXY.distanceY = -250.924311
[calcDestination] [78]: destinationCoord latitude = 40.355764  destinationCoord longitude = 116.812151
[insertNode] [1310]: childNode's preSegmentId = 5
[displayNodeCoordinate] [140]: 5's startCoordinate: latitude = 40.355788, longitude = 116.815145
[displayNodeCoordinate] [141]: 5's endCoordinate: latitude = 40.355764, longitude = 116.812151
[insertNode] [1240]: (*it)->preSegmentId = 6's segIsInTree = 0
[findNodeById] [888]: result = 0x563580a8b5b0
[findNodeById] [888]: result = 0x563580a8b5b0
[findNodeById] [888]: result = 0x563580a8b5b0
[insertNode] [1288]: tempNode is = 0x563580a8b5b0, preSegmentId = 6, prevSegmentId = 4, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8b190
[insertChildNode] [1184]: childNode = 0x563580a8b190
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 254.000000, BranchAngle = 0.020000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000349
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 253.999985
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.088663
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.340000, accumulateBranchAngleRad = 3.130073
[coordinateSystemRotates] [208]: dX = 253.999985
[coordinateSystemRotates] [209]: dY = 0.088663
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999934
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011519
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -253.983133
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.001021
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.925805
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.088657
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -253.984154
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.837148
[coordinateSystemRotates] [221]: coordinate system rotated X = -253.984154
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.837148
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -516.966331, accumulateXY.distanceY = 5.898910
[calcDestination] [78]: destinationCoord latitude = 40.353506  destinationCoord longitude = 116.815179
[insertNode] [1310]: childNode's preSegmentId = 6
[displayNodeCoordinate] [140]: 6's startCoordinate: latitude = 40.355788, longitude = 116.815145
[displayNodeCoordinate] [141]: 6's endCoordinate: latitude = 40.353506, longitude = 116.815179
[insertNode] [1240]: (*it)->preSegmentId = 7's segIsInTree = 0
[findNodeById] [888]: result = 0x563580a8b5b0
[findNodeById] [888]: result = 0x563580a8b5b0
[findNodeById] [888]: result = 0x563580a8b5b0
[insertNode] [1288]: tempNode is = 0x563580a8b5b0, preSegmentId = 7, prevSegmentId = 4, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8bc10
[insertChildNode] [1184]: childNode = 0x563580a8bc10
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 254.000000, BranchAngle = -90.050000
[calcStraightXYOffset] [232]: BranchAngleRad = -1.571669
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -0.221657
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = -253.999903
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.340000, accumulateBranchAngleRad = 3.130073
[coordinateSystemRotates] [208]: dX = -0.221657
[coordinateSystemRotates] [209]: dY = -253.999903
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999934
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011519
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 0.221642
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -2.925804
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.002553
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 253.983052
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 3.147446
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 253.980498
[coordinateSystemRotates] [221]: coordinate system rotated X = 3.147446
[coordinateSystemRotates] [222]: coordinate system rotated Y = 253.980498
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -259.834730, accumulateXY.distanceY = 257.042260
[calcDestination] [78]: destinationCoord latitude = 40.355816  destinationCoord longitude = 116.818139
[insertNode] [1310]: childNode's preSegmentId = 7
[displayNodeCoordinate] [140]: 7's startCoordinate: latitude = 40.355788, longitude = 116.815145
[displayNodeCoordinate] [141]: 7's endCoordinate: latitude = 40.355816, longitude = 116.818139
[insertNode] [1240]: (*it)->preSegmentId = 8's segIsInTree = 0
[findNodeById] [893]: result = (nil)
[findNodeById] [888]: result = 0x563580a8b190
[findNodeById] [888]: result = 0x563580a8b190
[findNodeById] [888]: result = 0x563580a8b190
[findNodeById] [888]: result = 0x563580a8b190
[insertNode] [1288]: tempNode is = 0x563580a8b190, preSegmentId = 8, prevSegmentId = 6, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8bfb0
[insertChildNode] [1184]: childNode = 0x563580a8bfb0
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 103.000000, BranchAngle = 0.010000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000175
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 102.999998
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.017977
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.360000, accumulateBranchAngleRad = 3.130423
[coordinateSystemRotates] [208]: dX = 102.999998
[coordinateSystemRotates] [209]: dY = 0.017977
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999938
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011170
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -102.993573
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000201
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 1.150497
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.017976
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -102.993774
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 1.132521
[coordinateSystemRotates] [221]: coordinate system rotated X = -102.993774
[coordinateSystemRotates] [222]: coordinate system rotated Y = 1.132521
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -619.960104, accumulateXY.distanceY = 7.031431
[calcDestination] [78]: destinationCoord latitude = 40.352581  destinationCoord longitude = 116.815192
[insertNode] [1310]: childNode's preSegmentId = 8
[displayNodeCoordinate] [140]: 8's startCoordinate: latitude = 40.353506, longitude = 116.815179
[displayNodeCoordinate] [141]: 8's endCoordinate: latitude = 40.352581, longitude = 116.815192
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.361367, RoPos.Long = 116.815071
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = 288.349662, startPoint.y = -5.792048
[RoMatchSegment] [453]: endPoint.x = 541.645973, endPoint.y = -11.728529
[RoMatchSegment] [460]: orthogonalDistance = 0.965710
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = 1.590881, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547364
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594229, atan2(endPoint.x, endPoint.y) = 1.592446
[RoMatchSegment] [468]: Alpha = 3.138244, Beta = 0.001783
[RoMatchSegment] [432]: 2 segment
[RoMatchSegment] [452]: startPoint.x = 112.867423, startPoint.y = -0.540881
[RoMatchSegment] [453]: endPoint.x = 288.349662, endPoint.y = -5.792048
[RoMatchSegment] [460]: orthogonalDistance = 2.835317
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = 1.575588, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.540881
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.600712, atan2(endPoint.x, endPoint.y) = 1.590881
[RoMatchSegment] [468]: Alpha = 3.116470, Beta = 0.009831
[RoMatchSegment] [432]: 10 segment
[RoMatchSegment] [452]: startPoint.x = -86.604049, startPoint.y = 2.875429
[RoMatchSegment] [453]: endPoint.x = 112.867423, endPoint.y = -0.540881
[RoMatchSegment] [460]: orthogonalDistance = 1.391974
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.537607, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.553671
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.587921, atan2(endPoint.x, endPoint.y) = 1.575588
[RoMatchSegment] [468]: Alpha = 0.016065, Beta = 0.012333
[RoMatchSegment] [476]: current tree Id = 10
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 10
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8bdd0
[getMPP] [565]: isMPP = 1
[findNodeById] [888]: result = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = -357.158509
[calcRelativePosition] [337]: y = 7.404867
[calcRelativePosition] [338]: accumulateBranchAngle = 179.710000
[calcRelativePosition] [371]: RelativePosition = 2
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 2, RvSpeed = 60.000000, headingDelta = 0.000000
[calcRelativeDirection] [322]: realativeDirection = 6
[calcRvRelevancy] [228]: relativePos = 2, RelativeDir = 6, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 10, curSegmentId = 3, structSeparate = 0
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [186]: Ro2EndCoordDis = 113.151184, HvDrivedLength = 69.000000
[calcDistanceToEvent] [222]: dis2Event = 358.151184
[getPsdRoLocation] [638]: actual distance between RO and HV over the  pPsdValidDistance
[getPsdRoLocation] [659]: MPP = 0
[getPsdRoLocation] [660]: roadSegClass = 0
[getPsdRoLocation] [661]: relativePos = 0
[getPsdRoLocation] [662]: RelativeDir = 0
[getPsdRoLocation] [663]: RvRelevancy = 0
[getPsdRoLocation] [664]: dis2Event = 0.000000
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.359671, RoPos.Long = 116.815067
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = 100.032064, startPoint.y = -3.929677
[RoMatchSegment] [453]: endPoint.x = 353.328374, endPoint.y = -9.866233
[RoMatchSegment] [460]: orthogonalDistance = 1.584771
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = 1.610060, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594229, atan2(endPoint.x, endPoint.y) = 1.598713
[RoMatchSegment] [468]: Alpha = 3.157424, Beta = 0.004484
[RoMatchSegment] [432]: 2 segment
[RoMatchSegment] [452]: startPoint.x = -75.450175, startPoint.y = 1.321569
[RoMatchSegment] [453]: endPoint.x = 100.032064, endPoint.y = -3.929677
[RoMatchSegment] [460]: orthogonalDistance = 0.935833
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.553282, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.540881
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.600712, atan2(endPoint.x, endPoint.y) = 1.610060
[RoMatchSegment] [468]: Alpha = 0.012402, Beta = 0.009348
[RoMatchSegment] [476]: current tree Id = 10
[findNodeById] [888]: result = 0x563580a8baf0
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 2
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8baf0
[findNodeById] [888]: result = 0x563580a8baf0
[getMPP] [565]: isMPP = 0
[findNodeById] [888]: result = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = -168.840911
[calcRelativePosition] [337]: y = 5.542444
[calcRelativePosition] [338]: accumulateBranchAngle = 179.700000
[calcRelativePosition] [371]: RelativePosition = 2
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 2, RvSpeed = 60.000000, headingDelta = 0.000000
[calcRelativeDirection] [322]: realativeDirection = 6
[calcRvRelevancy] [228]: relativePos = 2, RelativeDir = 6, mRoMatchedNode->MapData.mpp = 0
[calcRvRelevancy] [229]: mRoMatchedSegId = 2, curSegmentId = 3, structSeparate = 19
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [195]: Ro2EndCoordDis = 100.359505, HvDrivedLength = 69.000000
[calcDistanceToEvent] [222]: dis2Event = 169.359497
[getPsdRoLocation] [659]: MPP = 0
[getPsdRoLocation] [660]: roadSegClass = 3
[getPsdRoLocation] [661]: relativePos = 2
[getPsdRoLocation] [662]: RelativeDir = 6
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 169.359497
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.353726, RoPos.Long = 116.815168
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -559.964159, startPoint.y = 12.368932
[RoMatchSegment] [453]: endPoint.x = -306.667856, endPoint.y = 6.432115
[RoMatchSegment] [460]: orthogonalDistance = 0.755428
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.548711, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547362
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = -1.549825
[RoMatchSegment] [468]: Alpha = 0.001349, Beta = 3.144055
[RoMatchSegment] [432]: 2 segment
[RoMatchSegment] [452]: startPoint.x = -735.446390, startPoint.y = 17.620460
[RoMatchSegment] [453]: endPoint.x = -559.964159, endPoint.y = 12.368932
[RoMatchSegment] [460]: orthogonalDistance = 4.386739
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.546842, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.540879
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.600714, atan2(endPoint.x, endPoint.y) = -1.548711
[RoMatchSegment] [468]: Alpha = 0.005963, Beta = 3.149425
[RoMatchSegment] [432]: 10 segment
[RoMatchSegment] [452]: startPoint.x = -934.917857, startPoint.y = 21.036892
[RoMatchSegment] [453]: endPoint.x = -735.446390, endPoint.y = 17.620460
[RoMatchSegment] [460]: orthogonalDistance = 5.023419
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.548299, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.553671
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.587922, atan2(endPoint.x, endPoint.y) = -1.546842
[RoMatchSegment] [468]: Alpha = 0.005372, Beta = 3.134764
[RoMatchSegment] [432]: 4 segment
[RoMatchSegment] [452]: startPoint.x = -306.667856, startPoint.y = 6.432115
[RoMatchSegment] [453]: endPoint.x = -228.883654, endPoint.y = 4.622629
[RoMatchSegment] [460]: orthogonalDistance = 0.701681
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.549825, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547538
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594055, atan2(endPoint.x, endPoint.y) = -1.550603
[RoMatchSegment] [468]: Alpha = 0.002288, Beta = 3.144658
[RoMatchSegment] [432]: 5 segment
[RoMatchSegment] [452]: startPoint.x = -228.883654, startPoint.y = 4.622629
[RoMatchSegment] [453]: endPoint.x = -223.251934, endPoint.y = 258.934107
[RoMatchSegment] [460]: orthogonalDistance = 228.929896
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.550603, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -3.119451
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 0.022141, atan2(endPoint.x, endPoint.y) = -0.711532
[RoMatchSegment] [468]: Alpha = 1.568849, Beta = 0.733673
[RoMatchSegment] [432]: 6 segment
[RoMatchSegment] [452]: startPoint.x = -228.883654, startPoint.y = 4.622629
[RoMatchSegment] [453]: endPoint.x = 24.415594, endPoint.y = -1.181032
[RoMatchSegment] [460]: orthogonalDistance = 0.621452
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.550603, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547888
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.593705, atan2(endPoint.x, endPoint.y) = 1.619131
[RoMatchSegment] [468]: Alpha = 0.002715, Beta = 0.025426
[RoMatchSegment] [476]: current tree Id = 10
[findNodeById] [893]: result = (nil)
[findNodeById] [888]: result = 0x563580a8b190
[findNodeById] [888]: result = 0x563580a8b190
[findNodeById] [888]: result = 0x563580a8b190
[findNodeById] [888]: result = 0x563580a8b190
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 6
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b190
[findNodeById] [893]: result = (nil)
[findNodeById] [888]: result = 0x563580a8b190
[findNodeById] [888]: result = 0x563580a8b190
[findNodeById] [888]: result = 0x563580a8b190
[findNodeById] [888]: result = 0x563580a8b190
[getMPP] [565]: isMPP = 1
[findNodeById] [888]: result = 0x563580a8b4c0
[findNodeById] [888]: result = 0x563580a8b4c0
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = 491.155318
[calcRelativePosition] [337]: y = -10.755847
[calcRelativePosition] [338]: accumulateBranchAngle = 179.360000
[calcRelativePosition] [371]: RelativePosition = 0
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 0, RvSpeed = 60.000000, headingDelta = 0.000000
[calcRelativeDirection] [322]: realativeDirection = 0
[calcRvRelevancy] [228]: relativePos = 0, RelativeDir = 0, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 6, curSegmentId = 3, structSeparate = 807228352
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [209]: tempNodeId is = 6
[calcDistanceToEvent] [214]: ChildsTotalLength = 78.000000, tempNodeId is = 4
[calcDistanceToEvent] [219]: Ro2StartCoordDis = 229.503479, ChildsTotalLength = 78.000000, curRemainLength = 185
[calcDistanceToEvent] [222]: dis2Event = 492.503479
[getPsdRoLocation] [638]: actual distance between RO and HV over the  pPsdValidDistance
[getPsdRoLocation] [659]: MPP = 0
[getPsdRoLocation] [660]: roadSegClass = 0
[getPsdRoLocation] [661]: relativePos = 0
[getPsdRoLocation] [662]: RelativeDir = 0
[getPsdRoLocation] [663]: RvRelevancy = 0
[getPsdRoLocation] [664]: dis2Event = 0.000000
[       OK ] PsdLocationTest.calcDistanceToEvent (0 ms)
[ RUN      ] PsdLocationTest.calcRoDis2Intersection_1
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8bdd0
[clearNodeOutTree] [990]: Node id = 10
[clearNodeOutTree] [993]: child id =  2
[clearNodeOutTree] [990]: Node id = 2
[clearNodeOutTree] [993]: child id =  3
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [993]: child id =  4
[clearNodeOutTree] [990]: Node id = 4
[clearNodeOutTree] [993]: child id =  5
[clearNodeOutTree] [990]: Node id = 5
[clearNodeOutTree] [996]: clear id = 5
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8bec0, Node->ParentNode = 0x563580a8b5b0
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[clearNodeOutTree] [993]: child id =  6
[clearNodeOutTree] [990]: Node id = 6
[clearNodeOutTree] [993]: child id =  8
[clearNodeOutTree] [990]: Node id = 8
[clearNodeOutTree] [996]: clear id = 8
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8bfb0, Node->ParentNode = 0x563580a8b190
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[clearNodeOutTree] [996]: clear id = 6
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b190, Node->ParentNode = 0x563580a8b5b0
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[clearNodeOutTree] [993]: child id =  7
[clearNodeOutTree] [990]: Node id = 7
[clearNodeOutTree] [996]: clear id = 7
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8bc10, Node->ParentNode = 0x563580a8b5b0
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[clearNodeOutTree] [996]: clear id = 4
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b5b0, Node->ParentNode = 0x563580a8b4c0
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = 0x563580a8baf0
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[clearNodeOutTree] [996]: clear id = 2
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8baf0, Node->ParentNode = 0x563580a8bdd0
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[clearNodeOutTree] [996]: clear id = 10
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8bdd0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[TestBody] [3427]: MapData_X.preSegmentId = 3
[TestBody] [3427]: MapData_X.preSegmentId = 2
[TestBody] [3427]: MapData_X.preSegmentId = 10
[TestBody] [3427]: MapData_X.preSegmentId = 4
[TestBody] [3427]: MapData_X.preSegmentId = 5
[TestBody] [3427]: MapData_X.preSegmentId = 6
[TestBody] [3427]: MapData_X.preSegmentId = 7
[TestBody] [3427]: MapData_X.preSegmentId = 8
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815109, latitude = 40.358150, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8baf0
[insertNodeInTree] [1328]: curNode = 0x563580a8baf0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8baf0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 185.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 185.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 185.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -184.987351
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.163286
[coordinateSystemRotates] [221]: coordinate system rotated X = -184.987351
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.163286
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -184.987351, disHv2EndAfterRotatingCoord.distanceY = 2.163286
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.356488  longitude = 116.815135
[calcStraightXYOffset] [230]: Length = 69.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -69.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -69.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 68.995282
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.806847
[coordinateSystemRotates] [221]: coordinate system rotated X = 68.995282
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.806847
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 68.995282, disHv2StartAfterRotatingCoord.distanceY = -0.806847
[calcDestination] [78]: destinationCoord latitude = 40.358770  destinationCoord longitude = 116.815099
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.358770  longitude = 116.815099
[displayNodeCoordinate] [140]: 3's startCoordinate: latitude = 40.358770, longitude = 116.815099
[displayNodeCoordinate] [141]: 3's endCoordinate: latitude = 40.356488, longitude = 116.815135
[insertNode] [1240]: (*it)->preSegmentId = 3's segIsInTree = 1
[findNodeById] [893]: result = (nil)
[insertNode] [1288]: tempNode is = (nil), preSegmentId = 3, prevSegmentId = 2, segIsInTree = 1
[insertNode] [1321]: goto check the next segment info from vPsdMap
[insertNode] [1240]: (*it)->preSegmentId = 2's segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertParentNode] [1202]: parentNode = 0x563580a8b4c0
[calcRootOrParentSegmentCoordinate] [424]: --------------------------Is rootSegment or parentSegment--------------------------
[calcStraightXYOffset] [230]: Length = -176.000000, BranchAngle = -0.370000
[calcStraightXYOffset] [232]: BranchAngleRad = -0.006458
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -175.996330
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 1.136551
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -175.996330
[coordinateSystemRotates] [209]: dY = 1.136551
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 175.984297
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.013290
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -2.058002
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -1.136473
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 175.971007
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -3.194475
[coordinateSystemRotates] [221]: coordinate system rotated X = 175.971007
[coordinateSystemRotates] [222]: coordinate system rotated Y = -3.194475
[calcRootOrParentSegmentCoordinate] [458]: accumulateXY.distanceX = 244.966289, accumulateXY.distanceY = -4.001323
[calcDestination] [78]: destinationCoord latitude = 40.360351  destinationCoord longitude = 116.815062
[displayNodeCoordinate] [140]: 2's startCoordinate: latitude = 40.360351, longitude = 116.815062
[displayNodeCoordinate] [141]: 2's endCoordinate: latitude = 40.358770, longitude = 116.815099
[findNodeById] [893]: result = (nil)
[findNodeById] [893]: result = (nil)
[insertNode] [1288]: tempNode is = (nil), preSegmentId = 2, prevSegmentId = 10, segIsInTree = 1
[insertNode] [1321]: goto check the next segment info from vPsdMap
[insertNode] [1240]: (*it)->preSegmentId = 10's segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8b5b0
[insertRootNode] [1221]: rootNode = 0x563580a8b5b0
[calcRootOrParentSegmentCoordinate] [424]: --------------------------Is rootSegment or parentSegment--------------------------
[calcStraightXYOffset] [230]: Length = -200.000000, BranchAngle = -0.010000
[calcStraightXYOffset] [232]: BranchAngleRad = -0.000175
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -199.999997
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.034907
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.700000, accumulateBranchAngleRad = 3.136357
[coordinateSystemRotates] [208]: dX = -199.999997
[coordinateSystemRotates] [209]: dY = 0.034907
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999986
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.005236
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 199.997255
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000183
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -1.047193
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.034906
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 199.997073
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -1.082099
[coordinateSystemRotates] [221]: coordinate system rotated X = 199.997073
[coordinateSystemRotates] [222]: coordinate system rotated Y = -1.082099
[calcRootOrParentSegmentCoordinate] [458]: accumulateXY.distanceX = 444.963362, accumulateXY.distanceY = -5.083421
[calcDestination] [78]: destinationCoord latitude = 40.362147  destinationCoord longitude = 116.815049
[displayNodeCoordinate] [140]: 10's startCoordinate: latitude = 40.362147, longitude = 116.815049
[displayNodeCoordinate] [141]: 10's endCoordinate: latitude = 40.360351, longitude = 116.815062
[insertNode] [1288]: tempNode is = 0x563580a8b5b0, preSegmentId = 10, prevSegmentId = 10, segIsInTree = 1
[insertNode] [1315]: some nodes are already in tree
[insertNode] [1240]: (*it)->preSegmentId = 4's segIsInTree = 0
[findNodeById] [888]: result = 0x563580a8baf0
[findNodeById] [888]: result = 0x563580a8baf0
[insertNode] [1288]: tempNode is = 0x563580a8baf0, preSegmentId = 4, prevSegmentId = 3, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8bc10
[insertChildNode] [1184]: childNode = 0x563580a8bc10
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 78.000000, BranchAngle = 0.010000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000175
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 77.999999
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.013614
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 77.999999
[coordinateSystemRotates] [209]: dY = 0.013614
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -77.994666
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000159
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 0.912088
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.013613
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -77.994825
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 0.898476
[coordinateSystemRotates] [221]: coordinate system rotated X = -77.994825
[coordinateSystemRotates] [222]: coordinate system rotated Y = 0.898476
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -262.982177, accumulateXY.distanceY = 3.061762
[calcDestination] [78]: destinationCoord latitude = 40.355788  destinationCoord longitude = 116.815145
[insertNode] [1310]: childNode's preSegmentId = 4
[displayNodeCoordinate] [140]: 4's startCoordinate: latitude = 40.356488, longitude = 116.815135
[displayNodeCoordinate] [141]: 4's endCoordinate: latitude = 40.355788, longitude = 116.815145
[insertNode] [1240]: (*it)->preSegmentId = 5's segIsInTree = 0
[findNodeById] [888]: result = 0x563580a8bc10
[findNodeById] [888]: result = 0x563580a8bc10
[findNodeById] [888]: result = 0x563580a8bc10
[insertNode] [1288]: tempNode is = 0x563580a8bc10, preSegmentId = 5, prevSegmentId = 4, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8b190
[insertChildNode] [1184]: childNode = 0x563580a8b190
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 254.000000, BranchAngle = 90.060000
[calcStraightXYOffset] [232]: BranchAngleRad = 1.571844
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -0.265988
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 253.999861
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.340000, accumulateBranchAngleRad = 3.130073
[coordinateSystemRotates] [208]: dX = -0.265988
[coordinateSystemRotates] [209]: dY = 253.999861
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999934
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011519
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 0.265970
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 2.925804
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.003064
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -253.983009
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -2.659833
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -253.986073
[coordinateSystemRotates] [221]: coordinate system rotated X = -2.659833
[coordinateSystemRotates] [222]: coordinate system rotated Y = -253.986073
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -265.642010, accumulateXY.distanceY = -250.924311
[calcDestination] [78]: destinationCoord latitude = 40.355764  destinationCoord longitude = 116.812151
[insertNode] [1310]: childNode's preSegmentId = 5
[displayNodeCoordinate] [140]: 5's startCoordinate: latitude = 40.355788, longitude = 116.815145
[displayNodeCoordinate] [141]: 5's endCoordinate: latitude = 40.355764, longitude = 116.812151
[insertNode] [1240]: (*it)->preSegmentId = 6's segIsInTree = 0
[findNodeById] [888]: result = 0x563580a8bc10
[findNodeById] [888]: result = 0x563580a8bc10
[findNodeById] [888]: result = 0x563580a8bc10
[insertNode] [1288]: tempNode is = 0x563580a8bc10, preSegmentId = 6, prevSegmentId = 4, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8bfb0
[insertChildNode] [1184]: childNode = 0x563580a8bfb0
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 254.000000, BranchAngle = 0.020000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000349
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 253.999985
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.088663
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.340000, accumulateBranchAngleRad = 3.130073
[coordinateSystemRotates] [208]: dX = 253.999985
[coordinateSystemRotates] [209]: dY = 0.088663
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999934
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011519
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -253.983133
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.001021
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 2.925805
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.088657
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -253.984154
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 2.837148
[coordinateSystemRotates] [221]: coordinate system rotated X = -253.984154
[coordinateSystemRotates] [222]: coordinate system rotated Y = 2.837148
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -516.966331, accumulateXY.distanceY = 5.898910
[calcDestination] [78]: destinationCoord latitude = 40.353506  destinationCoord longitude = 116.815179
[insertNode] [1310]: childNode's preSegmentId = 6
[displayNodeCoordinate] [140]: 6's startCoordinate: latitude = 40.355788, longitude = 116.815145
[displayNodeCoordinate] [141]: 6's endCoordinate: latitude = 40.353506, longitude = 116.815179
[insertNode] [1240]: (*it)->preSegmentId = 7's segIsInTree = 0
[findNodeById] [888]: result = 0x563580a8bc10
[findNodeById] [888]: result = 0x563580a8bc10
[findNodeById] [888]: result = 0x563580a8bc10
[insertNode] [1288]: tempNode is = 0x563580a8bc10, preSegmentId = 7, prevSegmentId = 4, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8bec0
[insertChildNode] [1184]: childNode = 0x563580a8bec0
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 254.000000, BranchAngle = -90.050000
[calcStraightXYOffset] [232]: BranchAngleRad = -1.571669
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -0.221657
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = -253.999903
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.340000, accumulateBranchAngleRad = 3.130073
[coordinateSystemRotates] [208]: dX = -0.221657
[coordinateSystemRotates] [209]: dY = -253.999903
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999934
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011519
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 0.221642
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -2.925804
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.002553
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 253.983052
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 3.147446
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 253.980498
[coordinateSystemRotates] [221]: coordinate system rotated X = 3.147446
[coordinateSystemRotates] [222]: coordinate system rotated Y = 253.980498
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -259.834730, accumulateXY.distanceY = 257.042260
[calcDestination] [78]: destinationCoord latitude = 40.355816  destinationCoord longitude = 116.818139
[insertNode] [1310]: childNode's preSegmentId = 7
[displayNodeCoordinate] [140]: 7's startCoordinate: latitude = 40.355788, longitude = 116.815145
[displayNodeCoordinate] [141]: 7's endCoordinate: latitude = 40.355816, longitude = 116.818139
[insertNode] [1240]: (*it)->preSegmentId = 8's segIsInTree = 0
[findNodeById] [893]: result = (nil)
[findNodeById] [888]: result = 0x563580a8bfb0
[findNodeById] [888]: result = 0x563580a8bfb0
[findNodeById] [888]: result = 0x563580a8bfb0
[findNodeById] [888]: result = 0x563580a8bfb0
[insertNode] [1288]: tempNode is = 0x563580a8bfb0, preSegmentId = 8, prevSegmentId = 6, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8bdd0
[insertChildNode] [1184]: childNode = 0x563580a8bdd0
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 103.000000, BranchAngle = 0.010000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000175
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 102.999998
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.017977
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.360000, accumulateBranchAngleRad = 3.130423
[coordinateSystemRotates] [208]: dX = 102.999998
[coordinateSystemRotates] [209]: dY = 0.017977
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999938
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011170
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -102.993573
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000201
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 1.150497
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.017976
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -102.993774
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 1.132521
[coordinateSystemRotates] [221]: coordinate system rotated X = -102.993774
[coordinateSystemRotates] [222]: coordinate system rotated Y = 1.132521
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -619.960104, accumulateXY.distanceY = 7.031431
[calcDestination] [78]: destinationCoord latitude = 40.352581  destinationCoord longitude = 116.815192
[insertNode] [1310]: childNode's preSegmentId = 8
[displayNodeCoordinate] [140]: 8's startCoordinate: latitude = 40.353506, longitude = 116.815179
[displayNodeCoordinate] [141]: 8's endCoordinate: latitude = 40.352581, longitude = 116.815192
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357956, RoPos.Long = 116.815113
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -90.345458, startPoint.y = 2.204370
[RoMatchSegment] [453]: endPoint.x = 162.950850, endPoint.y = -3.732261
[RoMatchSegment] [460]: orthogonalDistance = 0.086875
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.546402, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = 1.593697
[RoMatchSegment] [468]: Alpha = 0.000961, Beta = 0.000533
[RoMatchSegment] [476]: current tree Id = 10
[findNodeById] [888]: result = 0x563580a8baf0
[findNodeById] [888]: result = 0x563580a8baf0
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 3
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8baf0
[findNodeById] [888]: result = 0x563580a8baf0
[findNodeById] [888]: result = 0x563580a8baf0
[getMPP] [565]: isMPP = 1
[findNodeById] [888]: result = 0x563580a8baf0
[findNodeById] [888]: result = 0x563580a8baf0
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8baf0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = 21.536609
[calcRelativePosition] [337]: y = -0.591662
[calcRelativePosition] [338]: accumulateBranchAngle = 0.000000
[calcRelativePosition] [371]: RelativePosition = 1
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 1, RvSpeed = 60.000000, headingDelta = 180.000000
[calcRelativeDirection] [322]: realativeDirection = 2
[calcRvRelevancy] [228]: relativePos = 1, RelativeDir = 2, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 3, curSegmentId = 3, structSeparate = 2128082748
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [222]: dis2Event = 21.598646
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 3
[getPsdRoLocation] [661]: relativePos = 1
[getPsdRoLocation] [662]: RelativeDir = 2
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 21.598646
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.355764, RoPos.Long = 116.812151
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [452]: startPoint.x = -336.669899, startPoint.y = -246.551282
[RoMatchSegment] [453]: endPoint.x = -83.373493, endPoint.y = -252.488010
[RoMatchSegment] [460]: orthogonalDistance = 254.372249
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -2.202888, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = -2.822658
[RoMatchSegment] [468]: Alpha = 0.655525, Beta = 4.416888
[RoMatchSegment] [432]: 2 segment
[RoMatchSegment] [452]: startPoint.x = -512.152241, startPoint.y = -241.299849
[RoMatchSegment] [453]: endPoint.x = -336.669899, endPoint.y = -246.551282
[RoMatchSegment] [460]: orthogonalDistance = 256.511532
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -2.011098, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.540880
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.600713, atan2(endPoint.x, endPoint.y) = -2.202888
[RoMatchSegment] [468]: Alpha = 0.470218, Beta = 3.803601
[RoMatchSegment] [432]: 10 segment
[RoMatchSegment] [452]: startPoint.x = -711.623746, startPoint.y = -237.883449
[RoMatchSegment] [453]: endPoint.x = -512.152241, endPoint.y = -241.299849
[RoMatchSegment] [460]: orthogonalDistance = 250.034944
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -1.893401, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.553671
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.587922, atan2(endPoint.x, endPoint.y) = -2.011098
[RoMatchSegment] [468]: Alpha = 0.339730, Beta = 3.599020
[RoMatchSegment] [432]: 4 segment
[RoMatchSegment] [452]: startPoint.x = -83.373493, startPoint.y = -252.488010
[RoMatchSegment] [453]: endPoint.x = -5.589261, endPoint.y = -254.297470
[RoMatchSegment] [460]: orthogonalDistance = 254.358677
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -2.822658, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547538
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594055, atan2(endPoint.x, endPoint.y) = -3.119617
[RoMatchSegment] [468]: Alpha = 1.275120, Beta = 4.713672
[RoMatchSegment] [432]: 5 segment
[RoMatchSegment] [452]: startPoint.x = -5.589261, startPoint.y = -254.297470
[RoMatchSegment] [453]: endPoint.x = 0.033698, endPoint.y = 0.006452
[RoMatchSegment] [460]: orthogonalDistance = 0.033547
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -3.119617, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -3.119485
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 0.022108, atan2(endPoint.x, endPoint.y) = 1.381616
[RoMatchSegment] [468]: Alpha = 0.000132, Beta = 1.359508
[RoMatchSegment] [476]: current tree Id = 10
[findNodeById] [888]: result = 0x563580a8b190
[findNodeById] [888]: result = 0x563580a8b190
[findNodeById] [888]: result = 0x563580a8b190
[findNodeById] [888]: result = 0x563580a8b190
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 5
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8b190
[findNodeById] [888]: result = 0x563580a8b190
[findNodeById] [888]: result = 0x563580a8b190
[findNodeById] [888]: result = 0x563580a8b190
[findNodeById] [888]: result = 0x563580a8b190
[getMPP] [565]: isMPP = 1
[findNodeById] [888]: result = 0x563580a8baf0
[findNodeById] [888]: result = 0x563580a8baf0
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8baf0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = 267.869320
[calcRelativePosition] [337]: y = 248.155060
[calcRelativePosition] [338]: accumulateBranchAngle = 269.400000
[calcRelativePosition] [371]: RelativePosition = 3
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 3, RvSpeed = 60.000000, headingDelta = 90.000000
[calcRelativeDirection] [322]: realativeDirection = 4
[calcRvRelevancy] [228]: relativePos = 3, RelativeDir = 4, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 5, curSegmentId = 3, structSeparate = -272048410
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [209]: tempNodeId is = 5
[calcDistanceToEvent] [214]: ChildsTotalLength = 78.000000, tempNodeId is = 4
[calcDistanceToEvent] [219]: Ro2StartCoordDis = 254.001755, ChildsTotalLength = 78.000000, curRemainLength = 185
[calcDistanceToEvent] [222]: dis2Event = 517.001770
[getPsdRoLocation] [638]: actual distance between RO and HV over the  pPsdValidDistance
[getPsdRoLocation] [659]: MPP = 0
[getPsdRoLocation] [660]: roadSegClass = 0
[getPsdRoLocation] [661]: relativePos = 0
[getPsdRoLocation] [662]: RelativeDir = 0
[getPsdRoLocation] [663]: RvRelevancy = 0
[getPsdRoLocation] [664]: dis2Event = 0.000000
[       OK ] PsdLocationTest.calcRoDis2Intersection_1 (0 ms)
[ RUN      ] PsdLocationTest.calcRoDis2Intersection_2
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b5b0
[clearNodeOutTree] [990]: Node id = 10
[clearNodeOutTree] [993]: child id =  2
[clearNodeOutTree] [990]: Node id = 2
[clearNodeOutTree] [993]: child id =  3
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [993]: child id =  4
[clearNodeOutTree] [990]: Node id = 4
[clearNodeOutTree] [993]: child id =  5
[clearNodeOutTree] [990]: Node id = 5
[clearNodeOutTree] [996]: clear id = 5
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b190, Node->ParentNode = 0x563580a8bc10
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[clearNodeOutTree] [993]: child id =  6
[clearNodeOutTree] [990]: Node id = 6
[clearNodeOutTree] [993]: child id =  8
[clearNodeOutTree] [990]: Node id = 8
[clearNodeOutTree] [996]: clear id = 8
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8bdd0, Node->ParentNode = 0x563580a8bfb0
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[clearNodeOutTree] [996]: clear id = 6
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8bfb0, Node->ParentNode = 0x563580a8bc10
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[clearNodeOutTree] [993]: child id =  7
[clearNodeOutTree] [990]: Node id = 7
[clearNodeOutTree] [996]: clear id = 7
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8bec0, Node->ParentNode = 0x563580a8bc10
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[clearNodeOutTree] [996]: clear id = 4
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8bc10, Node->ParentNode = 0x563580a8baf0
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8baf0, Node->ParentNode = 0x563580a8b4c0
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[clearNodeOutTree] [996]: clear id = 2
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = 0x563580a8b5b0
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[clearNodeOutTree] [996]: clear id = 10
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b5b0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[TestBody] [3513]: MapData_X.preSegmentId = 4
[TestBody] [3513]: MapData_X.preSegmentId = 5
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.815135, latitude = 40.356488, hvHeading = 179.330000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 4
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 4, curSegmentId is = 4
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcStraightXYOffset] [230]: Length = 78.000000, BranchAngle = 0.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 0.000000
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = 78.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = 78.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -77.994667
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 0.912088
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -77.994667
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = 0.912088
[coordinateSystemRotates] [221]: coordinate system rotated X = -77.994667
[coordinateSystemRotates] [222]: coordinate system rotated Y = 0.912088
[calcCurSegmentCoordinate] [599]: disHv2EndAfterRotatingCoord.distanceX = -77.994667, disHv2EndAfterRotatingCoord.distanceY = 0.912088
[calcDestination] [78]: destinationCoord latitude = 40.355787  destinationCoord longitude = 116.815146
[calcCurSegmentCoordinate] [602]: HV's endCoordinate latitude = 40.355787  longitude = 116.815146
[calcStraightXYOffset] [230]: Length = 0.000000, BranchAngle = 180.000000
[calcStraightXYOffset] [232]: BranchAngleRad = 3.141593
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -0.000000
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -0.000000
[coordinateSystemRotates] [209]: dY = 0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [221]: coordinate system rotated X = 0.000000
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.000000
[calcCurSegmentCoordinate] [611]: disHv2StartAfterRotatingCoord.distanceX = 0.000000, disHv2StartAfterRotatingCoord.distanceY = 0.000000
[calcDestination] [78]: destinationCoord latitude = 40.356488  destinationCoord longitude = 116.815135
[calcCurSegmentCoordinate] [614]: HV's startCoordinate latitude = 40.356488  longitude = 116.815135
[displayNodeCoordinate] [140]: 4's startCoordinate: latitude = 40.356488, longitude = 116.815135
[displayNodeCoordinate] [141]: 4's endCoordinate: latitude = 40.355787, longitude = 116.815146
[insertNode] [1240]: (*it)->preSegmentId = 4's segIsInTree = 1
[findNodeById] [893]: result = (nil)
[insertNode] [1288]: tempNode is = (nil), preSegmentId = 4, prevSegmentId = 3, segIsInTree = 1
[insertNode] [1321]: goto check the next segment info from vPsdMap
[insertNode] [1240]: (*it)->preSegmentId = 5's segIsInTree = 0
[insertNode] [1288]: tempNode is = 0x563580a8b4c0, preSegmentId = 5, prevSegmentId = 4, segIsInTree = 0
[createNode] [1176]: newNode = 0x563580a8baf0
[insertChildNode] [1184]: childNode = 0x563580a8baf0
[calcChildSegmentCoordinate] [265]: --------------------------Is childSegment--------------------------
[calcStraightXYOffset] [230]: Length = 254.000000, BranchAngle = 90.060000
[calcStraightXYOffset] [232]: BranchAngleRad = 1.571844
[calcStraightXYOffset] [235]: straight offset X with BranchAngle = -0.265988
[calcStraightXYOffset] [236]: straight offset Y with BranchAngle = 253.999861
[coordinateSystemRotates] [207]: accumulateBranchAngle = 179.330000, accumulateBranchAngleRad = 3.129899
[coordinateSystemRotates] [208]: dX = -0.265988
[coordinateSystemRotates] [209]: dY = 253.999861
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = -0.999932
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.011693
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 0.265970
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = 2.970132
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.003110
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -253.982495
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = -2.704162
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -253.985605
[coordinateSystemRotates] [221]: coordinate system rotated X = -2.704162
[coordinateSystemRotates] [222]: coordinate system rotated Y = -253.985605
[calcChildSegmentCoordinate] [289]: accumulateXY.distanceX = -80.698829, accumulateXY.distanceY = -253.073517
[calcDestination] [78]: destinationCoord latitude = 40.355763  destinationCoord longitude = 116.812152
[insertNode] [1310]: childNode's preSegmentId = 5
[displayNodeCoordinate] [140]: 5's startCoordinate: latitude = 40.355787, longitude = 116.815146
[displayNodeCoordinate] [141]: 5's endCoordinate: latitude = 40.355763, longitude = 116.812152
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 4
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.355767, RoPos.Long = 116.814077
[RoMatchSegment] [432]: 4 segment
[RoMatchSegment] [452]: startPoint.x = -81.105859, startPoint.y = -88.933756
[RoMatchSegment] [453]: endPoint.x = -3.321963, endPoint.y = -90.756823
[RoMatchSegment] [460]: orthogonalDistance = 90.809743
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -2.402198, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -1.547363
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 1.594230, atan2(endPoint.x, endPoint.y) = -3.105006
[RoMatchSegment] [468]: Alpha = 0.854835, Beta = 4.699236
[RoMatchSegment] [432]: 5 segment
[RoMatchSegment] [452]: startPoint.x = -3.321963, startPoint.y = -90.756823
[RoMatchSegment] [453]: endPoint.x = 2.350666, endPoint.y = 163.539769
[RoMatchSegment] [460]: orthogonalDistance = 1.297115
[RoMatchSegment] [466]: Alpha: atan2(startPoint.x, startPoint.y) = -3.105006, atan2(startPoint.x - endPoint.x, startPoint.y - endPoint.y) = -3.119289
[RoMatchSegment] [467]: Beta: atan2(endPoint.x - startPoint.x, endPoint.y - startPoint.y) = 0.022303, atan2(endPoint.x, endPoint.y) = 0.014373
[RoMatchSegment] [468]: Alpha = 0.014283, Beta = 0.007931
[RoMatchSegment] [476]: current tree Id = 4
[findNodeById] [888]: result = 0x563580a8baf0
[RoMatchSegment] [480]: mIsMatch = 1
[RoMatchSegment] [481]: mRoMatchedSegId = 5
[RoMatchSegment] [482]: mRoMatchedNode = 0x563580a8baf0
[findNodeById] [888]: result = 0x563580a8baf0
[getMPP] [565]: isMPP = 1
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[calcRelativePosition] [336]: x = 81.106923
[calcRelativePosition] [337]: y = 88.932786
[calcRelativePosition] [338]: accumulateBranchAngle = 269.390000
[calcRelativePosition] [371]: RelativePosition = 3
[calcRelativeDirection] [270]: roadSegClass = 3, relativePos = 3, RvSpeed = 60.000000, headingDelta = 90.000000
[calcRelativeDirection] [322]: realativeDirection = 4
[calcRvRelevancy] [228]: relativePos = 3, RelativeDir = 4, mRoMatchedNode->MapData.mpp = 1
[calcRvRelevancy] [229]: mRoMatchedSegId = 5, curSegmentId = 4, structSeparate = -2136443464
[calcRvRelevancy] [262]: RvRelevancy = 1
[calcDistanceToEvent] [209]: tempNodeId is = 5
[calcDistanceToEvent] [219]: Ro2StartCoordDis = 90.690269, ChildsTotalLength = 0.000000, curRemainLength = 78
[calcDistanceToEvent] [222]: dis2Event = 168.690277
[calcHvDis2Intersection] [167]: curRemainLength = 78
[calcHvDis2Intersection] [168]: ChildsTotalLength = 254.000000
[calcHvDis2Intersection] [172]: HvDTIP = 332.000000
[calcRoDis2Intersection] [146]: RvDis2Intersection = -163.309723
[getPsdRoLocation] [654]: HvDTIP = 332.000000
[getPsdRoLocation] [655]: RvDTIP = -163.309723
[getPsdRoLocation] [659]: MPP = 1
[getPsdRoLocation] [660]: roadSegClass = 3
[getPsdRoLocation] [661]: relativePos = 3
[getPsdRoLocation] [662]: RelativeDir = 4
[getPsdRoLocation] [663]: RvRelevancy = 1
[getPsdRoLocation] [664]: dis2Event = 168.690277
[       OK ] PsdLocationTest.calcRoDis2Intersection_2 (0 ms)
[ RUN      ] PsdLocationTest.RoMatchSegment_curvecase
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 4
[clearNodeOutTree] [993]: child id =  5
[clearNodeOutTree] [990]: Node id = 5
[clearNodeOutTree] [996]: clear id = 5
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8baf0, Node->ParentNode = 0x563580a8b4c0
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[clearNodeOutTree] [996]: clear id = 4
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[TestBody] [3565]: MapData_X.preSegmentId = 3
[mapCreate] [1519]: --------------------------mapCreate--------------------------
[mapCreate] [1520]: hv's longitude = 116.812605, latitude = 40.357607, hvHeading = 0.000000
[createNode] [1176]: newNode = 0x563580a8b4c0
[insertNodeInTree] [1328]: curNode = 0x563580a8b4c0
[IsCurIdInList] [1534]: curSegmentId is in list = 3
[insertNodeInTree] [1354]: mCount = 1
[insertNodeInTree] [1355]: current tree is = 0x563580a8b4c0, current tree Id is = 3, curSegmentId is = 3
[calcCurSegmentCoordinate] [584]: --------------------------Is curSegment or rootAndcurSegment--------------------------
[calcCurSegmentCoordinate] [623]: --------------------------calculate HV's endCoordinate--------------------------
[calcCurSegmentCoordinate] [648]: R = 60.557700
[calcCurSegmentCoordinate] [654]: Ssum = 58.810343
[calcCurSegmentCoordinate] [658]: sampleRotationAngle = 27.821272
[calcCurveXYOffset] [246]: arcR = 60.557700, arcRotationAngle = 27.821272, arcRotationAngleRad = 0.485573, signCurvature = 0
[calcCurveXYOffset] [255]: cos(arcRotationAngleRad) - 1 = -0.115592
[calcCurveXYOffset] [256]: arcR * (cos(arcRotationAngleRad) - 1) = -7.000000
[calcCurveXYOffset] [257]: dX = 28.263188
[calcCurveXYOffset] [258]: dY = -7.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 0.000000, accumulateBranchAngleRad = 0.000000
[coordinateSystemRotates] [208]: dX = 28.263188
[coordinateSystemRotates] [209]: dY = -7.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 1.000000
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 28.263188
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -7.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 28.263188
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -7.000000
[coordinateSystemRotates] [221]: coordinate system rotated X = 28.263188
[coordinateSystemRotates] [222]: coordinate system rotated Y = -7.000000
[calcCurSegmentCoordinate] [666]: disHv2EndAfterRotatingCoord.distanceX = 28.263188, disHv2EndAfterRotatingCoord.distanceY = -7.000000
[calcDestination] [78]: destinationCoord latitude = 40.357861  destinationCoord longitude = 116.812522
[calcCurSegmentCoordinate] [672]: accumulateBranchAngleHv2End = -27.821272
[calcCurSegmentCoordinate] [675]: fixed accumulateBranchAngleHv2End = -27.821272
[calcCurSegmentCoordinate] [648]: R = 60.557700
[calcCurSegmentCoordinate] [681]: finalRemainLength = 51.189657
[calcCurveXYOffset] [246]: arcR = 60.557700, arcRotationAngle = 48.432343, arcRotationAngleRad = 0.845304, signCurvature = 184
[calcCurveXYOffset] [255]: cos(arcRotationAngleRad) - 1 = -0.336496
[calcCurveXYOffset] [256]: arcR * (cos(arcRotationAngleRad) - 1) = -20.377425
[calcCurveXYOffset] [257]: dX = 45.307621
[calcCurveXYOffset] [258]: dY = 20.377425
[coordinateSystemRotates] [207]: accumulateBranchAngle = -27.821272, accumulateBranchAngleRad = -0.485573
[coordinateSystemRotates] [208]: dX = 45.307621
[coordinateSystemRotates] [209]: dY = 20.377425
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 0.884408
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = -0.466715
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = 40.070412
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -9.510450
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -21.145747
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = 18.021953
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 49.580862
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -3.123794
[coordinateSystemRotates] [221]: coordinate system rotated X = 49.580862
[coordinateSystemRotates] [222]: coordinate system rotated Y = -3.123794
[calcCurSegmentCoordinate] [690]: disHv2EndAfterRotatingCoord.distanceX = 77.844050, disHv2EndAfterRotatingCoord.distanceY = -10.123794
[calcDestination] [78]: destinationCoord latitude = 40.358306  destinationCoord longitude = 116.812486
[calcCurSegmentCoordinate] [692]: HV's endCoordinate latitude = 40.358306  longitude = 116.812486
[calcCurSegmentCoordinate] [696]: accumulateBranchAngleHv2End = 20.611071
[calcCurSegmentCoordinate] [698]: fixed accumulateBranchAngleHv2End = 20.611071
[calcCurSegmentCoordinate] [743]: --------------------------calculate HV's startCoordinate--------------------------
[calcCurSegmentCoordinate] [747]: accumulateBranchAngleHv2Start = 0.000000
[calcCurSegmentCoordinate] [759]: R = 60.557700
[calcCurSegmentCoordinate] [787]: finalRemainLength = 0.000000
[calcCurveXYOffset] [246]: arcR = -60.557700, arcRotationAngle = 0.000000, arcRotationAngleRad = 0.000000, signCurvature = 153
[calcCurveXYOffset] [252]: fixed arcR = 60.557700
[calcCurveXYOffset] [255]: cos(arcRotationAngleRad) - 1 = 0.000000
[calcCurveXYOffset] [256]: arcR * (cos(arcRotationAngleRad) - 1) = 0.000000
[calcCurveXYOffset] [257]: dX = -0.000000
[calcCurveXYOffset] [258]: dY = -0.000000
[coordinateSystemRotates] [207]: accumulateBranchAngle = 0.000000, accumulateBranchAngleRad = 0.000000
[coordinateSystemRotates] [208]: dX = -0.000000
[coordinateSystemRotates] [209]: dY = -0.000000
[coordinateSystemRotates] [210]: cos(accumulateBranchAngleRad) = 1.000000
[coordinateSystemRotates] [211]: sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [212]: distanceX * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [213]: distanceY * sin(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [214]: distanceX * sin(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [215]: distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [219]: distanceX = distanceX * cos(accumulateBranchAngleRad) - distanceY * sin(accumulateBranchAngleRad) = 0.000000
[coordinateSystemRotates] [220]: distanceY = distanceX * sin(accumulateBranchAngleRad) + distanceY * cos(accumulateBranchAngleRad) = -0.000000
[coordinateSystemRotates] [221]: coordinate system rotated X = 0.000000
[coordinateSystemRotates] [222]: coordinate system rotated Y = -0.000000
[calcCurSegmentCoordinate] [795]: disHv2StartAfterRotatingCoord.distanceX = 0.000000, disHv2StartAfterRotatingCoord.distanceY = 0.000000
[calcDestination] [78]: destinationCoord latitude = 40.357607  destinationCoord longitude = 116.812605
[calcCurSegmentCoordinate] [797]: HV's startCoordinate latitude = 40.357607  longitude = 116.812605
[calcCurSegmentCoordinate] [801]: accumulateBranchAngleHv2Start = 0.000000
[calcCurSegmentCoordinate] [803]: fixed accumulateBranchAngleHv2Start = 0.000000
[displayNodeCoordinate] [145]: 3's startCoordinate: latitude = 40.357607, longitude = 116.812605
[displayNodeCoordinate] [148]: 3's SampleCoord: latitude = 40.357861, longitude = 116.812522
[displayNodeCoordinate] [150]: 3's endCoordinate: latitude = 40.358306, longitude = 116.812486
[getPsdRoLocation] [607]: Enter
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 3
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdRoLocation] [609]: PsdAvailable = 1
[getPsdRoLocation] [611]: RoPos.lat = 40.357946, RoPos.Long = 116.812686
[RoMatchSegment] [432]: 3 segment
[RoMatchSegment] [517]: Point_1.x = -37.643077, Point_1.y = -6.880651
[RoMatchSegment] [518]: Point_2.x = -9.450475, Point_2.y = -13.890461
[RoMatchSegment] [524]: orthogonalDistance = 15.760365
[RoMatchSegment] [528]: Alpha = 0.424489, Beta = 4.358666
[RoMatchSegment] [517]: Point_1.x = -9.450475, Point_1.y = -13.890461
[RoMatchSegment] [518]: Point_2.x = 40.006576, Point_2.y = -17.018634
[RoMatchSegment] [524]: orthogonalDistance = 14.459312
[RoMatchSegment] [528]: Alpha = 1.036542, Beta = 0.339040
[getPsdRoLocation] [659]: MPP = 0
[getPsdRoLocation] [660]: roadSegClass = 0
[getPsdRoLocation] [661]: relativePos = 0
[getPsdRoLocation] [662]: RelativeDir = 0
[getPsdRoLocation] [663]: RvRelevancy = 0
[getPsdRoLocation] [664]: dis2Event = 0.000000
[       OK ] PsdLocationTest.RoMatchSegment_curvecase (0 ms)
[ RUN      ] PsdLocationTest.accumulateChildsLength
[       OK ] PsdLocationTest.accumulateChildsLength (0 ms)
[ RUN      ] PsdLocationTest.calcRoadSegmentClass
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 0
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 1
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 2
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 2
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[calcRoadSegmentClass] [383]: find the hvLocatedNode = 0x563580a8b4c0
[calcRoadSegmentClass] [412]: RoadClass = 3
[findNodeById] [893]: result = (nil)
[calcRoadSegmentClass] [383]: find the hvLocatedNode = (nil)
[calcRoadSegmentClass] [388]: curSegmentId is not in mTree
[calcRoadSegmentClass] [412]: RoadClass = 0
[       OK ] PsdLocationTest.calcRoadSegmentClass (0 ms)
[ RUN      ] PsdLocationTest.getPsdAvailable
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 0
[getPsdAvailable] [573]: posIsUnique = 109
[getPsdAvailable] [574]: posLengthErr = 22069
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 1
[getPsdAvailable] [573]: posIsUnique = 109
[getPsdAvailable] [574]: posLengthErr = 22069
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 6
[getPsdAvailable] [573]: posIsUnique = 109
[getPsdAvailable] [574]: posLengthErr = 22069
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 6
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 22069
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 6
[getPsdAvailable] [573]: posIsUnique = 0
[getPsdAvailable] [574]: posLengthErr = 22069
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 6
[getPsdAvailable] [573]: posIsUnique = 0
[getPsdAvailable] [574]: posLengthErr = 0
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 6
[getPsdAvailable] [573]: posIsUnique = 0
[getPsdAvailable] [574]: posLengthErr = 6
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 6
[getPsdAvailable] [573]: posIsUnique = 0
[getPsdAvailable] [574]: posLengthErr = 7
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 6
[getPsdAvailable] [573]: posIsUnique = 0
[getPsdAvailable] [574]: posLengthErr = 1
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 6
[getPsdAvailable] [573]: posIsUnique = 0
[getPsdAvailable] [574]: posLengthErr = 2
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 6
[getPsdAvailable] [573]: posIsUnique = 0
[getPsdAvailable] [574]: posLengthErr = 3
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 6
[getPsdAvailable] [573]: posIsUnique = 0
[getPsdAvailable] [574]: posLengthErr = 4
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 6
[getPsdAvailable] [573]: posIsUnique = 0
[getPsdAvailable] [574]: posLengthErr = 5
[getPsdAvailable] [571]: MapMutexStatus = 0
[getPsdAvailable] [572]: curSegmentId = 6
[getPsdAvailable] [573]: posIsUnique = 1
[getPsdAvailable] [574]: posLengthErr = 4
[       OK ] PsdLocationTest.getPsdAvailable (0 ms)
[ RUN      ] PsdLocationTest.startFunction
[       OK ] PsdLocationTest.startFunction (0 ms)
[ RUN      ] PsdLocationTest.reservedFunction
[       OK ] PsdLocationTest.reservedFunction (0 ms)
[ RUN      ] PsdLocationTest.HaversineTest
[       OK ] PsdLocationTest.HaversineTest (0 ms)
[----------] 14 tests from PsdLocationTest (2 ms total)

[----------] 2 tests from PsdMessageDecoderTest
[ RUN      ] PsdMessageDecoderTest.segmentManager
[mapClear] [1393]: --------------------------mapClear--------------------------
[mapClear] [1396]: Node = 0x563580a8b4c0
[clearNodeOutTree] [990]: Node id = 3
[clearNodeOutTree] [996]: clear id = 3
[clearNodeOutTree] [999]: Node not NULL = 0x563580a8b4c0, Node->ParentNode = (nil)
[clearNodeOutTree] [1001]: ready to delete Node
[clearNodeOutTree] [1005]: cleared Node = (nil)
[mapClear] [1399]: tree = (nil) has been cleared
[convertRoadClass] [210]: RoadClassValue = 2
[convertCurvature] [251]: signEndCurvature = 0, endCurvature = 1.000000
[convertCurvature] [255]: signStartCurvature = 0, startCurvature = 1.000000
[convertBranchAngle] [244]: branchDirection = 0, branchAngle = 0.000000
[pushInList] [193]: preSegmentId = 3
[convertRoadClass] [210]: RoadClassValue = 2
[convertCurvature] [251]: signEndCurvature = 1, endCurvature = -1.000000
[convertCurvature] [255]: signStartCurvature = 1, startCurvature = -1.000000
[convertBranchAngle] [244]: branchDirection = 1, branchAngle = -0.000000
[pushInList] [185]: vPsdMap already have this preSegmentId
[clearList] [165]: clear the vPsdMap
[clearList] [154]: vPsdMap is already empty
[       OK ] PsdMessageDecoderTest.segmentManager (0 ms)
[ RUN      ] PsdMessageDecoderTest.saveAttributToList
[convertRoadClass] [210]: RoadClassValue = 2
[convertCurvature] [251]: signEndCurvature = 0, endCurvature = 1.000000
[convertCurvature] [255]: signStartCurvature = 0, startCurvature = 1.000000
[convertBranchAngle] [244]: branchDirection = 0, branchAngle = 0.000000
[pushInList] [193]: preSegmentId = 3
[saveAttributToList] [100]: PsdAttribut_1_ID = 4
[saveAttributToList] [101]: PsdAttribut_1_Wert = 0
[saveAttributToList] [102]: PsdAttribut_2_ID = 2127642629
[saveAttributToList] [103]: PsdAttribut_2_Wert = 22069
[saveAttributToList] [104]: PsdAttribut_3_ID = 0
[saveAttributToList] [105]: PsdAttribut_3_Wert = 0
[saveAttributToList] [106]: PsdAttribut_4_ID = 2158523824
[saveAttributToList] [107]: PsdAttribut_4_Wert = 22069
[saveAttributToList] [108]: PsdAttribut_5_ID = 110
[saveAttributToList] [109]: PsdAttribut_5_Wert = 2
[saveAttributToList] [136]: psdAttributSegmentID = 3
[saveAttributToList] [137]: structSeparate = 0
[clearList] [165]: clear the vPsdMap
[pushInList] [193]: preSegmentId = 3
[saveAttributToList] [100]: PsdAttribut_1_ID = 0
[saveAttributToList] [101]: PsdAttribut_1_Wert = 0
[saveAttributToList] [102]: PsdAttribut_2_ID = 4
[saveAttributToList] [103]: PsdAttribut_2_Wert = 0
[saveAttributToList] [104]: PsdAttribut_3_ID = 0
[saveAttributToList] [105]: PsdAttribut_3_Wert = 0
[saveAttributToList] [106]: PsdAttribut_4_ID = 2158523824
[saveAttributToList] [107]: PsdAttribut_4_Wert = 22069
[saveAttributToList] [108]: PsdAttribut_5_ID = 110
[saveAttributToList] [109]: PsdAttribut_5_Wert = 2
[saveAttributToList] [136]: psdAttributSegmentID = 3
[saveAttributToList] [137]: structSeparate = 0
[clearList] [165]: clear the vPsdMap
[pushInList] [193]: preSegmentId = 3
[saveAttributToList] [100]: PsdAttribut_1_ID = 0
[saveAttributToList] [101]: PsdAttribut_1_Wert = 0
[saveAttributToList] [102]: PsdAttribut_2_ID = 0
[saveAttributToList] [103]: PsdAttribut_2_Wert = 0
[saveAttributToList] [104]: PsdAttribut_3_ID = 4
[saveAttributToList] [105]: PsdAttribut_3_Wert = 0
[saveAttributToList] [106]: PsdAttribut_4_ID = 2158523824
[saveAttributToList] [107]: PsdAttribut_4_Wert = 22069
[saveAttributToList] [108]: PsdAttribut_5_ID = 110
[saveAttributToList] [109]: PsdAttribut_5_Wert = 2
[saveAttributToList] [136]: psdAttributSegmentID = 3
[saveAttributToList] [137]: structSeparate = 0
[clearList] [165]: clear the vPsdMap
[pushInList] [193]: preSegmentId = 3
[saveAttributToList] [100]: PsdAttribut_1_ID = 0
[saveAttributToList] [101]: PsdAttribut_1_Wert = 0
[saveAttributToList] [102]: PsdAttribut_2_ID = 0
[saveAttributToList] [103]: PsdAttribut_2_Wert = 0
[saveAttributToList] [104]: PsdAttribut_3_ID = 0
[saveAttributToList] [105]: PsdAttribut_3_Wert = 0
[saveAttributToList] [106]: PsdAttribut_4_ID = 4
[saveAttributToList] [107]: PsdAttribut_4_Wert = 0
[saveAttributToList] [108]: PsdAttribut_5_ID = 110
[saveAttributToList] [109]: PsdAttribut_5_Wert = 2
[saveAttributToList] [136]: psdAttributSegmentID = 3
[saveAttributToList] [137]: structSeparate = 0
[clearList] [165]: clear the vPsdMap
[pushInList] [193]: preSegmentId = 3
[saveAttributToList] [100]: PsdAttribut_1_ID = 0
[saveAttributToList] [101]: PsdAttribut_1_Wert = 0
[saveAttributToList] [102]: PsdAttribut_2_ID = 0
[saveAttributToList] [103]: PsdAttribut_2_Wert = 0
[saveAttributToList] [104]: PsdAttribut_3_ID = 0
[saveAttributToList] [105]: PsdAttribut_3_Wert = 0
[saveAttributToList] [106]: PsdAttribut_4_ID = 0
[saveAttributToList] [107]: PsdAttribut_4_Wert = 0
[saveAttributToList] [108]: PsdAttribut_5_ID = 4
[saveAttributToList] [109]: PsdAttribut_5_Wert = 0
[saveAttributToList] [136]: psdAttributSegmentID = 3
[saveAttributToList] [137]: structSeparate = 0
[clearList] [165]: clear the vPsdMap
[pushInList] [193]: preSegmentId = 3
[saveAttributToList] [100]: PsdAttribut_1_ID = 0
[saveAttributToList] [101]: PsdAttribut_1_Wert = 0
[saveAttributToList] [102]: PsdAttribut_2_ID = 0
[saveAttributToList] [103]: PsdAttribut_2_Wert = 0
[saveAttributToList] [104]: PsdAttribut_3_ID = 0
[saveAttributToList] [105]: PsdAttribut_3_Wert = 0
[saveAttributToList] [106]: PsdAttribut_4_ID = 0
[saveAttributToList] [107]: PsdAttribut_4_Wert = 0
[saveAttributToList] [108]: PsdAttribut_5_ID = 0
[saveAttributToList] [109]: PsdAttribut_5_Wert = 0
[saveAttributToList] [136]: psdAttributSegmentID = 3
[saveAttributToList] [137]: structSeparate = 807228000
[saveAttributToList] [100]: PsdAttribut_1_ID = 1
[saveAttributToList] [101]: PsdAttribut_1_Wert = 0
[saveAttributToList] [102]: PsdAttribut_2_ID = 4033819819
[saveAttributToList] [103]: PsdAttribut_2_Wert = 32553
[saveAttributToList] [104]: PsdAttribut_3_ID = 1
[saveAttributToList] [105]: PsdAttribut_3_Wert = 0
[saveAttributToList] [106]: PsdAttribut_4_ID = 2158523832
[saveAttributToList] [107]: PsdAttribut_4_Wert = 22069
[saveAttributToList] [108]: PsdAttribut_5_ID = 807228224
[saveAttributToList] [109]: PsdAttribut_5_Wert = 32765
[saveAttributToList] [136]: psdAttributSegmentID = 0
[saveAttributToList] [137]: structSeparate = 807228263
[clearList] [165]: clear the vPsdMap
[saveAttributToList] [100]: PsdAttribut_1_ID = 1
[saveAttributToList] [101]: PsdAttribut_1_Wert = 0
[PsdMapRun] [1546]: PsdMapRun
[PsdMessageDecoderRun] [546]: PsdMessageDecoderRun
[saveAttributToList] [102]: PsdAttribut_2_ID = 4033819819
[saveAttributToList] [103]: PsdAttribut_2_Wert = 32553
[saveAttributToList] [104]: PsdAttribut_3_ID = 1
[saveAttributToList] [105]: PsdAttribut_3_Wert = 0
[saveAttributToList] [106]: PsdAttribut_4_ID = 2158523832
[saveAttributToList] [107]: PsdAttribut_4_Wert = 22069
[saveAttributToList] [108]: PsdAttribut_5_ID = 807228224
[saveAttributToList] [109]: PsdAttribut_5_Wert = 32765
[saveAttributToList] [136]: psdAttributSegmentID = 0
[saveAttributToList] [137]: structSeparate = 807228263
[       OK ] PsdMessageDecoderTest.saveAttributToList (0 ms)
[----------] 2 tests from PsdMessageDecoderTest (0 ms total)

[----------] Global test environment tear-down
[==========] 26 tests from 3 test suites ran. (7 ms total)
[  PASSED  ] 26 tests.
Capturing coverage data from .
geninfo cmd: '/usr/local/bin/geninfo . --output-filename psd.info --test-name psd --rc lcov_branch_coverage=1 --branch-coverage'
Found gcov version: 7.5.0
Using intermediate gcov format
Writing temporary data to /tmp/geninfo_datz7k2
Scanning . for .gcda files ...
Found 5 data files in .
using: chunkSize: 1, nchunks:5, intervalLength:0
Finished processing 5 GDCA files
Apply filtering..
Finished filter file processing
Finished .info-file creation
Summary coverage rate:
  source files: 29
  lines.......: 83.2% (1732 of 2082 lines)
  functions...: 84.8% (397 of 468 functions)
  branches....: 59.7% (449 of 752 branches)
Message summary:
  1 warning message:
    deprecated: 1
Reading tracefile psd.info.
Found 29 entries.
Found common filename prefix "/home/zhao/Documents/Psd_not_use_signalAPI_justGtest"
Generating output.
Processing file external/include/signalAPI/include/vwg/sid/PSDParser/signal_data_access.hpp
  lines=2 hit=1 functions=3 hit=1
Processing file /usr/include/c++/7/bits/stl_construct.h
  lines=7 hit=7 functions=12 hit=12
Processing file /usr/include/c++/7/bits/ptr_traits.h
  lines=2 hit=2 functions=1 hit=1
Processing file inc/PsdMessageDecoder.h
  lines=1 hit=1 functions=5 hit=5
Processing file src/PsdMessageDecoder.cpp
  lines=231 hit=117 functions=31 hit=20 branches=128 hit=45
Processing file /usr/include/c++/7/bits/stl_uninitialized.h
  lines=10 hit=10 functions=18 hit=15
Processing file /usr/include/c++/7/bits/cpp_type_traits.h
  lines=2 hit=2 functions=6 hit=6
Processing file /usr/include/c++/7/ext/new_allocator.h
  lines=15 hit=14 functions=28 hit=26 branches=20 hit=7
Processing file src/PsdMap.cpp
  lines=958 hit=847 functions=49 hit=41 branches=270 hit=181
Processing file src/Haversine.cpp
  lines=35 hit=35 functions=8 hit=8 branches=4 hit=2
Processing file inc/PsdMap.h
  lines=1 hit=1 functions=2 hit=2
Processing file src/PsdLocation.cpp
  lines=349 hit=321 functions=27 hit=24 branches=230 hit=175
Processing file /usr/include/c++/7/bits/move.h
  lines=13 hit=13 functions=15 hit=14
Processing file src/GeometricCalc.cpp
  lines=25 hit=25 functions=1 hit=1
Processing file /usr/include/c++/7/iostream
  lines=1 hit=1
Processing file /usr/include/c++/7/bits/shared_ptr_base.h
  lines=65 hit=26 functions=27 hit=9 branches=14 hit=1
Processing file /usr/include/x86_64-linux-gnu/c++/7/bits/gthr-default.h
  lines=2 hit=0 functions=1 hit=0
Processing file /usr/include/c++/7/bits/allocator.h
  lines=7 hit=5 functions=10 hit=8
Processing file /usr/include/c++/7/bits/stl_vector.h
  lines=121 hit=119 functions=82 hit=79 branches=38 hit=17
Processing file /usr/include/c++/7/bits/allocated_ptr.h
  lines=14 hit=13 functions=6 hit=6 branches=2 hit=1
Processing file /usr/include/c++/7/new
  lines=2 hit=2 functions=1 hit=1
Processing file /usr/include/c++/7/bits/alloc_traits.h
  lines=22 hit=17 functions=23 hit=20
Processing file /usr/include/c++/7/typeinfo
  lines=4 hit=0 functions=1 hit=0 branches=6 hit=0
Processing file /usr/include/c++/7/bits/shared_ptr.h
  lines=4 hit=2 functions=3 hit=1
Processing file /usr/include/c++/7/bits/stl_algobase.h
  lines=37 hit=37 functions=33 hit=30 branches=14 hit=9
Processing file /usr/include/c++/7/bits/stl_iterator.h
  lines=41 hit=41 functions=57 hit=57
Processing file /usr/include/c++/7/bits/vector.tcc
  lines=86 hit=69 functions=9 hit=8 branches=22 hit=11
Processing file /usr/include/c++/7/ext/alloc_traits.h
  lines=6 hit=4 functions=3 hit=2
Processing file /usr/include/c++/7/ext/atomicity.h
  lines=19 hit=0 functions=6 hit=0 branches=4 hit=0
Overall coverage rate:
  source files: 29
  lines.......: 83.2% (1732 of 2082 lines)
  functions...: 84.8% (397 of 468 functions)
  branches....: 59.7% (449 of 752 branches)
Message summary:
  no messages were reported
