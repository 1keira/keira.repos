/*
    Copyright 2020 e.solutions GmbH
    All rights reserved
    GENERATED FROM esofw_core_sdk code generator using template InterfaceReplyS_hxx.tmpl
*/
#ifndef ASI_CONNECTIVITY_AL_CALLHANDLINGSERVICES_REPLYS_HXX
#define ASI_CONNECTIVITY_AL_CALLHANDLINGSERVICES_REPLYS_HXX
#include <ipl_config.h>
#include <comm/commidltypes.hxx>
#include <asi/connectivity/al/StructCallStatus.hxx>
#include <asi/connectivity/al/Definitions.hxx>
namespace asi
{
namespace connectivity
{
namespace al
{

    /**
    \brief  Interface declaration, which is implemented by the proxy, and used/called by any user of this interface
    **/
    class CallHandlingServicesReplyS
    {
    public:
        // List of reply methods
            /**
            sendDtmfResponse Method ID: 19
            **/
        virtual bool sendDtmfResponse (
            const asi::connectivity::al::ResultType result
        ) IPL_NOEXCEPT = 0;

            /**
            acceptCallResponse Method ID: 3
            **/
        virtual bool acceptCallResponse (
            const asi::connectivity::al::ResultType result
        ) IPL_NOEXCEPT = 0;

            /**
            acceptAndHoldCallResponse Method ID: 1
            **/
        virtual bool acceptAndHoldCallResponse (
            const asi::connectivity::al::ResultType result
        ) IPL_NOEXCEPT = 0;

            /**
            switchCallsResponse Method ID: 23
            **/
        virtual bool switchCallsResponse (
            const asi::connectivity::al::ResultType result
        ) IPL_NOEXCEPT = 0;

            /**
            dialNumberResponse Method ID: 7
            **/
        virtual bool dialNumberResponse (
            const asi::connectivity::al::ResultType result
        ) IPL_NOEXCEPT = 0;

            /**
            hangupCallResponse Method ID: 11
            **/
        virtual bool hangupCallResponse (
            const asi::connectivity::al::ResultType result
        ) IPL_NOEXCEPT = 0;

            /**
            joinCallsResponse Method ID: 15
            **/
        virtual bool joinCallsResponse (
            const asi::connectivity::al::ResultType result
        ) IPL_NOEXCEPT = 0;

            /**
            splitCallResponse Method ID: 21
            **/
        virtual bool splitCallResponse (
            const asi::connectivity::al::ResultType result
        ) IPL_NOEXCEPT = 0;

            /**
            holdActiveCallsResponse Method ID: 13
            **/
        virtual bool holdActiveCallsResponse (
            const asi::connectivity::al::ResultType result
        ) IPL_NOEXCEPT = 0;

            /**
            resumeHeldCallsResponse Method ID: 17
            **/
        virtual bool resumeHeldCallsResponse (
            const asi::connectivity::al::ResultType result
        ) IPL_NOEXCEPT = 0;

            /**
            updCallStatus Method ID: 24
            **/
        virtual bool updCallStatus (
            const asi::connectivity::al::DeviceType device,
            const CIPtr< CIPtrArray< asi::connectivity::al::CallStatus > >& states
        ) IPL_NOEXCEPT = 0;

            /**
            executeUSSDResponse Method ID: 9
            **/
        virtual bool executeUSSDResponse (
            const asi::connectivity::al::ResultType result
        ) IPL_NOEXCEPT = 0;

            /**
            *
         * USSD reply.
         * @param ussdResult if the NAD accepted the USSD this result codes states to actual network
         * result (network timeout, already answered, session started, ...)
         * @param response holds the network message if generated by the network
         
            ussdReply Method ID: 26
            **/
        virtual bool ussdReply (
            const asi::connectivity::al::UssdResultCode ussdResult,
            const CIPtr< CIString >& response
        ) IPL_NOEXCEPT = 0;

            /**
            cancelUSSDResponse Method ID: 5
            **/
        virtual bool cancelUSSDResponse (
            const asi::connectivity::al::ResultType result
        ) IPL_NOEXCEPT = 0;

            /**
            updateHfpError Method ID: 25
            **/
        virtual bool updateHfpError (
            const asi::connectivity::al::HfpError error
        ) IPL_NOEXCEPT = 0;

        virtual ~CallHandlingServicesReplyS() {}
    };

}// namespace asi
}// namespace connectivity
}// namespace al


#endif// ASI_CONNECTIVITY_AL_CALLHANDLINGSERVICES_REPLYS_HXX
